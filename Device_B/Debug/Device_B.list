
Device_B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a0  080066a0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066a8  080066a8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066ac  080066ac  000166ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080066b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016c8  20000014  080066c4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016dc  080066c4  000216dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010af0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e0  00000000  00000000  00030b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00032e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00033d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f08  00000000  00000000  00034c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c6a  00000000  00000000  0004cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092c83  00000000  00000000  000607aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  000f342d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004180  00000000  00000000  000f3500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006468 	.word	0x08006468

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08006468 	.word	0x08006468

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14d      	bne.n	80002b4 <__udivmoddi4+0xac>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d968      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b152      	cbz	r2, 800023a <__udivmoddi4+0x32>
 8000224:	fa01 f302 	lsl.w	r3, r1, r2
 8000228:	f1c2 0120 	rsb	r1, r2, #32
 800022c:	fa20 f101 	lsr.w	r1, r0, r1
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	ea41 0803 	orr.w	r8, r1, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800023e:	0c21      	lsrs	r1, r4, #16
 8000240:	fbb8 fef5 	udiv	lr, r8, r5
 8000244:	fa1f f78c 	uxth.w	r7, ip
 8000248:	fb05 831e 	mls	r3, r5, lr, r8
 800024c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000250:	fb0e f107 	mul.w	r1, lr, r7
 8000254:	4299      	cmp	r1, r3
 8000256:	d90b      	bls.n	8000270 <__udivmoddi4+0x68>
 8000258:	eb1c 0303 	adds.w	r3, ip, r3
 800025c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000260:	f080 811e 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000264:	4299      	cmp	r1, r3
 8000266:	f240 811b 	bls.w	80004a0 <__udivmoddi4+0x298>
 800026a:	f1ae 0e02 	sub.w	lr, lr, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f5 	udiv	r0, r3, r5
 8000278:	fb05 3310 	mls	r3, r5, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x96>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 8108 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8105 	bls.w	80004a4 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa8>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d908      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	f000 80ee 	beq.w	800049a <__udivmoddi4+0x292>
 80002be:	2100      	movs	r1, #0
 80002c0:	e9c6 0500 	strd	r0, r5, [r6]
 80002c4:	4608      	mov	r0, r1
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0303 	sbc.w	r3, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e2      	beq.n	80002b0 <__udivmoddi4+0xa8>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7df      	b.n	80002b0 <__udivmoddi4+0xa8>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8091 	bne.w	8000420 <__udivmoddi4+0x218>
 80002fe:	eba1 050c 	sub.w	r5, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000310:	fb07 5013 	mls	r0, r7, r3, r5
 8000314:	0c25      	lsrs	r5, r4, #16
 8000316:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	42a8      	cmp	r0, r5
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0505 	adds.w	r5, ip, r5
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	42a8      	cmp	r0, r5
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb5 f0f7 	udiv	r0, r5, r7
 800033c:	fb07 5510 	mls	r5, r7, r0, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4628      	mov	r0, r5
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x9e>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa05 f301 	lsl.w	r3, r5, r1
 800037e:	431c      	orrs	r4, r3
 8000380:	40fd      	lsrs	r5, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f301 	lsl.w	r3, r0, r1
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 5518 	mls	r5, r9, r8, r5
 8000398:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	42a8      	cmp	r0, r5
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0505 	adds.w	r5, ip, r5
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4465      	add	r5, ip
 80003c0:	1a2d      	subs	r5, r5, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003c8:	fb09 5510 	mls	r5, r9, r0, r5
 80003cc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45ae      	cmp	lr, r5
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0505 	adds.w	r5, ip, r5
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	45ae      	cmp	lr, r5
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4465      	add	r5, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba5 050e 	sub.w	r5, r5, lr
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15e      	cbz	r6, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb65 050e 	sbc.w	r5, r5, lr
 800040a:	fa05 f707 	lsl.w	r7, r5, r7
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	40cd      	lsrs	r5, r1
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c6 7500 	strd	r7, r5, [r6]
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa25 f303 	lsr.w	r3, r5, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	430d      	orrs	r5, r1
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000440:	fb07 3011 	mls	r0, r7, r1, r3
 8000444:	0c2b      	lsrs	r3, r5, #16
 8000446:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800044a:	fb01 f00e 	mul.w	r0, r1, lr
 800044e:	4298      	cmp	r0, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f101 38ff 	add.w	r8, r1, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	4298      	cmp	r0, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3902      	subs	r1, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a1b      	subs	r3, r3, r0
 800046a:	b2ad      	uxth	r5, r5
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3310 	mls	r3, r7, r0, r3
 8000474:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000478:	fb00 f30e 	mul.w	r3, r0, lr
 800047c:	42ab      	cmp	r3, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 38ff 	add.w	r8, r0, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	42ab      	cmp	r3, r5
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	1aed      	subs	r5, r5, r3
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e707      	b.n	80002b0 <__udivmoddi4+0xa8>
 80004a0:	4686      	mov	lr, r0
 80004a2:	e6e5      	b.n	8000270 <__udivmoddi4+0x68>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fa      	b.n	800029e <__udivmoddi4+0x96>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4641      	mov	r1, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4465      	add	r5, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f001 fa52 	bl	8001988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f824 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 fa5a 	bl	80009a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004ec:	f000 f8d2 	bl	8000694 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f0:	f000 f954 	bl	800079c <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f4:	f000 f99e 	bl	8000834 <MX_TIM3_Init>
  MX_SPI2_Init();
 80004f8:	f000 f896 	bl	8000628 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80004fc:	f000 fa26 	bl	800094c <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000500:	f000 f87e 	bl	8000600 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  nRF24_Init(&hspi2);
 8000504:	4807      	ldr	r0, [pc, #28]	; (8000524 <main+0x48>)
 8000506:	f000 feab 	bl	8001260 <nRF24_Init>
    	nRF24_SetRXAddress(0, "Odb");
 800050a:	4907      	ldr	r1, [pc, #28]	; (8000528 <main+0x4c>)
 800050c:	2000      	movs	r0, #0
 800050e:	f000 fd82 	bl	8001016 <nRF24_SetRXAddress>
    	nRF24_SetTXAddress("Nad");
 8000512:	4806      	ldr	r0, [pc, #24]	; (800052c <main+0x50>)
 8000514:	f000 fdb8 	bl	8001088 <nRF24_SetTXAddress>
    	nRF24_RX_Mode();
 8000518:	f000 fba0 	bl	8000c5c <nRF24_RX_Mode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  receive_message();
 800051c:	f000 ff9e 	bl	800145c <receive_message>
  {
 8000520:	e7fc      	b.n	800051c <main+0x40>
 8000522:	bf00      	nop
 8000524:	20000038 	.word	0x20000038
 8000528:	08006480 	.word	0x08006480
 800052c:	08006484 	.word	0x08006484

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f005 ff8a 	bl	8006458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <SystemClock_Config+0xc8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a26      	ldr	r2, [pc, #152]	; (80005f8 <SystemClock_Config+0xc8>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b21      	ldr	r3, [pc, #132]	; (80005fc <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <SystemClock_Config+0xcc>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005a4:	2364      	movs	r3, #100	; 0x64
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fd79 	bl	80020ac <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c0:	f000 fa78 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2103      	movs	r1, #3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 ffdb 	bl	800259c <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005ec:	f000 fa62 	bl	8000ab4 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_CRC_Init+0x20>)
 8000606:	4a07      	ldr	r2, [pc, #28]	; (8000624 <MX_CRC_Init+0x24>)
 8000608:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_CRC_Init+0x20>)
 800060c:	f001 fb5b 	bl	8001cc6 <HAL_CRC_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000616:	f000 fa4d 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000030 	.word	0x20000030
 8000624:	40023000 	.word	0x40023000

08000628 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_SPI2_Init+0x64>)
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_SPI2_Init+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_SPI2_Init+0x64>)
 8000634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000638:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_SPI2_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_SPI2_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_SPI2_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_SPI2_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_SPI2_Init+0x64>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_SPI2_Init+0x64>)
 800065c:	2210      	movs	r2, #16
 800065e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_SPI2_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_SPI2_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_SPI2_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_SPI2_Init+0x64>)
 8000674:	220a      	movs	r2, #10
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_SPI2_Init+0x64>)
 800067a:	f002 f96d 	bl	8002958 <HAL_SPI_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000684:	f000 fa16 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000038 	.word	0x20000038
 8000690:	40003800 	.word	0x40003800

08000694 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b092      	sub	sp, #72	; 0x48
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2220      	movs	r2, #32
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 feca 	bl	8006458 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <MX_TIM1_Init+0x100>)
 80006c6:	4a34      	ldr	r2, [pc, #208]	; (8000798 <MX_TIM1_Init+0x104>)
 80006c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ca:	4b32      	ldr	r3, [pc, #200]	; (8000794 <MX_TIM1_Init+0x100>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <MX_TIM1_Init+0x100>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2631;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <MX_TIM1_Init+0x100>)
 80006d8:	f640 2247 	movw	r2, #2631	; 0xa47
 80006dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_TIM1_Init+0x100>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e4:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <MX_TIM1_Init+0x100>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <MX_TIM1_Init+0x100>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006f0:	4828      	ldr	r0, [pc, #160]	; (8000794 <MX_TIM1_Init+0x100>)
 80006f2:	f002 ff28 	bl	8003546 <HAL_TIM_PWM_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80006fc:	f000 f9da 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000708:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070c:	4619      	mov	r1, r3
 800070e:	4821      	ldr	r0, [pc, #132]	; (8000794 <MX_TIM1_Init+0x100>)
 8000710:	f003 ffa4 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800071a:	f000 f9cb 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071e:	2360      	movs	r3, #96	; 0x60
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1315;
 8000722:	f240 5323 	movw	r3, #1315	; 0x523
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4813      	ldr	r0, [pc, #76]	; (8000794 <MX_TIM1_Init+0x100>)
 8000746:	f003 f949 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000750:	f000 f9b0 	bl	8000ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	4807      	ldr	r0, [pc, #28]	; (8000794 <MX_TIM1_Init+0x100>)
 8000778:	f003 ffdc 	bl	8004734 <HAL_TIMEx_ConfigBreakDeadTime>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000782:	f000 f997 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <MX_TIM1_Init+0x100>)
 8000788:	f001 f80a 	bl	80017a0 <HAL_TIM_MspPostInit>

}
 800078c:	bf00      	nop
 800078e:	3748      	adds	r7, #72	; 0x48
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000090 	.word	0x20000090
 8000798:	40010000 	.word	0x40010000

0800079c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_TIM2_Init+0x94>)
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_TIM2_Init+0x94>)
 80007c2:	2263      	movs	r2, #99	; 0x63
 80007c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_TIM2_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_TIM2_Init+0x94>)
 80007ce:	f04f 32ff 	mov.w	r2, #4294967295
 80007d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_TIM2_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_TIM2_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e0:	4813      	ldr	r0, [pc, #76]	; (8000830 <MX_TIM2_Init+0x94>)
 80007e2:	f002 fe61 	bl	80034a8 <HAL_TIM_Base_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007ec:	f000 f962 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	4619      	mov	r1, r3
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_TIM2_Init+0x94>)
 80007fe:	f003 f9af 	bl	8003b60 <HAL_TIM_ConfigClockSource>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000808:	f000 f954 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_TIM2_Init+0x94>)
 800081a:	f003 ff1f 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f946 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000d8 	.word	0x200000d8

08000834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b090      	sub	sp, #64	; 0x40
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800086e:	4b35      	ldr	r3, [pc, #212]	; (8000944 <MX_TIM3_Init+0x110>)
 8000870:	4a35      	ldr	r2, [pc, #212]	; (8000948 <MX_TIM3_Init+0x114>)
 8000872:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <MX_TIM3_Init+0x110>)
 8000876:	2263      	movs	r2, #99	; 0x63
 8000878:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	4b32      	ldr	r3, [pc, #200]	; (8000944 <MX_TIM3_Init+0x110>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000880:	4b30      	ldr	r3, [pc, #192]	; (8000944 <MX_TIM3_Init+0x110>)
 8000882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_TIM3_Init+0x110>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_TIM3_Init+0x110>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000894:	482b      	ldr	r0, [pc, #172]	; (8000944 <MX_TIM3_Init+0x110>)
 8000896:	f002 fe07 	bl	80034a8 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008a0:	f000 f908 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ae:	4619      	mov	r1, r3
 80008b0:	4824      	ldr	r0, [pc, #144]	; (8000944 <MX_TIM3_Init+0x110>)
 80008b2:	f003 f955 	bl	8003b60 <HAL_TIM_ConfigClockSource>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008bc:	f000 f8fa 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80008c0:	4820      	ldr	r0, [pc, #128]	; (8000944 <MX_TIM3_Init+0x110>)
 80008c2:	f002 fe8f 	bl	80035e4 <HAL_TIM_IC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80008cc:	f000 f8f2 	bl	8000ab4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80008d0:	2304      	movs	r3, #4
 80008d2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	; (8000944 <MX_TIM3_Init+0x110>)
 80008e8:	f003 fa01 	bl	8003cee <HAL_TIM_SlaveConfigSynchro>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80008f2:	f000 f8df 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480f      	ldr	r0, [pc, #60]	; (8000944 <MX_TIM3_Init+0x110>)
 8000906:	f003 fea9 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000910:	f000 f8d0 	bl	8000ab4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000914:	2302      	movs	r3, #2
 8000916:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000918:	2301      	movs	r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <MX_TIM3_Init+0x110>)
 800092c:	f002 ffba 	bl	80038a4 <HAL_TIM_IC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000936:	f000 f8bd 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3740      	adds	r7, #64	; 0x40
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000120 	.word	0x20000120
 8000948:	40000400 	.word	0x40000400

0800094c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_USART1_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART1_UART_Init+0x4c>)
 8000984:	f003 ff39 	bl	80047fa <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f891 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000168 	.word	0x20000168
 800099c:	40011000 	.word	0x40011000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <MX_GPIO_Init+0x108>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a3a      	ldr	r2, [pc, #232]	; (8000aa8 <MX_GPIO_Init+0x108>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <MX_GPIO_Init+0x108>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <MX_GPIO_Init+0x108>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a33      	ldr	r2, [pc, #204]	; (8000aa8 <MX_GPIO_Init+0x108>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <MX_GPIO_Init+0x108>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_GPIO_Init+0x108>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a2c      	ldr	r2, [pc, #176]	; (8000aa8 <MX_GPIO_Init+0x108>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_GPIO_Init+0x108>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_GPIO_Init+0x108>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a25      	ldr	r2, [pc, #148]	; (8000aa8 <MX_GPIO_Init+0x108>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <MX_GPIO_Init+0x108>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2c:	481f      	ldr	r0, [pc, #124]	; (8000aac <MX_GPIO_Init+0x10c>)
 8000a2e:	f001 fae9 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_NRF_Pin|CS_NRF_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2118      	movs	r1, #24
 8000a36:	481e      	ldr	r0, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0x110>)
 8000a38:	f001 fae4 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4815      	ldr	r0, [pc, #84]	; (8000aac <MX_GPIO_Init+0x10c>)
 8000a56:	f001 f953 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_NRF_Pin CS_NRF_Pin */
  GPIO_InitStruct.Pin = CE_NRF_Pin|CS_NRF_Pin;
 8000a5a:	2318      	movs	r3, #24
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <MX_GPIO_Init+0x110>)
 8000a72:	f001 f945 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_NRF_Pin */
  GPIO_InitStruct.Pin = IRQ_NRF_Pin;
 8000a76:	2320      	movs	r3, #32
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_NRF_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_GPIO_Init+0x110>)
 8000a8c:	f001 f938 	bl	8001d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2017      	movs	r0, #23
 8000a96:	f001 f8e0 	bl	8001c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a9a:	2017      	movs	r0, #23
 8000a9c:	f001 f8f9 	bl	8001c92 <HAL_NVIC_EnableIRQ>

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>

08000abe <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f000 ffcb 	bl	8001a64 <HAL_Delay>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <nRF24_SendSpi+0x28>)
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	f001 ffba 	bl	8002a6a <HAL_SPI_Transmit>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200001b0 	.word	0x200001b0

08000b04 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <nRF24_ReadSpi+0x28>)
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	f002 f8e0 	bl	8002ce2 <HAL_SPI_Receive>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200001b0 	.word	0x200001b0

08000b30 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2110      	movs	r1, #16
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <nRF24_ReadRegister+0x44>)
 8000b44:	f001 fa5e 	bl	8002004 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffc3 	bl	8000ad8 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000b52:	f107 030f 	add.w	r3, r7, #15
 8000b56:	2101      	movs	r1, #1
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ffd3 	bl	8000b04 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2110      	movs	r1, #16
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <nRF24_ReadRegister+0x44>)
 8000b64:	f001 fa4e 	bl	8002004 <HAL_GPIO_WritePin>

	return result;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40020400 	.word	0x40020400

08000b78 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2110      	movs	r1, #16
 8000b90:	480a      	ldr	r0, [pc, #40]	; (8000bbc <nRF24_ReadRegisters+0x44>)
 8000b92:	f001 fa37 	bl	8002004 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff9c 	bl	8000ad8 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	6838      	ldr	r0, [r7, #0]
 8000ba6:	f7ff ffad 	bl	8000b04 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8000baa:	2201      	movs	r2, #1
 8000bac:	2110      	movs	r1, #16
 8000bae:	4803      	ldr	r0, [pc, #12]	; (8000bbc <nRF24_ReadRegisters+0x44>)
 8000bb0:	f001 fa28 	bl	8002004 <HAL_GPIO_WritePin>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f043 0320 	orr.w	r3, r3, #32
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8000bda:	79bb      	ldrb	r3, [r7, #6]
 8000bdc:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000bde:	2200      	movs	r2, #0
 8000be0:	2110      	movs	r1, #16
 8000be2:	4809      	ldr	r0, [pc, #36]	; (8000c08 <nRF24_WriteRegister+0x48>)
 8000be4:	f001 fa0e 	bl	8002004 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	2102      	movs	r1, #2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff72 	bl	8000ad8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2110      	movs	r1, #16
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <nRF24_WriteRegister+0x48>)
 8000bfa:	f001 fa03 	bl	8002004 <HAL_GPIO_WritePin>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40020400 	.word	0x40020400

08000c0c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f043 0320 	orr.w	r3, r3, #32
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000c26:	2200      	movs	r2, #0
 8000c28:	2110      	movs	r1, #16
 8000c2a:	480b      	ldr	r0, [pc, #44]	; (8000c58 <nRF24_WriteRegisters+0x4c>)
 8000c2c:	f001 f9ea 	bl	8002004 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	2101      	movs	r1, #1
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff4f 	bl	8000ad8 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	6838      	ldr	r0, [r7, #0]
 8000c40:	f7ff ff4a 	bl	8000ad8 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000c44:	2201      	movs	r2, #1
 8000c46:	2110      	movs	r1, #16
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <nRF24_WriteRegisters+0x4c>)
 8000c4a:	f001 f9db 	bl	8002004 <HAL_GPIO_WritePin>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40020400 	.word	0x40020400

08000c5c <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8000c62:	f000 f829 	bl	8000cb8 <nRF24_ReadConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8000c6a:	4911      	ldr	r1, [pc, #68]	; (8000cb0 <nRF24_RX_Mode+0x54>)
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 f9d2 	bl	8001016 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f81f 	bl	8000cc8 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8000c8a:	2070      	movs	r0, #112	; 0x70
 8000c8c:	f000 f877 	bl	8000d7e <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8000c90:	f000 f884 	bl	8000d9c <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8000c94:	f000 f89c 	bl	8000dd0 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <nRF24_RX_Mode+0x58>)
 8000c9e:	f001 f9b1 	bl	8002004 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff ff0b 	bl	8000abe <nRF24_Delay>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200001b4 	.word	0x200001b4
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <nRF24_ReadConfig>:
}



uint8_t nRF24_ReadConfig(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff37 	bl	8000b30 <nRF24_ReadRegister>
 8000cc2:	4603      	mov	r3, r0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff72 	bl	8000bc0 <nRF24_WriteRegister>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000cee:	2006      	movs	r0, #6
 8000cf0:	f7ff ff1e 	bl	8000b30 <nRF24_ReadRegister>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	f023 0307 	bic.w	r3, r3, #7
 8000cfe:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	b25a      	sxtb	r2, r3
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	4619      	mov	r1, r3
 8000d14:	2006      	movs	r0, #6
 8000d16:	f7ff ff53 	bl	8000bc0 <nRF24_WriteRegister>
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8000d2c:	2006      	movs	r0, #6
 8000d2e:	f7ff feff 	bl	8000b30 <nRF24_ReadRegister>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000d3c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d104      	bne.n	8000d4e <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e006      	b.n	8000d5c <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d103      	bne.n	8000d5c <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	2006      	movs	r0, #6
 8000d62:	f7ff ff2d 	bl	8000bc0 <nRF24_WriteRegister>
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8000d72:	2007      	movs	r0, #7
 8000d74:	f7ff fedc 	bl	8000b30 <nRF24_ReadRegister>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	2007      	movs	r0, #7
 8000d8e:	f7ff ff17 	bl	8000bc0 <nRF24_WriteRegister>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8000da2:	23e2      	movs	r3, #226	; 0xe2
 8000da4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000da6:	2200      	movs	r2, #0
 8000da8:	2110      	movs	r1, #16
 8000daa:	4808      	ldr	r0, [pc, #32]	; (8000dcc <nRF24_FlushRX+0x30>)
 8000dac:	f001 f92a 	bl	8002004 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	2101      	movs	r1, #1
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fe8f 	bl	8000ad8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4803      	ldr	r0, [pc, #12]	; (8000dcc <nRF24_FlushRX+0x30>)
 8000dc0:	f001 f920 	bl	8002004 <HAL_GPIO_WritePin>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8000dd6:	23e1      	movs	r3, #225	; 0xe1
 8000dd8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2110      	movs	r1, #16
 8000dde:	4808      	ldr	r0, [pc, #32]	; (8000e00 <nRF24_FlushTX+0x30>)
 8000de0:	f001 f910 	bl	8002004 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	2101      	movs	r1, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fe75 	bl	8000ad8 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8000dee:	2201      	movs	r2, #1
 8000df0:	2110      	movs	r1, #16
 8000df2:	4803      	ldr	r0, [pc, #12]	; (8000e00 <nRF24_FlushTX+0x30>)
 8000df4:	f001 f906 	bl	8002004 <HAL_GPIO_WritePin>
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40020400 	.word	0x40020400

08000e04 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000e0e:	f7ff ff53 	bl	8000cb8 <nRF24_ReadConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d004      	beq.n	8000e26 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	e003      	b.n	8000e2e <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f023 0308 	bic.w	r3, r3, #8
 8000e2c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff49 	bl	8000cc8 <nRF24_WriteConfig>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8000e48:	f7ff ff36 	bl	8000cb8 <nRF24_ReadConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d104      	bne.n	8000e60 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e003      	b.n	8000e68 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	f023 0304 	bic.w	r3, r3, #4
 8000e66:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff2c 	bl	8000cc8 <nRF24_WriteConfig>
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	b25a      	sxtb	r2, r3
 8000e8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	2004      	movs	r0, #4
 8000ea2:	f7ff fe8d 	bl	8000bc0 <nRF24_WriteRegister>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f7ff fe7c 	bl	8000bc0 <nRF24_WriteRegister>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	d901      	bls.n	8000eea <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	3311      	adds	r3, #17
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	79bb      	ldrb	r3, [r7, #6]
 8000ef2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4610      	mov	r0, r2
 8000efc:	f7ff fe60 	bl	8000bc0 <nRF24_WriteRegister>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b05      	cmp	r3, #5
 8000f1c:	d901      	bls.n	8000f22 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 8000f1e:	2305      	movs	r3, #5
 8000f20:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f7ff fe04 	bl	8000b30 <nRF24_ReadRegister>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d10a      	bne.n	8000f48 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2201      	movs	r2, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	b25a      	sxtb	r2, r3
 8000f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e00b      	b.n	8000f60 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	b25a      	sxtb	r2, r3
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4619      	mov	r1, r3
 8000f64:	2002      	movs	r0, #2
 8000f66:	f7ff fe2b 	bl	8000bc0 <nRF24_WriteRegister>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	460a      	mov	r2, r1
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d901      	bls.n	8000f8c <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8000f88:	2305      	movs	r3, #5
 8000f8a:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f7ff fdcf 	bl	8000b30 <nRF24_ReadRegister>
 8000f92:	4603      	mov	r3, r0
 8000f94:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d10a      	bne.n	8000fb2 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	b25a      	sxtb	r2, r3
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e00b      	b.n	8000fca <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	b25a      	sxtb	r2, r3
 8000fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff fdf6 	bl	8000bc0 <nRF24_WriteRegister>
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	d901      	bls.n	8000ff0 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8000fec:	2305      	movs	r3, #5
 8000fee:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d801      	bhi.n	8000ffa <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	3b02      	subs	r3, #2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4619      	mov	r1, r3
 8001008:	2003      	movs	r0, #3
 800100a:	f7ff fdd9 	bl	8000bc0 <nRF24_WriteRegister>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	6039      	str	r1, [r7, #0]
 8001020:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <nRF24_SetRXAddress+0x18>
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d11d      	bne.n	800106a <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e00d      	b.n	8001050 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	441a      	add	r2, r3
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	f1c3 0302 	rsb	r3, r3, #2
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	3310      	adds	r3, #16
 8001044:	443b      	add	r3, r7
 8001046:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	3301      	adds	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d9ee      	bls.n	8001034 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	330a      	adds	r3, #10
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f107 010c 	add.w	r1, r7, #12
 8001060:	2203      	movs	r2, #3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fdd2 	bl	8000c0c <nRF24_WriteRegisters>
	{
 8001068:	e00a      	b.n	8001080 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	330a      	adds	r3, #10
 800106e:	b2da      	uxtb	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3302      	adds	r3, #2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	4610      	mov	r0, r2
 800107a:	f7ff fda1 	bl	8000bc0 <nRF24_WriteRegister>
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2203      	movs	r2, #3
 8001096:	4619      	mov	r1, r3
 8001098:	200a      	movs	r0, #10
 800109a:	f7ff fd6d 	bl	8000b78 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e00c      	b.n	80010be <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	f1c3 0302 	rsb	r3, r3, #2
 80010ac:	3210      	adds	r2, #16
 80010ae:	443a      	add	r2, r7
 80010b0:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80010b4:	4a16      	ldr	r2, [pc, #88]	; (8001110 <nRF24_SetTXAddress+0x88>)
 80010b6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	3301      	adds	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d9ef      	bls.n	80010a4 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e00d      	b.n	80010e6 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	441a      	add	r2, r3
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f1c3 0302 	rsb	r3, r3, #2
 80010d6:	7812      	ldrb	r2, [r2, #0]
 80010d8:	3310      	adds	r3, #16
 80010da:	443b      	add	r3, r7
 80010dc:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	3301      	adds	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d9ee      	bls.n	80010ca <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2203      	movs	r2, #3
 80010f2:	4619      	mov	r1, r3
 80010f4:	200a      	movs	r0, #10
 80010f6:	f7ff fd89 	bl	8000c0c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2203      	movs	r2, #3
 8001100:	4619      	mov	r1, r3
 8001102:	2010      	movs	r0, #16
 8001104:	f7ff fd82 	bl	8000c0c <nRF24_WriteRegisters>

}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200001b4 	.word	0x200001b4

08001114 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800111a:	f7ff fe28 	bl	8000d6e <nRF24_ReadStatus>
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001128:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fe26 	bl	8000d7e <nRF24_WriteStatus>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001144:	f7ff fdb8 	bl	8000cb8 <nRF24_ReadConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d104      	bne.n	800115c <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e003      	b.n	8001164 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001162:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fdae 	bl	8000cc8 <nRF24_WriteConfig>
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800117e:	f7ff fd9b 	bl	8000cb8 <nRF24_ReadConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d104      	bne.n	8001196 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e003      	b.n	800119e <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f023 0320 	bic.w	r3, r3, #32
 800119c:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fd91 	bl	8000cc8 <nRF24_WriteConfig>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80011b8:	f7ff fd7e 	bl	8000cb8 <nRF24_ReadConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d104      	bne.n	80011d0 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e003      	b.n	80011d8 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	f023 0310 	bic.w	r3, r3, #16
 80011d6:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd74 	bl	8000cc8 <nRF24_WriteConfig>
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <nRF24_ReadRXPaylaod>:
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));

}

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80011f0:	2220      	movs	r2, #32
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	2061      	movs	r0, #97	; 0x61
 80011f6:	f7ff fcbf 	bl	8000b78 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 80011fa:	2101      	movs	r1, #1
 80011fc:	2007      	movs	r0, #7
 80011fe:	f7ff fcdf 	bl	8000bc0 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8001202:	f7ff fdb4 	bl	8000d6e <nRF24_ReadStatus>
 8001206:	4603      	mov	r3, r0
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8001210:	2120      	movs	r1, #32
 8001212:	2007      	movs	r0, #7
 8001214:	f7ff fcd4 	bl	8000bc0 <nRF24_WriteRegister>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <nRF24_RXAvailible>:
{

}

uint8_t nRF24_RXAvailible(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8001226:	f7ff fda2 	bl	8000d6e <nRF24_ReadStatus>
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00c      	beq.n	8001252 <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <nRF24_RXAvailible+0x3c>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001244:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fd98 	bl	8000d7e <nRF24_WriteStatus>
		return 1;
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <nRF24_RXAvailible+0x34>
	}
	return 0;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001ac 	.word	0x200001ac

08001260 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001268:	4a25      	ldr	r2, [pc, #148]	; (8001300 <nRF24_Init+0xa0>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800126e:	2200      	movs	r2, #0
 8001270:	2108      	movs	r1, #8
 8001272:	4824      	ldr	r0, [pc, #144]	; (8001304 <nRF24_Init+0xa4>)
 8001274:	f000 fec6 	bl	8002004 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001278:	2201      	movs	r2, #1
 800127a:	2110      	movs	r1, #16
 800127c:	4821      	ldr	r0, [pc, #132]	; (8001304 <nRF24_Init+0xa4>)
 800127e:	f000 fec1 	bl	8002004 <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 8001282:	2005      	movs	r0, #5
 8001284:	f7ff fc1b 	bl	8000abe <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8001288:	2003      	movs	r0, #3
 800128a:	f7ff fd2b 	bl	8000ce4 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800128e:	2002      	movs	r0, #2
 8001290:	f7ff fd47 	bl	8000d22 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff fdb5 	bl	8000e04 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fdcf 	bl	8000e3e <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80012a0:	2107      	movs	r1, #7
 80012a2:	2004      	movs	r0, #4
 80012a4:	f7ff fde8 	bl	8000e78 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80012a8:	2100      	movs	r1, #0
 80012aa:	201c      	movs	r0, #28
 80012ac:	f7ff fc88 	bl	8000bc0 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80012b0:	200a      	movs	r0, #10
 80012b2:	f7ff fdfc 	bl	8000eae <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80012b6:	2120      	movs	r1, #32
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fe09 	bl	8000ed0 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80012be:	2101      	movs	r1, #1
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fe21 	bl	8000f08 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80012c6:	2101      	movs	r1, #1
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff fe52 	bl	8000f72 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80012ce:	2003      	movs	r0, #3
 80012d0:	f7ff fe84 	bl	8000fdc <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 80012d4:	2014      	movs	r0, #20
 80012d6:	f7ff fbf2 	bl	8000abe <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff ff2d 	bl	800113a <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ff47 	bl	8001174 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff ff61 	bl	80011ae <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 80012ec:	2014      	movs	r0, #20
 80012ee:	f7ff fbe6 	bl	8000abe <nRF24_Delay>

	nRF24_ClearInterrupts();
 80012f2:	f7ff ff0f 	bl	8001114 <nRF24_ClearInterrupts>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001b0 	.word	0x200001b0
 8001304:	40020400 	.word	0x40020400

08001308 <RSA_Decrypt>:

int32_t RSA_Decrypt(RSAprivKey_stt * P_pPrivKey,
                    const uint8_t * P_pInputMessage,
                    uint8_t *P_pOutput,
                    int32_t *P_OutputSize)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	603b      	str	r3, [r7, #0]
  int32_t status = RSA_SUCCESS ;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  RSAinOut_stt inOut_st;
  membuf_stt mb;

  mb.mSize = sizeof(preallocated_buffer);
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	82bb      	strh	r3, [r7, #20]
  mb.mUsed = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	82fb      	strh	r3, [r7, #22]
  mb.pmBuf = preallocated_buffer;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <RSA_Decrypt+0x4c>)
 8001326:	613b      	str	r3, [r7, #16]

  /* Fill the RSAinOut_stt */
  inOut_st.pmInput = P_pInputMessage;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	61bb      	str	r3, [r7, #24]
  inOut_st.mInputSize = P_pPrivKey->mModulusSize;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	61fb      	str	r3, [r7, #28]
  inOut_st.pmOutput = P_pOutput;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	623b      	str	r3, [r7, #32]

  /* Encrypt the message, this function will write sizeof(modulus) data */
  status = RSA_PKCS1v15_Decrypt(P_pPrivKey, &inOut_st, P_OutputSize, &mb);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	f107 0118 	add.w	r1, r7, #24
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f004 ff85 	bl	8006250 <RSA_PKCS1v15_Decrypt>
 8001346:	6278      	str	r0, [r7, #36]	; 0x24
  return(status);
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800134a:	4618      	mov	r0, r3
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001b8 	.word	0x200001b8

08001358 <buffer_add_rx>:
uint8_t rx_ring_buffer[BUFFER_SIZE];  // Ring buffer to store received data
uint16_t rx_head = 0, rx_tail = 0;    // Head and tail for the ring buffer
uint8_t chunk[NRF24_PAYLOAD_SIZE];    // Buffer to hold each 32-byte chunk

// Add received chunk to the ring buffer
void buffer_add_rx(uint8_t* data, uint16_t length) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	81fb      	strh	r3, [r7, #14]
 8001368:	e01b      	b.n	80013a2 <buffer_add_rx+0x4a>
        rx_ring_buffer[rx_head] = data[i];
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <buffer_add_rx+0x60>)
 8001372:	8812      	ldrh	r2, [r2, #0]
 8001374:	7819      	ldrb	r1, [r3, #0]
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <buffer_add_rx+0x64>)
 8001378:	5499      	strb	r1, [r3, r2]
        rx_head = (rx_head + 1) % BUFFER_SIZE;
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <buffer_add_rx+0x60>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <buffer_add_rx+0x68>)
 8001382:	fb82 1203 	smull	r1, r2, r2, r3
 8001386:	1191      	asrs	r1, r2, #6
 8001388:	17da      	asrs	r2, r3, #31
 800138a:	1a8a      	subs	r2, r1, r2
 800138c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001390:	fb01 f202 	mul.w	r2, r1, r2
 8001394:	1a9a      	subs	r2, r3, r2
 8001396:	b292      	uxth	r2, r2
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <buffer_add_rx+0x60>)
 800139a:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	3301      	adds	r3, #1
 80013a0:	81fb      	strh	r3, [r7, #14]
 80013a2:	89fa      	ldrh	r2, [r7, #14]
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3df      	bcc.n	800136a <buffer_add_rx+0x12>
    }
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200016b4 	.word	0x200016b4
 80013bc:	200012cc 	.word	0x200012cc
 80013c0:	10624dd3 	.word	0x10624dd3

080013c4 <buffer_get_full_message>:

// Extract full message from the ring buffer
void buffer_get_full_message(uint8_t* message, uint16_t length) {
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	81fb      	strh	r3, [r7, #14]
 80013d4:	e01c      	b.n	8001410 <buffer_get_full_message+0x4c>
        message[i] = rx_ring_buffer[rx_tail];
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <buffer_get_full_message+0x60>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	4619      	mov	r1, r3
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a11      	ldr	r2, [pc, #68]	; (8001428 <buffer_get_full_message+0x64>)
 80013e4:	5c52      	ldrb	r2, [r2, r1]
 80013e6:	701a      	strb	r2, [r3, #0]
        rx_tail = (rx_tail + 1) % BUFFER_SIZE;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <buffer_get_full_message+0x60>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <buffer_get_full_message+0x68>)
 80013f0:	fb82 1203 	smull	r1, r2, r2, r3
 80013f4:	1191      	asrs	r1, r2, #6
 80013f6:	17da      	asrs	r2, r3, #31
 80013f8:	1a8a      	subs	r2, r1, r2
 80013fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013fe:	fb01 f202 	mul.w	r2, r1, r2
 8001402:	1a9a      	subs	r2, r3, r2
 8001404:	b292      	uxth	r2, r2
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <buffer_get_full_message+0x60>)
 8001408:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	3301      	adds	r3, #1
 800140e:	81fb      	strh	r3, [r7, #14]
 8001410:	89fa      	ldrh	r2, [r7, #14]
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3de      	bcc.n	80013d6 <buffer_get_full_message+0x12>
    }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	200016b6 	.word	0x200016b6
 8001428:	200012cc 	.word	0x200012cc
 800142c:	10624dd3 	.word	0x10624dd3

08001430 <flush_rx_buffer>:

// Function to flush the transmission ring buffer
void flush_rx_buffer() {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    // Reset the head, tail, and size to flush the buffer
    rx_head = 0;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <flush_rx_buffer+0x20>)
 8001436:	2200      	movs	r2, #0
 8001438:	801a      	strh	r2, [r3, #0]
    rx_tail = 0;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <flush_rx_buffer+0x24>)
 800143c:	2200      	movs	r2, #0
 800143e:	801a      	strh	r2, [r3, #0]
    //rx_size = 0;

    // Optionally clear the buffer content
    memset(rx_ring_buffer, 0, sizeof(rx_ring_buffer));
 8001440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001444:	2100      	movs	r1, #0
 8001446:	4804      	ldr	r0, [pc, #16]	; (8001458 <flush_rx_buffer+0x28>)
 8001448:	f005 f806 	bl	8006458 <memset>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200016b4 	.word	0x200016b4
 8001454:	200016b6 	.word	0x200016b6
 8001458:	200012cc 	.word	0x200012cc

0800145c <receive_message>:

void receive_message(){
 800145c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
	if (nRF24_RXAvailible()) {
 8001464:	f7ff fedc 	bl	8001220 <nRF24_RXAvailible>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <receive_message+0xda>
		    nRF24_ReadRXPaylaod(chunk);  // Receive 32-byte chunk
 800146e:	4834      	ldr	r0, [pc, #208]	; (8001540 <receive_message+0xe4>)
 8001470:	f7ff feba 	bl	80011e8 <nRF24_ReadRXPaylaod>
		    buffer_add_rx(chunk, NRF24_PAYLOAD_SIZE);  // Store received chunk in the buffer
 8001474:	2120      	movs	r1, #32
 8001476:	4832      	ldr	r0, [pc, #200]	; (8001540 <receive_message+0xe4>)
 8001478:	f7ff ff6e 	bl	8001358 <buffer_add_rx>
		    //MessageLength = sprintf(Message, "%s\n\r", chunk);
		    //HAL_UART_Transmit(&huart1, Message, MessageLength, 1000);

		    // Optionally, you can check if the entire message is received and process it
		    if (rx_head >= expected_message_size) {
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <receive_message+0xe8>)
 800147e:	881a      	ldrh	r2, [r3, #0]
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <receive_message+0xec>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d351      	bcc.n	800152c <receive_message+0xd0>
 8001488:	466b      	mov	r3, sp
 800148a:	461e      	mov	r6, r3
		    uint8_t received_message[expected_message_size];
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <receive_message+0xec>)
 800148e:	8819      	ldrh	r1, [r3, #0]
 8001490:	460b      	mov	r3, r1
 8001492:	3b01      	subs	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	b28b      	uxth	r3, r1
 8001498:	2200      	movs	r2, #0
 800149a:	4698      	mov	r8, r3
 800149c:	4691      	mov	r9, r2
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014b2:	b28b      	uxth	r3, r1
 80014b4:	2200      	movs	r2, #0
 80014b6:	461c      	mov	r4, r3
 80014b8:	4615      	mov	r5, r2
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	00eb      	lsls	r3, r5, #3
 80014c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014c8:	00e2      	lsls	r2, r4, #3
 80014ca:	460b      	mov	r3, r1
 80014cc:	3307      	adds	r3, #7
 80014ce:	08db      	lsrs	r3, r3, #3
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	ebad 0d03 	sub.w	sp, sp, r3
 80014d6:	466b      	mov	r3, sp
 80014d8:	3300      	adds	r3, #0
 80014da:	603b      	str	r3, [r7, #0]
		    buffer_get_full_message(received_message, expected_message_size);  // Extract full message
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <receive_message+0xec>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f7ff ff6e 	bl	80013c4 <buffer_get_full_message>
		    HAL_UART_Transmit(&huart1, received_message, expected_message_size, 1000);  // Transmit message via UART
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <receive_message+0xec>)
 80014ea:	881a      	ldrh	r2, [r3, #0]
 80014ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f0:	6839      	ldr	r1, [r7, #0]
 80014f2:	4816      	ldr	r0, [pc, #88]	; (800154c <receive_message+0xf0>)
 80014f4:	f003 f9ce 	bl	8004894 <HAL_UART_Transmit>

		    PrivKey_st.mExponentSize = sizeof(PrivateExponent);
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <receive_message+0xf4>)
 80014fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fe:	60da      	str	r2, [r3, #12]
		          PrivKey_st.mModulusSize = sizeof(Modulus);
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <receive_message+0xf4>)
 8001502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001506:	605a      	str	r2, [r3, #4]
		          PrivKey_st.pmExponent = (uint8_t *) PrivateExponent;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <receive_message+0xf4>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <receive_message+0xf8>)
 800150c:	609a      	str	r2, [r3, #8]
		          PrivKey_st.pmModulus = (uint8_t *) Modulus;
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <receive_message+0xf4>)
 8001510:	4a11      	ldr	r2, [pc, #68]	; (8001558 <receive_message+0xfc>)
 8001512:	601a      	str	r2, [r3, #0]
		          status = RSA_Decrypt(&PrivKey_st, received_message, output, &outputSize);
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <receive_message+0x100>)
 8001516:	4a12      	ldr	r2, [pc, #72]	; (8001560 <receive_message+0x104>)
 8001518:	6839      	ldr	r1, [r7, #0]
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <receive_message+0xf4>)
 800151c:	f7ff fef4 	bl	8001308 <RSA_Decrypt>
 8001520:	4603      	mov	r3, r0
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <receive_message+0x108>)
 8001524:	6013      	str	r3, [r2, #0]

		     flush_rx_buffer();
 8001526:	f7ff ff83 	bl	8001430 <flush_rx_buffer>
 800152a:	46b5      	mov	sp, r6
		     }

		     HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate reception
 800152c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <receive_message+0x10c>)
 8001532:	f000 fd7f 	bl	8002034 <HAL_GPIO_TogglePin>
		}
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001540:	200016b8 	.word	0x200016b8
 8001544:	200016b4 	.word	0x200016b4
 8001548:	20000004 	.word	0x20000004
 800154c:	20000168 	.word	0x20000168
 8001550:	200011b8 	.word	0x200011b8
 8001554:	08006588 	.word	0x08006588
 8001558:	08006488 	.word	0x08006488
 800155c:	200012c8 	.word	0x200012c8
 8001560:	200011c8 	.word	0x200011c8
 8001564:	20000000 	.word	0x20000000
 8001568:	40020800 	.word	0x40020800

0800156c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x48>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_MspInit+0x48>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_MspInit+0x48>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_MspInit+0x48>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_MspInit+0x48>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_MspInit+0x48>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_CRC_MspInit+0x38>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10d      	bne.n	80015e6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_CRC_MspInit+0x3c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_CRC_MspInit+0x3c>)
 80015d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_CRC_MspInit+0x3c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	40023000 	.word	0x40023000
 80015f4:	40023800 	.word	0x40023800

080015f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_SPI_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12c      	bne.n	8001674 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_SPI_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_SPI_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001652:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001664:	2305      	movs	r3, #5
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_SPI_MspInit+0x8c>)
 8001670:	f000 fb46 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40003800 	.word	0x40003800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400

08001688 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_TIM_PWM_MspInit+0x38>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10d      	bne.n	80016b6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	40010000 	.word	0x40010000
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e8:	d116      	bne.n	8001718 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_TIM_Base_MspInit+0xcc>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a28      	ldr	r2, [pc, #160]	; (8001794 <HAL_TIM_Base_MspInit+0xcc>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <HAL_TIM_Base_MspInit+0xcc>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	201c      	movs	r0, #28
 800170c:	f000 faa5 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001710:	201c      	movs	r0, #28
 8001712:	f000 fabe 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001716:	e038      	b.n	800178a <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_TIM_Base_MspInit+0xd0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d133      	bne.n	800178a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_TIM_Base_MspInit+0xcc>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <HAL_TIM_Base_MspInit+0xcc>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_TIM_Base_MspInit+0xcc>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_TIM_Base_MspInit+0xcc>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a13      	ldr	r2, [pc, #76]	; (8001794 <HAL_TIM_Base_MspInit+0xcc>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_TIM_Base_MspInit+0xcc>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800175a:	2340      	movs	r3, #64	; 0x40
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800176a:	2302      	movs	r3, #2
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <HAL_TIM_Base_MspInit+0xd4>)
 8001776:	f000 fac3 	bl	8001d00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	201d      	movs	r0, #29
 8001780:	f000 fa6b 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001784:	201d      	movs	r0, #29
 8001786:	f000 fa84 	bl	8001c92 <HAL_NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	; 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40000400 	.word	0x40000400
 800179c:	40020000 	.word	0x40020000

080017a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <HAL_TIM_MspPostInit+0x68>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d11e      	bne.n	8001800 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_TIM_MspPostInit+0x6c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <HAL_TIM_MspPostInit+0x6c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_TIM_MspPostInit+0x6c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	4619      	mov	r1, r3
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_TIM_MspPostInit+0x70>)
 80017fc:	f000 fa80 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40010000 	.word	0x40010000
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000

08001814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_UART_MspInit+0x84>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d12c      	bne.n	8001890 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_UART_MspInit+0x88>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_UART_MspInit+0x88>)
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_UART_MspInit+0x88>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_UART_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_UART_MspInit+0x88>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_UART_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800186e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001880:	2307      	movs	r3, #7
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_UART_MspInit+0x8c>)
 800188c:	f000 fa38 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40011000 	.word	0x40011000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 f89f 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_NRF_Pin);
 80018f6:	2020      	movs	r0, #32
 80018f8:	f000 fbb6 	bl	8002068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIM2_IRQHandler+0x10>)
 8001906:	f001 fec5 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000d8 	.word	0x200000d8

08001914 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <TIM3_IRQHandler+0x10>)
 800191a:	f001 febb 	bl	8003694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000120 	.word	0x20000120

08001928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001950:	4c0b      	ldr	r4, [pc, #44]	; (8001980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800195e:	f7ff ffe3 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f004 fd55 	bl	8006410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7fe fdb9 	bl	80004dc <main>
  bx  lr    
 800196a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800196c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001978:	080066b0 	.word	0x080066b0
  ldr r2, =_sbss
 800197c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001980:	200016dc 	.word	0x200016dc

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>
	...

08001988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <HAL_Init+0x40>)
 8001992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_Init+0x40>)
 800199e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_Init+0x40>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 f947 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	200f      	movs	r0, #15
 80019b8:	f000 f808 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff fdd6 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x54>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x58>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f95f 	bl	8001cae <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f000 f927 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_InitTick+0x5c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000010 	.word	0x20000010
 8001a28:	2000000c 	.word	0x2000000c

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_IncTick+0x1c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x20>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <HAL_IncTick+0x20>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	20000010 	.word	0x20000010
 8001a4c:	200016d8 	.word	0x200016d8

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <HAL_GetTick+0x10>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	200016d8 	.word	0x200016d8

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fff0 	bl	8001a50 <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffe0 	bl	8001a50 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000010 	.word	0x20000010

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4906      	ldr	r1, [pc, #24]	; (8001b44 <__NVIC_EnableIRQ+0x34>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff90 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff2d 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6c:	f7ff ff42 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff ff90 	bl	8001b9c <NVIC_EncodePriority>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff5f 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff35 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffa2 	bl	8001c00 <SysTick_Config>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e00e      	b.n	8001cf6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	795b      	ldrb	r3, [r3, #5]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fc65 	bl	80015b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e159      	b.n	8001fd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8148 	bne.w	8001fca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d005      	beq.n	8001d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d130      	bne.n	8001db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 0201 	and.w	r2, r3, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d017      	beq.n	8001df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d123      	bne.n	8001e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	220f      	movs	r2, #15
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	69b9      	ldr	r1, [r7, #24]
 8001e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80a2 	beq.w	8001fca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <HAL_GPIO_Init+0x2e4>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <HAL_GPIO_Init+0x2e4>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_GPIO_Init+0x2e4>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea2:	4a51      	ldr	r2, [pc, #324]	; (8001fe8 <HAL_GPIO_Init+0x2e8>)
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a48      	ldr	r2, [pc, #288]	; (8001fec <HAL_GPIO_Init+0x2ec>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x202>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a47      	ldr	r2, [pc, #284]	; (8001ff0 <HAL_GPIO_Init+0x2f0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x1fe>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a46      	ldr	r2, [pc, #280]	; (8001ff4 <HAL_GPIO_Init+0x2f4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x1fa>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a45      	ldr	r2, [pc, #276]	; (8001ff8 <HAL_GPIO_Init+0x2f8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x1f6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a44      	ldr	r2, [pc, #272]	; (8001ffc <HAL_GPIO_Init+0x2fc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x1f2>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e008      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e004      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x204>
 8001f02:	2300      	movs	r3, #0
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f002 0203 	and.w	r2, r2, #3
 8001f0a:	0092      	lsls	r2, r2, #2
 8001f0c:	4093      	lsls	r3, r2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f14:	4934      	ldr	r1, [pc, #208]	; (8001fe8 <HAL_GPIO_Init+0x2e8>)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f46:	4a2e      	ldr	r2, [pc, #184]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f70:	4a23      	ldr	r2, [pc, #140]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9a:	4a19      	ldr	r2, [pc, #100]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc4:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	2b0f      	cmp	r3, #15
 8001fd4:	f67f aea2 	bls.w	8001d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	041a      	lsls	r2, r3, #16
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43d9      	mvns	r1, r3
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	400b      	ands	r3, r1
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	619a      	str	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
	...

08002068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f806 	bl	8002098 <HAL_GPIO_EXTI_Callback>
  }
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40013c00 	.word	0x40013c00

08002098 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e267      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d075      	beq.n	80021b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ca:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d00c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d6:	4b85      	ldr	r3, [pc, #532]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d112      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b82      	ldr	r3, [pc, #520]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ee:	d10b      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	4b7e      	ldr	r3, [pc, #504]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d05b      	beq.n	80021b4 <HAL_RCC_OscConfig+0x108>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d157      	bne.n	80021b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e242      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d106      	bne.n	8002120 <HAL_RCC_OscConfig+0x74>
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a75      	ldr	r2, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x98>
 800212a:	4b70      	ldr	r3, [pc, #448]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6f      	ldr	r2, [pc, #444]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6c      	ldr	r2, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002144:	4b69      	ldr	r3, [pc, #420]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a68      	ldr	r2, [pc, #416]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b66      	ldr	r3, [pc, #408]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a65      	ldr	r2, [pc, #404]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fc74 	bl	8001a50 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fc70 	bl	8001a50 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e207      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b5b      	ldr	r3, [pc, #364]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xc0>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff fc60 	bl	8001a50 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fc5c 	bl	8001a50 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1f3      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	4b51      	ldr	r3, [pc, #324]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0xe8>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d063      	beq.n	800228a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021c2:	4b4a      	ldr	r3, [pc, #296]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ce:	4b47      	ldr	r3, [pc, #284]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b44      	ldr	r3, [pc, #272]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	4b41      	ldr	r3, [pc, #260]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1c7      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4937      	ldr	r1, [pc, #220]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	e03a      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_OscConfig+0x244>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7ff fc15 	bl	8001a50 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff fc11 	bl	8001a50 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1a8      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4925      	ldr	r1, [pc, #148]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x244>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff fbf4 	bl	8001a50 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226c:	f7ff fbf0 	bl	8001a50 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e187      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d036      	beq.n	8002304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_RCC_OscConfig+0x248>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7ff fbd4 	bl	8001a50 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7ff fbd0 	bl	8001a50 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e167      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_OscConfig+0x240>)
 80022c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x200>
 80022ca:	e01b      	b.n	8002304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x248>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7ff fbbd 	bl	8001a50 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	e00e      	b.n	80022f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7ff fbb9 	bl	8001a50 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d907      	bls.n	80022f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e150      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
 80022ec:	40023800 	.word	0x40023800
 80022f0:	42470000 	.word	0x42470000
 80022f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ea      	bne.n	80022da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8097 	beq.w	8002440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b81      	ldr	r3, [pc, #516]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	4b7d      	ldr	r3, [pc, #500]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a7c      	ldr	r2, [pc, #496]	; (800251c <HAL_RCC_OscConfig+0x470>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b7a      	ldr	r3, [pc, #488]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b77      	ldr	r3, [pc, #476]	; (8002520 <HAL_RCC_OscConfig+0x474>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d118      	bne.n	8002380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4b74      	ldr	r3, [pc, #464]	; (8002520 <HAL_RCC_OscConfig+0x474>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a73      	ldr	r2, [pc, #460]	; (8002520 <HAL_RCC_OscConfig+0x474>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7ff fb79 	bl	8001a50 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002362:	f7ff fb75 	bl	8001a50 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e10c      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <HAL_RCC_OscConfig+0x474>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x2ea>
 8002388:	4b64      	ldr	r3, [pc, #400]	; (800251c <HAL_RCC_OscConfig+0x470>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a63      	ldr	r2, [pc, #396]	; (800251c <HAL_RCC_OscConfig+0x470>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
 8002394:	e01c      	b.n	80023d0 <HAL_RCC_OscConfig+0x324>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b05      	cmp	r3, #5
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x30c>
 800239e:	4b5f      	ldr	r3, [pc, #380]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a5e      	ldr	r2, [pc, #376]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
 80023aa:	4b5c      	ldr	r3, [pc, #368]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a5b      	ldr	r2, [pc, #364]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0x324>
 80023b8:	4b58      	ldr	r3, [pc, #352]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a57      	ldr	r2, [pc, #348]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	4b55      	ldr	r3, [pc, #340]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a54      	ldr	r2, [pc, #336]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d015      	beq.n	8002404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7ff fb3a 	bl	8001a50 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7ff fb36 	bl	8001a50 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e0cb      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	4b49      	ldr	r3, [pc, #292]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ee      	beq.n	80023e0 <HAL_RCC_OscConfig+0x334>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7ff fb24 	bl	8001a50 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7ff fb20 	bl	8001a50 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0b5      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ee      	bne.n	800240c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002434:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	4a38      	ldr	r2, [pc, #224]	; (800251c <HAL_RCC_OscConfig+0x470>)
 800243a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a1 	beq.w	800258c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <HAL_RCC_OscConfig+0x470>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d05c      	beq.n	8002510 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d141      	bne.n	80024e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff faf4 	bl	8001a50 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff faf0 	bl	8001a50 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e087      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	019b      	lsls	r3, r3, #6
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	3b01      	subs	r3, #1
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	491b      	ldr	r1, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7ff fac9 	bl	8001a50 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7ff fac5 	bl	8001a50 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e05c      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_RCC_OscConfig+0x470>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x416>
 80024e0:	e054      	b.n	800258c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_OscConfig+0x478>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff fab2 	bl	8001a50 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7ff faae 	bl	8001a50 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e045      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCC_OscConfig+0x470>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x444>
 800250e:	e03d      	b.n	800258c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d107      	bne.n	8002528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e038      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000
 8002524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x4ec>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d028      	beq.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d121      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d11a      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002558:	4013      	ands	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800255e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002560:	4293      	cmp	r3, r2
 8002562:	d111      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	3b01      	subs	r3, #1
 8002572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d107      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800

0800259c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0cc      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d90c      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d044      	beq.n	80026bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d119      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d003      	beq.n	800265a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	2b03      	cmp	r3, #3
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e06f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e067      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4b37      	ldr	r3, [pc, #220]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4934      	ldr	r1, [pc, #208]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800268c:	f7ff f9e0 	bl	8001a50 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7ff f9dc 	bl	8001a50 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e04f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 020c 	and.w	r2, r3, #12
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1eb      	bne.n	8002694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d20c      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f942 	bl	80019cc <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00
 8002758:	40023800 	.word	0x40023800
 800275c:	08006688 	.word	0x08006688
 8002760:	20000008 	.word	0x20000008
 8002764:	2000000c 	.word	0x2000000c

08002768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800276c:	b090      	sub	sp, #64	; 0x40
 800276e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	; 0x34
 8002774:	2300      	movs	r3, #0
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002778:	2300      	movs	r3, #0
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	d00d      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x40>
 800278c:	2b08      	cmp	r3, #8
 800278e:	f200 80a2 	bhi.w	80028d6 <HAL_RCC_GetSysClockFreq+0x16e>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x34>
 8002796:	2b04      	cmp	r3, #4
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800279a:	e09c      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_GetSysClockFreq+0x184>)
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027a0:	e09c      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027a2:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027a6:	e099      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a8:	4b4f      	ldr	r3, [pc, #316]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b2:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d027      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	099b      	lsrs	r3, r3, #6
 80027c4:	2200      	movs	r2, #0
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	627a      	str	r2, [r7, #36]	; 0x24
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027d0:	2100      	movs	r1, #0
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027d4:	fb03 f201 	mul.w	r2, r3, r1
 80027d8:	2300      	movs	r3, #0
 80027da:	fb00 f303 	mul.w	r3, r0, r3
 80027de:	4413      	add	r3, r2
 80027e0:	4a43      	ldr	r2, [pc, #268]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027e2:	fba0 2102 	umull	r2, r1, r0, r2
 80027e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027e8:	62ba      	str	r2, [r7, #40]	; 0x28
 80027ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ec:	4413      	add	r3, r2
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f2:	2200      	movs	r2, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	61fa      	str	r2, [r7, #28]
 80027f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002800:	f7fd fcea 	bl	80001d8 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280c:	e055      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	2200      	movs	r2, #0
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	617a      	str	r2, [r7, #20]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002820:	f04f 0b00 	mov.w	fp, #0
 8002824:	4652      	mov	r2, sl
 8002826:	465b      	mov	r3, fp
 8002828:	f04f 0000 	mov.w	r0, #0
 800282c:	f04f 0100 	mov.w	r1, #0
 8002830:	0159      	lsls	r1, r3, #5
 8002832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002836:	0150      	lsls	r0, r2, #5
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	ebb2 080a 	subs.w	r8, r2, sl
 8002840:	eb63 090b 	sbc.w	r9, r3, fp
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002850:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002854:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002858:	ebb2 0408 	subs.w	r4, r2, r8
 800285c:	eb63 0509 	sbc.w	r5, r3, r9
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	00eb      	lsls	r3, r5, #3
 800286a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800286e:	00e2      	lsls	r2, r4, #3
 8002870:	4614      	mov	r4, r2
 8002872:	461d      	mov	r5, r3
 8002874:	eb14 030a 	adds.w	r3, r4, sl
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	eb45 030b 	adc.w	r3, r5, fp
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9d7 4500 	ldrd	r4, r5, [r7]
 800288c:	4629      	mov	r1, r5
 800288e:	028b      	lsls	r3, r1, #10
 8002890:	4620      	mov	r0, r4
 8002892:	4629      	mov	r1, r5
 8002894:	4604      	mov	r4, r0
 8002896:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800289a:	4601      	mov	r1, r0
 800289c:	028a      	lsls	r2, r1, #10
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	2200      	movs	r2, #0
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	60fa      	str	r2, [r7, #12]
 80028aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ae:	f7fd fc93 	bl	80001d8 <__aeabi_uldivmod>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4613      	mov	r3, r2
 80028b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	3301      	adds	r3, #1
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028d4:	e002      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetSysClockFreq+0x184>)
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3740      	adds	r7, #64	; 0x40
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	00f42400 	.word	0x00f42400
 80028f0:	017d7840 	.word	0x017d7840

080028f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f8:	4b02      	ldr	r3, [pc, #8]	; (8002904 <HAL_RCC_GetHCLKFreq+0x10>)
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	20000008 	.word	0x20000008

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800290c:	f7ff fff2 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0a9b      	lsrs	r3, r3, #10
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <HAL_RCC_GetPCLK1Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	08006698 	.word	0x08006698

08002930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002934:	f7ff ffde 	bl	80028f4 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	0b5b      	lsrs	r3, r3, #13
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	08006698 	.word	0x08006698

08002958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e07b      	b.n	8002a62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297a:	d009      	beq.n	8002990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
 8002982:	e005      	b.n	8002990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fe24 	bl	80015f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	ea42 0103 	orr.w	r1, r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0104 	and.w	r1, r3, #4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f003 0210 	and.w	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_SPI_Transmit+0x22>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e126      	b.n	8002cda <HAL_SPI_Transmit+0x270>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a94:	f7fe ffdc 	bl	8001a50 <HAL_GetTick>
 8002a98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d002      	beq.n	8002ab0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aae:	e10b      	b.n	8002cc8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_Transmit+0x52>
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac0:	e102      	b.n	8002cc8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b08:	d10f      	bne.n	8002b2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d007      	beq.n	8002b48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b50:	d14b      	bne.n	8002bea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_SPI_Transmit+0xf6>
 8002b5a:	8afb      	ldrh	r3, [r7, #22]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d13e      	bne.n	8002bde <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	881a      	ldrh	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	1c9a      	adds	r2, r3, #2
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b84:	e02b      	b.n	8002bde <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d112      	bne.n	8002bba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	881a      	ldrh	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	1c9a      	adds	r2, r3, #2
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bb8:	e011      	b.n	8002bde <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bba:	f7fe ff49 	bl	8001a50 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d803      	bhi.n	8002bd2 <HAL_SPI_Transmit+0x168>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d102      	bne.n	8002bd8 <HAL_SPI_Transmit+0x16e>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bdc:	e074      	b.n	8002cc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ce      	bne.n	8002b86 <HAL_SPI_Transmit+0x11c>
 8002be8:	e04c      	b.n	8002c84 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SPI_Transmit+0x18e>
 8002bf2:	8afb      	ldrh	r3, [r7, #22]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d140      	bne.n	8002c7a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	7812      	ldrb	r2, [r2, #0]
 8002c04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c1e:	e02c      	b.n	8002c7a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d113      	bne.n	8002c56 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	330c      	adds	r3, #12
 8002c38:	7812      	ldrb	r2, [r2, #0]
 8002c3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c54:	e011      	b.n	8002c7a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c56:	f7fe fefb 	bl	8001a50 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d803      	bhi.n	8002c6e <HAL_SPI_Transmit+0x204>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d102      	bne.n	8002c74 <HAL_SPI_Transmit+0x20a>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c78:	e026      	b.n	8002cc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1cd      	bne.n	8002c20 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	6839      	ldr	r1, [r7, #0]
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fbcb 	bl	8003424 <SPI_EndRxTxTransaction>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	e000      	b.n	8002cc8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002cc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b088      	sub	sp, #32
 8002ce6:	af02      	add	r7, sp, #8
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cfe:	d112      	bne.n	8002d26 <HAL_SPI_Receive+0x44>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10e      	bne.n	8002d26 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d10:	88fa      	ldrh	r2, [r7, #6]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	4613      	mov	r3, r2
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f8f1 	bl	8002f04 <HAL_SPI_TransmitReceive>
 8002d22:	4603      	mov	r3, r0
 8002d24:	e0ea      	b.n	8002efc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_SPI_Receive+0x52>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e0e3      	b.n	8002efc <HAL_SPI_Receive+0x21a>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d3c:	f7fe fe88 	bl	8001a50 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d002      	beq.n	8002d54 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d52:	e0ca      	b.n	8002eea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_SPI_Receive+0x7e>
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d64:	e0c1      	b.n	8002eea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	88fa      	ldrh	r2, [r7, #6]
 8002d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dac:	d10f      	bne.n	8002dce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d007      	beq.n	8002dec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d162      	bne.n	8002eba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002df4:	e02e      	b.n	8002e54 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d115      	bne.n	8002e30 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f103 020c 	add.w	r2, r3, #12
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e2e:	e011      	b.n	8002e54 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e30:	f7fe fe0e 	bl	8001a50 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d803      	bhi.n	8002e48 <HAL_SPI_Receive+0x166>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d102      	bne.n	8002e4e <HAL_SPI_Receive+0x16c>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e52:	e04a      	b.n	8002eea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1cb      	bne.n	8002df6 <HAL_SPI_Receive+0x114>
 8002e5e:	e031      	b.n	8002ec4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d113      	bne.n	8002e96 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e94:	e011      	b.n	8002eba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e96:	f7fe fddb 	bl	8001a50 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d803      	bhi.n	8002eae <HAL_SPI_Receive+0x1cc>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d102      	bne.n	8002eb4 <HAL_SPI_Receive+0x1d2>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002eb8:	e017      	b.n	8002eea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1cd      	bne.n	8002e60 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	6839      	ldr	r1, [r7, #0]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fa45 	bl	8003358 <SPI_EndRxTransaction>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	75fb      	strb	r3, [r7, #23]
 8002ee6:	e000      	b.n	8002eea <HAL_SPI_Receive+0x208>
  }

error :
 8002ee8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08c      	sub	sp, #48	; 0x30
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f12:	2301      	movs	r3, #1
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x26>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e18a      	b.n	8003240 <HAL_SPI_TransmitReceive+0x33c>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f32:	f7fe fd8d 	bl	8001a50 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d00f      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x70>
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f5a:	d107      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x68>
 8002f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d003      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f72:	e15b      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x82>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x82>
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d103      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f8c:	e14e      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d003      	beq.n	8002fa2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	887a      	ldrh	r2, [r7, #2]
 8002fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	887a      	ldrh	r2, [r7, #2]
 8002fca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d007      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d178      	bne.n	80030f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <HAL_SPI_TransmitReceive+0x10a>
 8003008:	8b7b      	ldrh	r3, [r7, #26]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d166      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	1c9a      	adds	r2, r3, #2
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003032:	e053      	b.n	80030dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d11b      	bne.n	800307a <HAL_SPI_TransmitReceive+0x176>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d016      	beq.n	800307a <HAL_SPI_TransmitReceive+0x176>
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d113      	bne.n	800307a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	881a      	ldrh	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	1c9a      	adds	r2, r3, #2
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d119      	bne.n	80030bc <HAL_SPI_TransmitReceive+0x1b8>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d014      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	b292      	uxth	r2, r2
 800309e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	1c9a      	adds	r2, r3, #2
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030b8:	2301      	movs	r3, #1
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030bc:	f7fe fcc8 	bl	8001a50 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d807      	bhi.n	80030dc <HAL_SPI_TransmitReceive+0x1d8>
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d003      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030da:	e0a7      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1a6      	bne.n	8003034 <HAL_SPI_TransmitReceive+0x130>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1a1      	bne.n	8003034 <HAL_SPI_TransmitReceive+0x130>
 80030f0:	e07c      	b.n	80031ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x1fc>
 80030fa:	8b7b      	ldrh	r3, [r7, #26]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d16b      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	7812      	ldrb	r2, [r2, #0]
 800310c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003126:	e057      	b.n	80031d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	d11c      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x26c>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <HAL_SPI_TransmitReceive+0x26c>
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d114      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b01      	cmp	r3, #1
 800317c:	d119      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x2ae>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d014      	beq.n	80031b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031ae:	2301      	movs	r3, #1
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031b2:	f7fe fc4d 	bl	8001a50 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031be:	429a      	cmp	r2, r3
 80031c0:	d803      	bhi.n	80031ca <HAL_SPI_TransmitReceive+0x2c6>
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d102      	bne.n	80031d0 <HAL_SPI_TransmitReceive+0x2cc>
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031d6:	e029      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1a2      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x224>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d19d      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f917 	bl	8003424 <SPI_EndRxTxTransaction>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d006      	beq.n	800320a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003208:	e010      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10b      	bne.n	800322a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	e000      	b.n	800322c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800322a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800323c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003240:	4618      	mov	r0, r3
 8003242:	3730      	adds	r7, #48	; 0x30
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003258:	f7fe fbfa 	bl	8001a50 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4413      	add	r3, r2
 8003266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003268:	f7fe fbf2 	bl	8001a50 <HAL_GetTick>
 800326c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	015b      	lsls	r3, r3, #5
 8003274:	0d1b      	lsrs	r3, r3, #20
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800327e:	e054      	b.n	800332a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d050      	beq.n	800332a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003288:	f7fe fbe2 	bl	8001a50 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	429a      	cmp	r2, r3
 8003296:	d902      	bls.n	800329e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d13d      	bne.n	800331a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b6:	d111      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c0:	d004      	beq.n	80032cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d107      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e4:	d10f      	bne.n	8003306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e017      	b.n	800334a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3b01      	subs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4013      	ands	r3, r2
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	429a      	cmp	r2, r3
 8003346:	d19b      	bne.n	8003280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000008 	.word	0x20000008

08003358 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800336c:	d111      	bne.n	8003392 <SPI_EndRxTransaction+0x3a>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003376:	d004      	beq.n	8003382 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003380:	d107      	bne.n	8003392 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003390:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800339a:	d12a      	bne.n	80033f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a4:	d012      	beq.n	80033cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff ff49 	bl	8003248 <SPI_WaitFlagStateUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d02d      	beq.n	8003418 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e026      	b.n	800341a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2200      	movs	r2, #0
 80033d4:	2101      	movs	r1, #1
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff ff36 	bl	8003248 <SPI_WaitFlagStateUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01a      	beq.n	8003418 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e013      	b.n	800341a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2200      	movs	r2, #0
 80033fa:	2101      	movs	r1, #1
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff ff23 	bl	8003248 <SPI_WaitFlagStateUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e000      	b.n	800341a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <SPI_EndRxTxTransaction+0x7c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <SPI_EndRxTxTransaction+0x80>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0d5b      	lsrs	r3, r3, #21
 800343c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003440:	fb02 f303 	mul.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344e:	d112      	bne.n	8003476 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff fef4 	bl	8003248 <SPI_WaitFlagStateUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e00f      	b.n	8003496 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3b01      	subs	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348c:	2b80      	cmp	r3, #128	; 0x80
 800348e:	d0f2      	beq.n	8003476 <SPI_EndRxTxTransaction+0x52>
 8003490:	e000      	b.n	8003494 <SPI_EndRxTxTransaction+0x70>
        break;
 8003492:	bf00      	nop
  }

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000008 	.word	0x20000008
 80034a4:	165e9f81 	.word	0x165e9f81

080034a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e041      	b.n	800353e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe f8fa 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 fc70 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e041      	b.n	80035dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7fe f88b 	bl	8001688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3304      	adds	r3, #4
 8003582:	4619      	mov	r1, r3
 8003584:	4610      	mov	r0, r2
 8003586:	f000 fc21 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e041      	b.n	800367a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f839 	bl	8003682 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f000 fbd2 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d122      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d11b      	bne.n	80036f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0202 	mvn.w	r2, #2
 80036c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fb5d 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 80036dc:	e005      	b.n	80036ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fb50 	bl	8003d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fb5f 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d122      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11b      	bne.n	8003744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0204 	mvn.w	r2, #4
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fb33 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 8003730:	e005      	b.n	800373e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fb26 	bl	8003d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fb35 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d122      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d11b      	bne.n	8003798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0208 	mvn.w	r2, #8
 8003768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fb09 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fafc 	bl	8003d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fb0b 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d122      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d11b      	bne.n	80037ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0210 	mvn.w	r2, #16
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2208      	movs	r2, #8
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fadf 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fad2 	bl	8003d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fae1 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0201 	mvn.w	r2, #1
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 faad 	bl	8003d72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 ffd2 	bl	80047e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d107      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 faa5 	bl	8003dba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b20      	cmp	r3, #32
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0220 	mvn.w	r2, #32
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 ff9d 	bl	80047d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80038be:	2302      	movs	r3, #2
 80038c0:	e088      	b.n	80039d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d11b      	bne.n	8003908 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	6819      	ldr	r1, [r3, #0]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f000 fd0c 	bl	80042fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 020c 	bic.w	r2, r2, #12
 80038f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6999      	ldr	r1, [r3, #24]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	619a      	str	r2, [r3, #24]
 8003906:	e060      	b.n	80039ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d11c      	bne.n	8003948 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f000 fd81 	bl	8004424 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699a      	ldr	r2, [r3, #24]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003930:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6999      	ldr	r1, [r3, #24]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	021a      	lsls	r2, r3, #8
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	619a      	str	r2, [r3, #24]
 8003946:	e040      	b.n	80039ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b08      	cmp	r3, #8
 800394c:	d11b      	bne.n	8003986 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f000 fdcc 	bl	80044fa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 020c 	bic.w	r2, r2, #12
 8003970:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69d9      	ldr	r1, [r3, #28]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	61da      	str	r2, [r3, #28]
 8003984:	e021      	b.n	80039ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	d11c      	bne.n	80039c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6819      	ldr	r1, [r3, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f000 fde8 	bl	8004570 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69d9      	ldr	r1, [r3, #28]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	61da      	str	r2, [r3, #28]
 80039c4:	e001      	b.n	80039ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0ae      	b.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	f200 809f 	bhi.w	8003b48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003b49 	.word	0x08003b49
 8003a18:	08003b49 	.word	0x08003b49
 8003a1c:	08003b49 	.word	0x08003b49
 8003a20:	08003a85 	.word	0x08003a85
 8003a24:	08003b49 	.word	0x08003b49
 8003a28:	08003b49 	.word	0x08003b49
 8003a2c:	08003b49 	.word	0x08003b49
 8003a30:	08003ac7 	.word	0x08003ac7
 8003a34:	08003b49 	.word	0x08003b49
 8003a38:	08003b49 	.word	0x08003b49
 8003a3c:	08003b49 	.word	0x08003b49
 8003a40:	08003b07 	.word	0x08003b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fa3c 	bl	8003ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0208 	orr.w	r2, r2, #8
 8003a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0204 	bic.w	r2, r2, #4
 8003a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6999      	ldr	r1, [r3, #24]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	619a      	str	r2, [r3, #24]
      break;
 8003a82:	e064      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fa82 	bl	8003f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	021a      	lsls	r2, r3, #8
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	619a      	str	r2, [r3, #24]
      break;
 8003ac4:	e043      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 facb 	bl	8004068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0208 	orr.w	r2, r2, #8
 8003ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0204 	bic.w	r2, r2, #4
 8003af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69d9      	ldr	r1, [r3, #28]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
      break;
 8003b04:	e023      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fb15 	bl	800413c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69d9      	ldr	r1, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	021a      	lsls	r2, r3, #8
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	61da      	str	r2, [r3, #28]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIM_ConfigClockSource+0x1c>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0b4      	b.n	8003ce6 <HAL_TIM_ConfigClockSource+0x186>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb4:	d03e      	beq.n	8003c34 <HAL_TIM_ConfigClockSource+0xd4>
 8003bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bba:	f200 8087 	bhi.w	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc2:	f000 8086 	beq.w	8003cd2 <HAL_TIM_ConfigClockSource+0x172>
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bca:	d87f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b70      	cmp	r3, #112	; 0x70
 8003bce:	d01a      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0xa6>
 8003bd0:	2b70      	cmp	r3, #112	; 0x70
 8003bd2:	d87b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b60      	cmp	r3, #96	; 0x60
 8003bd6:	d050      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x11a>
 8003bd8:	2b60      	cmp	r3, #96	; 0x60
 8003bda:	d877      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b50      	cmp	r3, #80	; 0x50
 8003bde:	d03c      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0xfa>
 8003be0:	2b50      	cmp	r3, #80	; 0x50
 8003be2:	d873      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d058      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x13a>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d86f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b30      	cmp	r3, #48	; 0x30
 8003bee:	d064      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	2b30      	cmp	r3, #48	; 0x30
 8003bf2:	d86b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d060      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d867      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05c      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d05a      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003c04:	e062      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f000 fd01 	bl	800461c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	609a      	str	r2, [r3, #8]
      break;
 8003c32:	e04f      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f000 fcea 	bl	800461c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c56:	609a      	str	r2, [r3, #8]
      break;
 8003c58:	e03c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f000 fbae 	bl	80043c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2150      	movs	r1, #80	; 0x50
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fcb8 	bl	80045e8 <TIM_ITRx_SetConfig>
      break;
 8003c78:	e02c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f000 fc08 	bl	800449c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2160      	movs	r1, #96	; 0x60
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fca8 	bl	80045e8 <TIM_ITRx_SetConfig>
      break;
 8003c98:	e01c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f000 fb8e 	bl	80043c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fc98 	bl	80045e8 <TIM_ITRx_SetConfig>
      break;
 8003cb8:	e00c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f000 fc8f 	bl	80045e8 <TIM_ITRx_SetConfig>
      break;
 8003cca:	e003      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd0:	e000      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e031      	b.n	8003d6a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003d16:	6839      	ldr	r1, [r7, #0]
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fa5d 	bl	80041d8 <TIM_SlaveTimer_SetConfig>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e018      	b.n	8003d6a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d46:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d56:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a33      	ldr	r2, [pc, #204]	; (8003eac <TIM_Base_SetConfig+0xe0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00f      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d00b      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a30      	ldr	r2, [pc, #192]	; (8003eb0 <TIM_Base_SetConfig+0xe4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d007      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <TIM_Base_SetConfig+0xe8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_Base_SetConfig+0x38>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a2e      	ldr	r2, [pc, #184]	; (8003eb8 <TIM_Base_SetConfig+0xec>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d108      	bne.n	8003e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a24      	ldr	r2, [pc, #144]	; (8003eac <TIM_Base_SetConfig+0xe0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01b      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e24:	d017      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a21      	ldr	r2, [pc, #132]	; (8003eb0 <TIM_Base_SetConfig+0xe4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a20      	ldr	r2, [pc, #128]	; (8003eb4 <TIM_Base_SetConfig+0xe8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00f      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1f      	ldr	r2, [pc, #124]	; (8003eb8 <TIM_Base_SetConfig+0xec>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00b      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <TIM_Base_SetConfig+0xf0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <TIM_Base_SetConfig+0xf4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d003      	beq.n	8003e56 <TIM_Base_SetConfig+0x8a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <TIM_Base_SetConfig+0xf8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d108      	bne.n	8003e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a07      	ldr	r2, [pc, #28]	; (8003eac <TIM_Base_SetConfig+0xe0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d103      	bne.n	8003e9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	615a      	str	r2, [r3, #20]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800

08003ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f023 0201 	bic.w	r2, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0303 	bic.w	r3, r3, #3
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f023 0302 	bic.w	r3, r3, #2
 8003f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <TIM_OC1_SetConfig+0xc8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10c      	bne.n	8003f3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f023 0308 	bic.w	r3, r3, #8
 8003f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f023 0304 	bic.w	r3, r3, #4
 8003f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <TIM_OC1_SetConfig+0xc8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d111      	bne.n	8003f6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	621a      	str	r2, [r3, #32]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40010000 	.word	0x40010000

08003f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f023 0210 	bic.w	r2, r3, #16
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f023 0320 	bic.w	r3, r3, #32
 8003fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <TIM_OC2_SetConfig+0xd0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d10d      	bne.n	8004010 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800400e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a14      	ldr	r2, [pc, #80]	; (8004064 <TIM_OC2_SetConfig+0xd0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d113      	bne.n	8004040 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800401e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	40010000 	.word	0x40010000

08004068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0303 	bic.w	r3, r3, #3
 800409e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <TIM_OC3_SetConfig+0xd0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10d      	bne.n	80040e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a14      	ldr	r2, [pc, #80]	; (8004138 <TIM_OC3_SetConfig+0xd0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d113      	bne.n	8004112 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	621a      	str	r2, [r3, #32]
}
 800412c:	bf00      	nop
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40010000 	.word	0x40010000

0800413c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	031b      	lsls	r3, r3, #12
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a0f      	ldr	r2, [pc, #60]	; (80041d4 <TIM_OC4_SetConfig+0x98>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d109      	bne.n	80041b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	019b      	lsls	r3, r3, #6
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	40010000 	.word	0x40010000

080041d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f023 0307 	bic.w	r3, r3, #7
 8004206:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b70      	cmp	r3, #112	; 0x70
 8004220:	d01a      	beq.n	8004258 <TIM_SlaveTimer_SetConfig+0x80>
 8004222:	2b70      	cmp	r3, #112	; 0x70
 8004224:	d860      	bhi.n	80042e8 <TIM_SlaveTimer_SetConfig+0x110>
 8004226:	2b60      	cmp	r3, #96	; 0x60
 8004228:	d054      	beq.n	80042d4 <TIM_SlaveTimer_SetConfig+0xfc>
 800422a:	2b60      	cmp	r3, #96	; 0x60
 800422c:	d85c      	bhi.n	80042e8 <TIM_SlaveTimer_SetConfig+0x110>
 800422e:	2b50      	cmp	r3, #80	; 0x50
 8004230:	d046      	beq.n	80042c0 <TIM_SlaveTimer_SetConfig+0xe8>
 8004232:	2b50      	cmp	r3, #80	; 0x50
 8004234:	d858      	bhi.n	80042e8 <TIM_SlaveTimer_SetConfig+0x110>
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d019      	beq.n	800426e <TIM_SlaveTimer_SetConfig+0x96>
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d854      	bhi.n	80042e8 <TIM_SlaveTimer_SetConfig+0x110>
 800423e:	2b30      	cmp	r3, #48	; 0x30
 8004240:	d055      	beq.n	80042ee <TIM_SlaveTimer_SetConfig+0x116>
 8004242:	2b30      	cmp	r3, #48	; 0x30
 8004244:	d850      	bhi.n	80042e8 <TIM_SlaveTimer_SetConfig+0x110>
 8004246:	2b20      	cmp	r3, #32
 8004248:	d051      	beq.n	80042ee <TIM_SlaveTimer_SetConfig+0x116>
 800424a:	2b20      	cmp	r3, #32
 800424c:	d84c      	bhi.n	80042e8 <TIM_SlaveTimer_SetConfig+0x110>
 800424e:	2b00      	cmp	r3, #0
 8004250:	d04d      	beq.n	80042ee <TIM_SlaveTimer_SetConfig+0x116>
 8004252:	2b10      	cmp	r3, #16
 8004254:	d04b      	beq.n	80042ee <TIM_SlaveTimer_SetConfig+0x116>
 8004256:	e047      	b.n	80042e8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68d9      	ldr	r1, [r3, #12]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f000 f9d8 	bl	800461c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800426c:	e040      	b.n	80042f0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b05      	cmp	r3, #5
 8004274:	d101      	bne.n	800427a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e03b      	b.n	80042f2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6a1a      	ldr	r2, [r3, #32]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	621a      	str	r2, [r3, #32]
      break;
 80042be:	e017      	b.n	80042f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6899      	ldr	r1, [r3, #8]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	461a      	mov	r2, r3
 80042ce:	f000 f87b 	bl	80043c8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80042d2:	e00d      	b.n	80042f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6899      	ldr	r1, [r3, #8]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	461a      	mov	r2, r3
 80042e2:	f000 f8db 	bl	800449c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80042e6:	e003      	b.n	80042f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	75fb      	strb	r3, [r7, #23]
      break;
 80042ec:	e000      	b.n	80042f0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80042ee:	bf00      	nop
  }

  return status;
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a23      	ldr	r2, [pc, #140]	; (80043b4 <TIM_TI1_SetConfig+0xb8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <TIM_TI1_SetConfig+0x56>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004330:	d00f      	beq.n	8004352 <TIM_TI1_SetConfig+0x56>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a20      	ldr	r2, [pc, #128]	; (80043b8 <TIM_TI1_SetConfig+0xbc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00b      	beq.n	8004352 <TIM_TI1_SetConfig+0x56>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a1f      	ldr	r2, [pc, #124]	; (80043bc <TIM_TI1_SetConfig+0xc0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d007      	beq.n	8004352 <TIM_TI1_SetConfig+0x56>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <TIM_TI1_SetConfig+0xc4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_TI1_SetConfig+0x56>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <TIM_TI1_SetConfig+0xc8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d101      	bne.n	8004356 <TIM_TI1_SetConfig+0x5a>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <TIM_TI1_SetConfig+0x5c>
 8004356:	2300      	movs	r3, #0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e003      	b.n	8004376 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800437c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	b2db      	uxtb	r3, r3
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f023 030a 	bic.w	r3, r3, #10
 8004390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f003 030a 	and.w	r3, r3, #10
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800
 80043c0:	40000c00 	.word	0x40000c00
 80043c4:	40014000 	.word	0x40014000

080043c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f023 0201 	bic.w	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f023 030a 	bic.w	r3, r3, #10
 8004404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	f023 0210 	bic.w	r2, r3, #16
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004462:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	031b      	lsls	r3, r3, #12
 8004468:	b29b      	uxth	r3, r3
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004476:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f023 0210 	bic.w	r2, r3, #16
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	031b      	lsls	r3, r3, #12
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr

080044fa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b087      	sub	sp, #28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004536:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	b2db      	uxtb	r3, r3
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800454a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr

08004570 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	031b      	lsls	r3, r3, #12
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80045c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	031b      	lsls	r3, r3, #12
 80045c8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	f043 0307 	orr.w	r3, r3, #7
 800460a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	609a      	str	r2, [r3, #8]
}
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr

0800461c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	431a      	orrs	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
	...

0800465c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e050      	b.n	8004716 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d018      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d013      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a17      	ldr	r2, [pc, #92]	; (8004724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a15      	ldr	r2, [pc, #84]	; (8004728 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a14      	ldr	r2, [pc, #80]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a12      	ldr	r2, [pc, #72]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d10c      	bne.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	40010000 	.word	0x40010000
 8004724:	40000400 	.word	0x40000400
 8004728:	40000800 	.word	0x40000800
 800472c:	40000c00 	.word	0x40000c00
 8004730:	40014000 	.word	0x40014000

08004734 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800474c:	2302      	movs	r3, #2
 800474e:	e03d      	b.n	80047cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e03f      	b.n	800488c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7fc fff7 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2224      	movs	r2, #36	; 0x24
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800483c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f928 	bl	8004a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004852:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004862:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004872:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	; 0x28
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d17c      	bne.n	80049ae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_UART_Transmit+0x2c>
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e075      	b.n	80049b0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_UART_Transmit+0x3e>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e06e      	b.n	80049b0 <HAL_UART_Transmit+0x11c>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2221      	movs	r2, #33	; 0x21
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048e8:	f7fd f8b2 	bl	8001a50 <HAL_GetTick>
 80048ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	88fa      	ldrh	r2, [r7, #6]
 80048f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004902:	d108      	bne.n	8004916 <HAL_UART_Transmit+0x82>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d104      	bne.n	8004916 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800490c:	2300      	movs	r3, #0
 800490e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	e003      	b.n	800491e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004926:	e02a      	b.n	800497e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2200      	movs	r2, #0
 8004930:	2180      	movs	r1, #128	; 0x80
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f840 	bl	80049b8 <UART_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e036      	b.n	80049b0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004956:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	3302      	adds	r3, #2
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e007      	b.n	8004970 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3301      	adds	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1cf      	bne.n	8004928 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2200      	movs	r2, #0
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f810 	bl	80049b8 <UART_WaitOnFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e006      	b.n	80049b0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e000      	b.n	80049b0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049ae:	2302      	movs	r3, #2
  }
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b090      	sub	sp, #64	; 0x40
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	4613      	mov	r3, r2
 80049c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c8:	e050      	b.n	8004a6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d04c      	beq.n	8004a6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049d8:	f7fd f83a 	bl	8001a50 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d241      	bcs.n	8004a6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a08:	637a      	str	r2, [r7, #52]	; 0x34
 8004a0a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e5      	bne.n	80049e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3314      	adds	r3, #20
 8004a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3314      	adds	r3, #20
 8004a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a3c:	623a      	str	r2, [r7, #32]
 8004a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a40:	69f9      	ldr	r1, [r7, #28]
 8004a42:	6a3a      	ldr	r2, [r7, #32]
 8004a44:	e841 2300 	strex	r3, r2, [r1]
 8004a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e5      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e00f      	b.n	8004a8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4013      	ands	r3, r2
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d09f      	beq.n	80049ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3740      	adds	r7, #64	; 0x40
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a98:	b0c0      	sub	sp, #256	; 0x100
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	68d9      	ldr	r1, [r3, #12]
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	ea40 0301 	orr.w	r3, r0, r1
 8004abc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004aec:	f021 010c 	bic.w	r1, r1, #12
 8004af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004afa:	430b      	orrs	r3, r1
 8004afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0e:	6999      	ldr	r1, [r3, #24]
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	ea40 0301 	orr.w	r3, r0, r1
 8004b1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b91      	ldr	r3, [pc, #580]	; (8004d68 <UART_SetConfig+0x2d4>)
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d005      	beq.n	8004b34 <UART_SetConfig+0xa0>
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b8f      	ldr	r3, [pc, #572]	; (8004d6c <UART_SetConfig+0x2d8>)
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d104      	bne.n	8004b3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b34:	f7fd fefc 	bl	8002930 <HAL_RCC_GetPCLK2Freq>
 8004b38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b3c:	e003      	b.n	8004b46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b3e:	f7fd fee3 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8004b42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b50:	f040 8110 	bne.w	8004d74 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b66:	4622      	mov	r2, r4
 8004b68:	462b      	mov	r3, r5
 8004b6a:	1891      	adds	r1, r2, r2
 8004b6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b6e:	415b      	adcs	r3, r3
 8004b70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b76:	4620      	mov	r0, r4
 8004b78:	4629      	mov	r1, r5
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	eb12 0804 	adds.w	r8, r2, r4
 8004b80:	460c      	mov	r4, r1
 8004b82:	eb43 0904 	adc.w	r9, r3, r4
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b9a:	4690      	mov	r8, r2
 8004b9c:	4699      	mov	r9, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	eb18 0303 	adds.w	r3, r8, r3
 8004ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	eb49 0303 	adc.w	r3, r9, r3
 8004bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	18db      	adds	r3, r3, r3
 8004bca:	653b      	str	r3, [r7, #80]	; 0x50
 8004bcc:	4613      	mov	r3, r2
 8004bce:	eb42 0303 	adc.w	r3, r2, r3
 8004bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8004bd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bdc:	f7fb fafc 	bl	80001d8 <__aeabi_uldivmod>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4b62      	ldr	r3, [pc, #392]	; (8004d70 <UART_SetConfig+0x2dc>)
 8004be6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	011c      	lsls	r4, r3, #4
 8004bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004bfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c00:	4642      	mov	r2, r8
 8004c02:	464b      	mov	r3, r9
 8004c04:	1891      	adds	r1, r2, r2
 8004c06:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c08:	415b      	adcs	r3, r3
 8004c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c10:	4645      	mov	r5, r8
 8004c12:	eb12 0a05 	adds.w	sl, r2, r5
 8004c16:	4640      	mov	r0, r8
 8004c18:	4649      	mov	r1, r9
 8004c1a:	460d      	mov	r5, r1
 8004c1c:	eb43 0b05 	adc.w	fp, r3, r5
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c34:	4692      	mov	sl, r2
 8004c36:	469b      	mov	fp, r3
 8004c38:	4603      	mov	r3, r0
 8004c3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c42:	460b      	mov	r3, r1
 8004c44:	eb4b 0303 	adc.w	r3, fp, r3
 8004c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c60:	460b      	mov	r3, r1
 8004c62:	18db      	adds	r3, r3, r3
 8004c64:	643b      	str	r3, [r7, #64]	; 0x40
 8004c66:	4613      	mov	r3, r2
 8004c68:	eb42 0303 	adc.w	r3, r2, r3
 8004c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c76:	f7fb faaf 	bl	80001d8 <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <UART_SetConfig+0x2dc>)
 8004c82:	fba3 2301 	umull	r2, r3, r3, r1
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	2264      	movs	r2, #100	; 0x64
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	1acb      	subs	r3, r1, r3
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c96:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <UART_SetConfig+0x2dc>)
 8004c98:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca4:	441c      	add	r4, r3
 8004ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	1891      	adds	r1, r2, r2
 8004cbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cc0:	415b      	adcs	r3, r3
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cc8:	4641      	mov	r1, r8
 8004cca:	1851      	adds	r1, r2, r1
 8004ccc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cce:	4649      	mov	r1, r9
 8004cd0:	414b      	adcs	r3, r1
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ce0:	4659      	mov	r1, fp
 8004ce2:	00cb      	lsls	r3, r1, #3
 8004ce4:	4655      	mov	r5, sl
 8004ce6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004cea:	4651      	mov	r1, sl
 8004cec:	00ca      	lsls	r2, r1, #3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	460a      	mov	r2, r1
 8004d00:	eb42 0303 	adc.w	r3, r2, r3
 8004d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	18db      	adds	r3, r3, r3
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d22:	4613      	mov	r3, r2
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d32:	f7fb fa51 	bl	80001d8 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <UART_SetConfig+0x2dc>)
 8004d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	2164      	movs	r1, #100	; 0x64
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	3332      	adds	r3, #50	; 0x32
 8004d4e:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <UART_SetConfig+0x2dc>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	f003 0207 	and.w	r2, r3, #7
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4422      	add	r2, r4
 8004d62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d64:	e109      	b.n	8004f7a <UART_SetConfig+0x4e6>
 8004d66:	bf00      	nop
 8004d68:	40011000 	.word	0x40011000
 8004d6c:	40011400 	.word	0x40011400
 8004d70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d86:	4642      	mov	r2, r8
 8004d88:	464b      	mov	r3, r9
 8004d8a:	1891      	adds	r1, r2, r2
 8004d8c:	6239      	str	r1, [r7, #32]
 8004d8e:	415b      	adcs	r3, r3
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
 8004d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d96:	4641      	mov	r1, r8
 8004d98:	1854      	adds	r4, r2, r1
 8004d9a:	46cc      	mov	ip, r9
 8004d9c:	eb43 050c 	adc.w	r5, r3, ip
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	00eb      	lsls	r3, r5, #3
 8004daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dae:	00e2      	lsls	r2, r4, #3
 8004db0:	4614      	mov	r4, r2
 8004db2:	461d      	mov	r5, r3
 8004db4:	4640      	mov	r0, r8
 8004db6:	4649      	mov	r1, r9
 8004db8:	4603      	mov	r3, r0
 8004dba:	18e3      	adds	r3, r4, r3
 8004dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	eb45 0303 	adc.w	r3, r5, r3
 8004dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004de6:	4629      	mov	r1, r5
 8004de8:	008b      	lsls	r3, r1, #2
 8004dea:	4620      	mov	r0, r4
 8004dec:	4629      	mov	r1, r5
 8004dee:	4604      	mov	r4, r0
 8004df0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004df4:	4601      	mov	r1, r0
 8004df6:	008a      	lsls	r2, r1, #2
 8004df8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004dfc:	f7fb f9ec 	bl	80001d8 <__aeabi_uldivmod>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4b60      	ldr	r3, [pc, #384]	; (8004f88 <UART_SetConfig+0x4f4>)
 8004e06:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	011c      	lsls	r4, r3, #4
 8004e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	1891      	adds	r1, r2, r2
 8004e26:	61b9      	str	r1, [r7, #24]
 8004e28:	415b      	adcs	r3, r3
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e30:	4641      	mov	r1, r8
 8004e32:	1851      	adds	r1, r2, r1
 8004e34:	6139      	str	r1, [r7, #16]
 8004e36:	4649      	mov	r1, r9
 8004e38:	414b      	adcs	r3, r1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e48:	4659      	mov	r1, fp
 8004e4a:	00cb      	lsls	r3, r1, #3
 8004e4c:	4655      	mov	r5, sl
 8004e4e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004e52:	4651      	mov	r1, sl
 8004e54:	00ca      	lsls	r2, r1, #3
 8004e56:	4610      	mov	r0, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	189b      	adds	r3, r3, r2
 8004e60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e64:	464b      	mov	r3, r9
 8004e66:	460a      	mov	r2, r1
 8004e68:	eb42 0303 	adc.w	r3, r2, r3
 8004e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e88:	4649      	mov	r1, r9
 8004e8a:	008b      	lsls	r3, r1, #2
 8004e8c:	4645      	mov	r5, r8
 8004e8e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8004e92:	4641      	mov	r1, r8
 8004e94:	008a      	lsls	r2, r1, #2
 8004e96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e9a:	f7fb f99d 	bl	80001d8 <__aeabi_uldivmod>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4b39      	ldr	r3, [pc, #228]	; (8004f88 <UART_SetConfig+0x4f4>)
 8004ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	2164      	movs	r1, #100	; 0x64
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	3332      	adds	r3, #50	; 0x32
 8004eb6:	4a34      	ldr	r2, [pc, #208]	; (8004f88 <UART_SetConfig+0x4f4>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec2:	441c      	add	r4, r3
 8004ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec8:	2200      	movs	r2, #0
 8004eca:	673b      	str	r3, [r7, #112]	; 0x70
 8004ecc:	677a      	str	r2, [r7, #116]	; 0x74
 8004ece:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ed2:	4642      	mov	r2, r8
 8004ed4:	464b      	mov	r3, r9
 8004ed6:	1891      	adds	r1, r2, r2
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	415b      	adcs	r3, r3
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	1851      	adds	r1, r2, r1
 8004ee6:	6039      	str	r1, [r7, #0]
 8004ee8:	4649      	mov	r1, r9
 8004eea:	414b      	adcs	r3, r1
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004efa:	4659      	mov	r1, fp
 8004efc:	00cb      	lsls	r3, r1, #3
 8004efe:	4655      	mov	r5, sl
 8004f00:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004f04:	4651      	mov	r1, sl
 8004f06:	00ca      	lsls	r2, r1, #3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4642      	mov	r2, r8
 8004f10:	189b      	adds	r3, r3, r2
 8004f12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f14:	464b      	mov	r3, r9
 8004f16:	460a      	mov	r2, r1
 8004f18:	eb42 0303 	adc.w	r3, r2, r3
 8004f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	663b      	str	r3, [r7, #96]	; 0x60
 8004f28:	667a      	str	r2, [r7, #100]	; 0x64
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f36:	4649      	mov	r1, r9
 8004f38:	008b      	lsls	r3, r1, #2
 8004f3a:	4645      	mov	r5, r8
 8004f3c:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8004f40:	4641      	mov	r1, r8
 8004f42:	008a      	lsls	r2, r1, #2
 8004f44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f48:	f7fb f946 	bl	80001d8 <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <UART_SetConfig+0x4f4>)
 8004f52:	fba3 1302 	umull	r1, r3, r3, r2
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	2164      	movs	r1, #100	; 0x64
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	3332      	adds	r3, #50	; 0x32
 8004f64:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <UART_SetConfig+0x4f4>)
 8004f66:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	f003 020f 	and.w	r2, r3, #15
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4422      	add	r2, r4
 8004f78:	609a      	str	r2, [r3, #8]
}
 8004f7a:	bf00      	nop
 8004f7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f86:	bf00      	nop
 8004f88:	51eb851f 	.word	0x51eb851f

08004f8c <StAllocBig>:
 8004f8c:	88d3      	ldrh	r3, [r2, #6]
 8004f8e:	b4f0      	push	{r4, r5, r6, r7}
 8004f90:	1c4c      	adds	r4, r1, #1
 8004f92:	8896      	ldrh	r6, [r2, #4]
 8004f94:	f103 0508 	add.w	r5, r3, #8
 8004f98:	00a4      	lsls	r4, r4, #2
 8004f9a:	1967      	adds	r7, r4, r5
 8004f9c:	42b7      	cmp	r7, r6
 8004f9e:	d903      	bls.n	8004fa8 <StAllocBig+0x1c>
 8004fa0:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8004fa4:	bcf0      	pop	{r4, r5, r6, r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	6816      	ldr	r6, [r2, #0]
 8004faa:	18f7      	adds	r7, r6, r3
 8004fac:	6007      	str	r7, [r0, #0]
 8004fae:	6817      	ldr	r7, [r2, #0]
 8004fb0:	443d      	add	r5, r7
 8004fb2:	50f5      	str	r5, [r6, r3]
 8004fb4:	6803      	ldr	r3, [r0, #0]
 8004fb6:	7199      	strb	r1, [r3, #6]
 8004fb8:	88d3      	ldrh	r3, [r2, #6]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	441c      	add	r4, r3
 8004fbe:	80d4      	strh	r4, [r2, #6]
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	bcf0      	pop	{r4, r5, r6, r7}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop

08004fc8 <StFreeBig>:
 8004fc8:	6803      	ldr	r3, [r0, #0]
 8004fca:	b14b      	cbz	r3, 8004fe0 <StFreeBig+0x18>
 8004fcc:	b141      	cbz	r1, 8004fe0 <StFreeBig+0x18>
 8004fce:	799a      	ldrb	r2, [r3, #6]
 8004fd0:	88cb      	ldrh	r3, [r1, #6]
 8004fd2:	43d2      	mvns	r2, r2
 8004fd4:	3b08      	subs	r3, #8
 8004fd6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004fda:	2300      	movs	r3, #0
 8004fdc:	80ca      	strh	r2, [r1, #6]
 8004fde:	6003      	str	r3, [r0, #0]
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop

08004fe4 <InitBig>:
 8004fe4:	7983      	ldrb	r3, [r0, #6]
 8004fe6:	b470      	push	{r4, r5, r6}
 8004fe8:	b1b3      	cbz	r3, 8005018 <InitBig+0x34>
 8004fea:	2201      	movs	r2, #1
 8004fec:	6805      	ldr	r5, [r0, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	2600      	movs	r6, #0
 8004ff2:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
 8004ff6:	7984      	ldrb	r4, [r0, #6]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3401      	adds	r4, #1
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	461a      	mov	r2, r3
 8005002:	d3f6      	bcc.n	8004ff2 <InitBig+0xe>
 8005004:	2301      	movs	r3, #1
 8005006:	2900      	cmp	r1, #0
 8005008:	8083      	strh	r3, [r0, #4]
 800500a:	bfb4      	ite	lt
 800500c:	4249      	neglt	r1, r1
 800500e:	2300      	movge	r3, #0
 8005010:	71c3      	strb	r3, [r0, #7]
 8005012:	6029      	str	r1, [r5, #0]
 8005014:	bc70      	pop	{r4, r5, r6}
 8005016:	4770      	bx	lr
 8005018:	6805      	ldr	r5, [r0, #0]
 800501a:	e7f3      	b.n	8005004 <InitBig+0x20>

0800501c <CopyBig>:
 800501c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8005020:	798b      	ldrb	r3, [r1, #6]
 8005022:	8884      	ldrh	r4, [r0, #4]
 8005024:	429c      	cmp	r4, r3
 8005026:	d907      	bls.n	8005038 <CopyBig+0x1c>
 8005028:	3301      	adds	r3, #1
 800502a:	42a3      	cmp	r3, r4
 800502c:	d227      	bcs.n	800507e <CopyBig+0x62>
 800502e:	f241 40b5 	movw	r0, #5301	; 0x14b5
 8005032:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005036:	4770      	bx	lr
 8005038:	f04f 0800 	mov.w	r8, #0
 800503c:	79c3      	ldrb	r3, [r0, #7]
 800503e:	71cb      	strb	r3, [r1, #7]
 8005040:	808c      	strh	r4, [r1, #4]
 8005042:	4622      	mov	r2, r4
 8005044:	b1f4      	cbz	r4, 8005084 <CopyBig+0x68>
 8005046:	6807      	ldr	r7, [r0, #0]
 8005048:	680d      	ldr	r5, [r1, #0]
 800504a:	00a6      	lsls	r6, r4, #2
 800504c:	2300      	movs	r3, #0
 800504e:	58f8      	ldr	r0, [r7, r3]
 8005050:	50e8      	str	r0, [r5, r3]
 8005052:	3304      	adds	r3, #4
 8005054:	42b3      	cmp	r3, r6
 8005056:	d1fa      	bne.n	800504e <CopyBig+0x32>
 8005058:	798b      	ldrb	r3, [r1, #6]
 800505a:	42a3      	cmp	r3, r4
 800505c:	db0b      	blt.n	8005076 <CopyBig+0x5a>
 800505e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8005062:	3b01      	subs	r3, #1
 8005064:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005068:	2500      	movs	r5, #0
 800506a:	f843 5f04 	str.w	r5, [r3, #4]!
 800506e:	798c      	ldrb	r4, [r1, #6]
 8005070:	3201      	adds	r2, #1
 8005072:	4294      	cmp	r4, r2
 8005074:	daf9      	bge.n	800506a <CopyBig+0x4e>
 8005076:	4640      	mov	r0, r8
 8005078:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800507c:	4770      	bx	lr
 800507e:	f241 48b5 	movw	r8, #5301	; 0x14b5
 8005082:	e7db      	b.n	800503c <CopyBig+0x20>
 8005084:	680d      	ldr	r5, [r1, #0]
 8005086:	e7ea      	b.n	800505e <CopyBig+0x42>

08005088 <Add_Moduli_Big>:
 8005088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	7983      	ldrb	r3, [r0, #6]
 800508e:	8884      	ldrh	r4, [r0, #4]
 8005090:	888f      	ldrh	r7, [r1, #4]
 8005092:	6805      	ldr	r5, [r0, #0]
 8005094:	680e      	ldr	r6, [r1, #0]
 8005096:	4692      	mov	sl, r2
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	42a7      	cmp	r7, r4
 800509c:	bf34      	ite	cc
 800509e:	46bb      	movcc	fp, r7
 80050a0:	46a3      	movcs	fp, r4
 80050a2:	4294      	cmp	r4, r2
 80050a4:	4623      	mov	r3, r4
 80050a6:	f8da 8000 	ldr.w	r8, [sl]
 80050aa:	d20f      	bcs.n	80050cc <Add_Moduli_Big+0x44>
 80050ac:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80050b0:	3a01      	subs	r2, #1
 80050b2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80050b6:	f04f 0c00 	mov.w	ip, #0
 80050ba:	f842 cf04 	str.w	ip, [r2, #4]!
 80050be:	f890 e006 	ldrb.w	lr, [r0, #6]
 80050c2:	3301      	adds	r3, #1
 80050c4:	f10e 0e01 	add.w	lr, lr, #1
 80050c8:	459e      	cmp	lr, r3
 80050ca:	d8f6      	bhi.n	80050ba <Add_Moduli_Big+0x32>
 80050cc:	798a      	ldrb	r2, [r1, #6]
 80050ce:	3201      	adds	r2, #1
 80050d0:	4297      	cmp	r7, r2
 80050d2:	463b      	mov	r3, r7
 80050d4:	d20f      	bcs.n	80050f6 <Add_Moduli_Big+0x6e>
 80050d6:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80050da:	3a01      	subs	r2, #1
 80050dc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80050e0:	f04f 0c00 	mov.w	ip, #0
 80050e4:	f842 cf04 	str.w	ip, [r2, #4]!
 80050e8:	f891 e006 	ldrb.w	lr, [r1, #6]
 80050ec:	3301      	adds	r3, #1
 80050ee:	f10e 0e01 	add.w	lr, lr, #1
 80050f2:	459e      	cmp	lr, r3
 80050f4:	d8f6      	bhi.n	80050e4 <Add_Moduli_Big+0x5c>
 80050f6:	42bc      	cmp	r4, r7
 80050f8:	d200      	bcs.n	80050fc <Add_Moduli_Big+0x74>
 80050fa:	4608      	mov	r0, r1
 80050fc:	4651      	mov	r1, sl
 80050fe:	f7ff ff8d 	bl	800501c <CopyBig>
 8005102:	46dc      	mov	ip, fp
 8005104:	f1bb 0f00 	cmp.w	fp, #0
 8005108:	d030      	beq.n	800516c <Add_Moduli_Big+0xe4>
 800510a:	ea4f 098b 	mov.w	r9, fp, lsl #2
 800510e:	2700      	movs	r7, #0
 8005110:	2200      	movs	r2, #0
 8005112:	2300      	movs	r3, #0
 8005114:	59e8      	ldr	r0, [r5, r7]
 8005116:	59f4      	ldr	r4, [r6, r7]
 8005118:	2100      	movs	r1, #0
 800511a:	1900      	adds	r0, r0, r4
 800511c:	f141 0100 	adc.w	r1, r1, #0
 8005120:	1880      	adds	r0, r0, r2
 8005122:	f848 0007 	str.w	r0, [r8, r7]
 8005126:	f107 0704 	add.w	r7, r7, #4
 800512a:	eb41 0103 	adc.w	r1, r1, r3
 800512e:	454f      	cmp	r7, r9
 8005130:	460a      	mov	r2, r1
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	d1ed      	bne.n	8005114 <Add_Moduli_Big+0x8c>
 8005138:	ea52 0103 	orrs.w	r1, r2, r3
 800513c:	d016      	beq.n	800516c <Add_Moduli_Big+0xe4>
 800513e:	f858 3007 	ldr.w	r3, [r8, r7]
 8005142:	3301      	adds	r3, #1
 8005144:	f848 3007 	str.w	r3, [r8, r7]
 8005148:	4447      	add	r7, r8
 800514a:	b97b      	cbnz	r3, 800516c <Add_Moduli_Big+0xe4>
 800514c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8005150:	455a      	cmp	r2, fp
 8005152:	d202      	bcs.n	800515a <Add_Moduli_Big+0xd2>
 8005154:	e00c      	b.n	8005170 <Add_Moduli_Big+0xe8>
 8005156:	4594      	cmp	ip, r2
 8005158:	d80a      	bhi.n	8005170 <Add_Moduli_Big+0xe8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3301      	adds	r3, #1
 800515e:	f10c 0c01 	add.w	ip, ip, #1
 8005162:	f847 3f04 	str.w	r3, [r7, #4]!
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f5      	beq.n	8005156 <Add_Moduli_Big+0xce>
 800516a:	e001      	b.n	8005170 <Add_Moduli_Big+0xe8>
 800516c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8005170:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8005174:	b113      	cbz	r3, 800517c <Add_Moduli_Big+0xf4>
 8005176:	3201      	adds	r2, #1
 8005178:	f8aa 2004 	strh.w	r2, [sl, #4]
 800517c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005180 <IsZeroBig>:
 8005180:	8883      	ldrh	r3, [r0, #4]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d001      	beq.n	800518a <IsZeroBig+0xa>
 8005186:	2000      	movs	r0, #0
 8005188:	4770      	bx	lr
 800518a:	6803      	ldr	r3, [r0, #0]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	f1d0 0001 	rsbs	r0, r0, #1
 8005192:	bf38      	it	cc
 8005194:	2000      	movcc	r0, #0
 8005196:	4770      	bx	lr

08005198 <SetZeroBig>:
 8005198:	2300      	movs	r3, #0
 800519a:	b430      	push	{r4, r5}
 800519c:	6804      	ldr	r4, [r0, #0]
 800519e:	71c3      	strb	r3, [r0, #7]
 80051a0:	461a      	mov	r2, r3
 80051a2:	461d      	mov	r5, r3
 80051a4:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
 80051a8:	7981      	ldrb	r1, [r0, #6]
 80051aa:	3301      	adds	r3, #1
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3101      	adds	r1, #1
 80051b0:	428b      	cmp	r3, r1
 80051b2:	461a      	mov	r2, r3
 80051b4:	d3f6      	bcc.n	80051a4 <SetZeroBig+0xc>
 80051b6:	2301      	movs	r3, #1
 80051b8:	8083      	strh	r3, [r0, #4]
 80051ba:	bc30      	pop	{r4, r5}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop

080051c0 <CompareBig>:
 80051c0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80051c4:	79c2      	ldrb	r2, [r0, #7]
 80051c6:	79cb      	ldrb	r3, [r1, #7]
 80051c8:	4293      	cmp	r3, r2
 80051ca:	b254      	sxtb	r4, r2
 80051cc:	d005      	beq.n	80051da <CompareBig+0x1a>
 80051ce:	2c01      	cmp	r4, #1
 80051d0:	d036      	beq.n	8005240 <CompareBig+0x80>
 80051d2:	2003      	movs	r0, #3
 80051d4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80051d8:	4770      	bx	lr
 80051da:	8884      	ldrh	r4, [r0, #4]
 80051dc:	888f      	ldrh	r7, [r1, #4]
 80051de:	42bc      	cmp	r4, r7
 80051e0:	d820      	bhi.n	8005224 <CompareBig+0x64>
 80051e2:	d327      	bcc.n	8005234 <CompareBig+0x74>
 80051e4:	f8d0 8000 	ldr.w	r8, [r0]
 80051e8:	f8d1 c000 	ldr.w	ip, [r1]
 80051ec:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 80051f0:	eb0c 0187 	add.w	r1, ip, r7, lsl #2
 80051f4:	2301      	movs	r3, #1
 80051f6:	e004      	b.n	8005202 <CompareBig+0x42>
 80051f8:	42a3      	cmp	r3, r4
 80051fa:	d808      	bhi.n	800520e <CompareBig+0x4e>
 80051fc:	3301      	adds	r3, #1
 80051fe:	42a3      	cmp	r3, r4
 8005200:	d805      	bhi.n	800520e <CompareBig+0x4e>
 8005202:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8005206:	f851 5d04 	ldr.w	r5, [r1, #-4]!
 800520a:	42ae      	cmp	r6, r5
 800520c:	d0f4      	beq.n	80051f8 <CompareBig+0x38>
 800520e:	1e59      	subs	r1, r3, #1
 8005210:	42a1      	cmp	r1, r4
 8005212:	d01d      	beq.n	8005250 <CompareBig+0x90>
 8005214:	1ae4      	subs	r4, r4, r3
 8005216:	1afb      	subs	r3, r7, r3
 8005218:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 800521c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8005220:	4299      	cmp	r1, r3
 8005222:	d907      	bls.n	8005234 <CompareBig+0x74>
 8005224:	2a00      	cmp	r2, #0
 8005226:	bf0c      	ite	eq
 8005228:	2002      	moveq	r0, #2
 800522a:	f06f 0001 	mvnne.w	r0, #1
 800522e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005232:	4770      	bx	lr
 8005234:	2a00      	cmp	r2, #0
 8005236:	bf0c      	ite	eq
 8005238:	f04f 30ff 	moveq.w	r0, #4294967295
 800523c:	2001      	movne	r0, #1
 800523e:	e7c9      	b.n	80051d4 <CompareBig+0x14>
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	f06f 0002 	mvneq.w	r0, #2
 8005248:	2003      	movne	r0, #3
 800524a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800524e:	4770      	bx	lr
 8005250:	2000      	movs	r0, #0
 8005252:	e7bf      	b.n	80051d4 <CompareBig+0x14>

08005254 <CountBits>:
 8005254:	b510      	push	{r4, lr}
 8005256:	4604      	mov	r4, r0
 8005258:	f7ff ff92 	bl	8005180 <IsZeroBig>
 800525c:	b9d8      	cbnz	r0, 8005296 <CountBits+0x42>
 800525e:	88a0      	ldrh	r0, [r4, #4]
 8005260:	6822      	ldr	r2, [r4, #0]
 8005262:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8005266:	3b01      	subs	r3, #1
 8005268:	0140      	lsls	r0, r0, #5
 800526a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800526e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005276:	d00d      	beq.n	8005294 <CountBits+0x40>
 8005278:	f1a0 0420 	sub.w	r4, r0, #32
 800527c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005280:	e001      	b.n	8005286 <CountBits+0x32>
 8005282:	42a0      	cmp	r0, r4
 8005284:	d009      	beq.n	800529a <CountBits+0x46>
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	ea01 0203 	and.w	r2, r1, r3
 800528c:	4293      	cmp	r3, r2
 800528e:	f100 30ff 	add.w	r0, r0, #4294967295
 8005292:	d1f6      	bne.n	8005282 <CountBits+0x2e>
 8005294:	bd10      	pop	{r4, pc}
 8005296:	2001      	movs	r0, #1
 8005298:	bd10      	pop	{r4, pc}
 800529a:	bd10      	pop	{r4, pc}

0800529c <CountBytes>:
 800529c:	b510      	push	{r4, lr}
 800529e:	4604      	mov	r4, r0
 80052a0:	f7ff ff6e 	bl	8005180 <IsZeroBig>
 80052a4:	2801      	cmp	r0, #1
 80052a6:	d01a      	beq.n	80052de <CountBytes+0x42>
 80052a8:	88a0      	ldrh	r0, [r4, #4]
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	0080      	lsls	r0, r0, #2
 80052ae:	4403      	add	r3, r0
 80052b0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80052b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80052b8:	d111      	bne.n	80052de <CountBytes+0x42>
 80052ba:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80052be:	f100 32ff 	add.w	r2, r0, #4294967295
 80052c2:	d10b      	bne.n	80052dc <CountBytes+0x40>
 80052c4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80052c8:	f1a0 0202 	sub.w	r2, r0, #2
 80052cc:	d106      	bne.n	80052dc <CountBytes+0x40>
 80052ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80052d2:	f1a0 0203 	sub.w	r2, r0, #3
 80052d6:	d101      	bne.n	80052dc <CountBytes+0x40>
 80052d8:	3804      	subs	r0, #4
 80052da:	bd10      	pop	{r4, pc}
 80052dc:	4610      	mov	r0, r2
 80052de:	bd10      	pop	{r4, pc}

080052e0 <W8_to_Big>:
 80052e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	2a00      	cmp	r2, #0
 80052e6:	d072      	beq.n	80053ce <W8_to_Big+0xee>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d06f      	beq.n	80053cc <W8_to_Big+0xec>
 80052ec:	1ccc      	adds	r4, r1, #3
 80052ee:	7993      	ldrb	r3, [r2, #6]
 80052f0:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 80052f4:	4563      	cmp	r3, ip
 80052f6:	d203      	bcs.n	8005300 <W8_to_Big+0x20>
 80052f8:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80052fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005300:	2900      	cmp	r1, #0
 8005302:	d068      	beq.n	80053d6 <W8_to_Big+0xf6>
 8005304:	4688      	mov	r8, r1
 8005306:	bfb8      	it	lt
 8005308:	46a0      	movlt	r8, r4
 800530a:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800530e:	f1b8 0f00 	cmp.w	r8, #0
 8005312:	6817      	ldr	r7, [r2, #0]
 8005314:	bfd8      	it	le
 8005316:	2400      	movle	r4, #0
 8005318:	dd1a      	ble.n	8005350 <W8_to_Big+0x70>
 800531a:	1843      	adds	r3, r0, r1
 800531c:	463c      	mov	r4, r7
 800531e:	eb07 0a88 	add.w	sl, r7, r8, lsl #2
 8005322:	f813 5c03 	ldrb.w	r5, [r3, #-3]
 8005326:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 800532a:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 800532e:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 8005332:	042d      	lsls	r5, r5, #16
 8005334:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8005338:	ea45 0509 	orr.w	r5, r5, r9
 800533c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8005340:	f844 5b04 	str.w	r5, [r4], #4
 8005344:	4554      	cmp	r4, sl
 8005346:	f1a3 0304 	sub.w	r3, r3, #4
 800534a:	d1ea      	bne.n	8005322 <W8_to_Big+0x42>
 800534c:	7993      	ldrb	r3, [r2, #6]
 800534e:	4644      	mov	r4, r8
 8005350:	429c      	cmp	r4, r3
 8005352:	da0b      	bge.n	800536c <W8_to_Big+0x8c>
 8005354:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 8005358:	3d01      	subs	r5, #1
 800535a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800535e:	2300      	movs	r3, #0
 8005360:	f845 3f04 	str.w	r3, [r5, #4]!
 8005364:	7996      	ldrb	r6, [r2, #6]
 8005366:	3401      	adds	r4, #1
 8005368:	42b4      	cmp	r4, r6
 800536a:	dbf9      	blt.n	8005360 <W8_to_Big+0x80>
 800536c:	f011 0103 	ands.w	r1, r1, #3
 8005370:	d010      	beq.n	8005394 <W8_to_Big+0xb4>
 8005372:	7803      	ldrb	r3, [r0, #0]
 8005374:	f847 3028 	str.w	r3, [r7, r8, lsl #2]
 8005378:	2901      	cmp	r1, #1
 800537a:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 800537e:	dd09      	ble.n	8005394 <W8_to_Big+0xb4>
 8005380:	1e44      	subs	r4, r0, #1
 8005382:	4421      	add	r1, r4
 8005384:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8005388:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 800538c:	4288      	cmp	r0, r1
 800538e:	f8c8 3000 	str.w	r3, [r8]
 8005392:	d1f7      	bne.n	8005384 <W8_to_Big+0xa4>
 8005394:	f10c 4180 	add.w	r1, ip, #1073741824	; 0x40000000
 8005398:	3901      	subs	r1, #1
 800539a:	fa1f f38c 	uxth.w	r3, ip
 800539e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80053a2:	8093      	strh	r3, [r2, #4]
 80053a4:	b971      	cbnz	r1, 80053c4 <W8_to_Big+0xe4>
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d102      	bne.n	80053b0 <W8_to_Big+0xd0>
 80053aa:	e00b      	b.n	80053c4 <W8_to_Big+0xe4>
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d008      	beq.n	80053c2 <W8_to_Big+0xe2>
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80053b8:	3901      	subs	r1, #1
 80053ba:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80053be:	2900      	cmp	r1, #0
 80053c0:	d0f4      	beq.n	80053ac <W8_to_Big+0xcc>
 80053c2:	8093      	strh	r3, [r2, #4]
 80053c4:	2000      	movs	r0, #0
 80053c6:	71d0      	strb	r0, [r2, #7]
 80053c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053cc:	b119      	cbz	r1, 80053d6 <W8_to_Big+0xf6>
 80053ce:	f241 40b8 	movw	r0, #5304	; 0x14b8
 80053d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7ff fede 	bl	8005198 <SetZeroBig>
 80053dc:	2000      	movs	r0, #0
 80053de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e2:	bf00      	nop

080053e4 <Big_to_W8>:
 80053e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e8:	4691      	mov	r9, r2
 80053ea:	4688      	mov	r8, r1
 80053ec:	4605      	mov	r5, r0
 80053ee:	f7ff ff55 	bl	800529c <CountBytes>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	4602      	mov	r2, r0
 80053f6:	bfb8      	it	lt
 80053f8:	1cc2      	addlt	r2, r0, #3
 80053fa:	1092      	asrs	r2, r2, #2
 80053fc:	2a00      	cmp	r2, #0
 80053fe:	dd2f      	ble.n	8005460 <Big_to_W8+0x7c>
 8005400:	eb08 0400 	add.w	r4, r8, r0
 8005404:	0097      	lsls	r7, r2, #2
 8005406:	2300      	movs	r3, #0
 8005408:	682e      	ldr	r6, [r5, #0]
 800540a:	58f1      	ldr	r1, [r6, r3]
 800540c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005410:	682e      	ldr	r6, [r5, #0]
 8005412:	58f1      	ldr	r1, [r6, r3]
 8005414:	0a09      	lsrs	r1, r1, #8
 8005416:	f804 1c02 	strb.w	r1, [r4, #-2]
 800541a:	682e      	ldr	r6, [r5, #0]
 800541c:	58f1      	ldr	r1, [r6, r3]
 800541e:	0c09      	lsrs	r1, r1, #16
 8005420:	f804 1c03 	strb.w	r1, [r4, #-3]
 8005424:	682e      	ldr	r6, [r5, #0]
 8005426:	58f6      	ldr	r6, [r6, r3]
 8005428:	3304      	adds	r3, #4
 800542a:	0e36      	lsrs	r6, r6, #24
 800542c:	42bb      	cmp	r3, r7
 800542e:	f804 6d04 	strb.w	r6, [r4, #-4]!
 8005432:	d1e9      	bne.n	8005408 <Big_to_W8+0x24>
 8005434:	f010 0303 	ands.w	r3, r0, #3
 8005438:	d009      	beq.n	800544e <Big_to_W8+0x6a>
 800543a:	6829      	ldr	r1, [r5, #0]
 800543c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005440:	4498      	add	r8, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8005448:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800544c:	d1f9      	bne.n	8005442 <Big_to_W8+0x5e>
 800544e:	f1b9 0f00 	cmp.w	r9, #0
 8005452:	d003      	beq.n	800545c <Big_to_W8+0x78>
 8005454:	f8c9 0000 	str.w	r0, [r9]
 8005458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800545c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005460:	2200      	movs	r2, #0
 8005462:	e7e7      	b.n	8005434 <Big_to_W8+0x50>

08005464 <FastMulInnerBase>:
 8005464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005468:	8882      	ldrh	r2, [r0, #4]
 800546a:	7983      	ldrb	r3, [r0, #6]
 800546c:	440a      	add	r2, r1
 800546e:	429a      	cmp	r2, r3
 8005470:	4604      	mov	r4, r0
 8005472:	460d      	mov	r5, r1
 8005474:	dd04      	ble.n	8005480 <FastMulInnerBase+0x1c>
 8005476:	f241 46b5 	movw	r6, #5301	; 0x14b5
 800547a:	4630      	mov	r0, r6
 800547c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005480:	f7ff fe7e 	bl	8005180 <IsZeroBig>
 8005484:	4606      	mov	r6, r0
 8005486:	b9e8      	cbnz	r0, 80054c4 <FastMulInnerBase+0x60>
 8005488:	2d00      	cmp	r5, #0
 800548a:	d0f6      	beq.n	800547a <FastMulInnerBase+0x16>
 800548c:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	f1b8 0f01 	cmp.w	r8, #1
 8005496:	ea4f 0285 	mov.w	r2, r5, lsl #2
 800549a:	d007      	beq.n	80054ac <FastMulInnerBase+0x48>
 800549c:	eb00 0388 	add.w	r3, r0, r8, lsl #2
 80054a0:	1d07      	adds	r7, r0, #4
 80054a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80054a6:	5099      	str	r1, [r3, r2]
 80054a8:	42bb      	cmp	r3, r7
 80054aa:	d1fa      	bne.n	80054a2 <FastMulInnerBase+0x3e>
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	6803      	ldr	r3, [r0, #0]
 80054b0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 80054b4:	bf08      	it	eq
 80054b6:	2204      	moveq	r2, #4
 80054b8:	2100      	movs	r1, #0
 80054ba:	4445      	add	r5, r8
 80054bc:	f000 ffcc 	bl	8006458 <memset>
 80054c0:	80a5      	strh	r5, [r4, #4]
 80054c2:	e7da      	b.n	800547a <FastMulInnerBase+0x16>
 80054c4:	2600      	movs	r6, #0
 80054c6:	e7d8      	b.n	800547a <FastMulInnerBase+0x16>

080054c8 <LeftShift>:
 80054c8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80054cc:	4681      	mov	r9, r0
 80054ce:	b3b1      	cbz	r1, 800553e <LeftShift+0x76>
 80054d0:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 80054d4:	f8d0 c000 	ldr.w	ip, [r0]
 80054d8:	f108 4a80 	add.w	sl, r8, #1073741824	; 0x40000000
 80054dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054e0:	f1c1 0720 	rsb	r7, r1, #32
 80054e4:	f85c 502a 	ldr.w	r5, [ip, sl, lsl #2]
 80054e8:	f1b8 0301 	subs.w	r3, r8, #1
 80054ec:	eb0c 0a8a 	add.w	sl, ip, sl, lsl #2
 80054f0:	fa25 f007 	lsr.w	r0, r5, r7
 80054f4:	bf18      	it	ne
 80054f6:	4652      	movne	r2, sl
 80054f8:	d101      	bne.n	80054fe <LeftShift+0x36>
 80054fa:	e009      	b.n	8005510 <LeftShift+0x48>
 80054fc:	4625      	mov	r5, r4
 80054fe:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8005502:	408d      	lsls	r5, r1
 8005504:	fa24 f607 	lsr.w	r6, r4, r7
 8005508:	4335      	orrs	r5, r6
 800550a:	3b01      	subs	r3, #1
 800550c:	6055      	str	r5, [r2, #4]
 800550e:	d1f5      	bne.n	80054fc <LeftShift+0x34>
 8005510:	f8dc 3000 	ldr.w	r3, [ip]
 8005514:	fa03 f101 	lsl.w	r1, r3, r1
 8005518:	f8cc 1000 	str.w	r1, [ip]
 800551c:	b160      	cbz	r0, 8005538 <LeftShift+0x70>
 800551e:	f899 3006 	ldrb.w	r3, [r9, #6]
 8005522:	f108 0801 	add.w	r8, r8, #1
 8005526:	4598      	cmp	r8, r3
 8005528:	bf97      	itett	ls
 800552a:	f8ca 0004 	strls.w	r0, [sl, #4]
 800552e:	f241 40b5 	movwhi	r0, #5301	; 0x14b5
 8005532:	2000      	movls	r0, #0
 8005534:	f8a9 8004 	strhls.w	r8, [r9, #4]
 8005538:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800553c:	4770      	bx	lr
 800553e:	4608      	mov	r0, r1
 8005540:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop

08005548 <MulBigbyUnInt>:
 8005548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	4684      	mov	ip, r0
 800554e:	460f      	mov	r7, r1
 8005550:	b339      	cbz	r1, 80055a2 <MulBigbyUnInt+0x5a>
 8005552:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8005556:	f8d0 9000 	ldr.w	r9, [r0]
 800555a:	f1b8 0f00 	cmp.w	r8, #0
 800555e:	d01d      	beq.n	800559c <MulBigbyUnInt+0x54>
 8005560:	f1a9 0604 	sub.w	r6, r9, #4
 8005564:	eb06 0188 	add.w	r1, r6, r8, lsl #2
 8005568:	2200      	movs	r2, #0
 800556a:	2300      	movs	r3, #0
 800556c:	6874      	ldr	r4, [r6, #4]
 800556e:	4692      	mov	sl, r2
 8005570:	469b      	mov	fp, r3
 8005572:	fbe7 ab04 	umlal	sl, fp, r7, r4
 8005576:	f846 af04 	str.w	sl, [r6, #4]!
 800557a:	428e      	cmp	r6, r1
 800557c:	465d      	mov	r5, fp
 800557e:	465a      	mov	r2, fp
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	d1f2      	bne.n	800556c <MulBigbyUnInt+0x24>
 8005586:	b14d      	cbz	r5, 800559c <MulBigbyUnInt+0x54>
 8005588:	f89c 0006 	ldrb.w	r0, [ip, #6]
 800558c:	f108 0101 	add.w	r1, r8, #1
 8005590:	4281      	cmp	r1, r0
 8005592:	d90b      	bls.n	80055ac <MulBigbyUnInt+0x64>
 8005594:	f241 40b5 	movw	r0, #5301	; 0x14b5
 8005598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559c:	2000      	movs	r0, #0
 800559e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a2:	f7ff fdf9 	bl	8005198 <SetZeroBig>
 80055a6:	4638      	mov	r0, r7
 80055a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	f8ac 1004 	strh.w	r1, [ip, #4]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f849 b028 	str.w	fp, [r9, r8, lsl #2]
 80055b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ba:	bf00      	nop

080055bc <Sub_Moduli_Big>:
 80055bc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80055c0:	8883      	ldrh	r3, [r0, #4]
 80055c2:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80055c6:	4692      	mov	sl, r2
 80055c8:	7992      	ldrb	r2, [r2, #6]
 80055ca:	454b      	cmp	r3, r9
 80055cc:	bf2c      	ite	cs
 80055ce:	4698      	movcs	r8, r3
 80055d0:	46c8      	movcc	r8, r9
 80055d2:	3201      	adds	r2, #1
 80055d4:	4590      	cmp	r8, r2
 80055d6:	d904      	bls.n	80055e2 <Sub_Moduli_Big+0x26>
 80055d8:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80055dc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80055e0:	4770      	bx	lr
 80055e2:	7982      	ldrb	r2, [r0, #6]
 80055e4:	6807      	ldr	r7, [r0, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	bf28      	it	cs
 80055ea:	2400      	movcs	r4, #0
 80055ec:	d306      	bcc.n	80055fc <Sub_Moduli_Big+0x40>
 80055ee:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 80055f2:	3301      	adds	r3, #1
 80055f4:	7982      	ldrb	r2, [r0, #6]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d2f8      	bcs.n	80055ee <Sub_Moduli_Big+0x32>
 80055fc:	798b      	ldrb	r3, [r1, #6]
 80055fe:	f8d1 c000 	ldr.w	ip, [r1]
 8005602:	454b      	cmp	r3, r9
 8005604:	d308      	bcc.n	8005618 <Sub_Moduli_Big+0x5c>
 8005606:	464b      	mov	r3, r9
 8005608:	2000      	movs	r0, #0
 800560a:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
 800560e:	3301      	adds	r3, #1
 8005610:	798a      	ldrb	r2, [r1, #6]
 8005612:	b29b      	uxth	r3, r3
 8005614:	429a      	cmp	r2, r3
 8005616:	d2f8      	bcs.n	800560a <Sub_Moduli_Big+0x4e>
 8005618:	2500      	movs	r5, #0
 800561a:	f8da 6000 	ldr.w	r6, [sl]
 800561e:	f109 0901 	add.w	r9, r9, #1
 8005622:	462c      	mov	r4, r5
 8005624:	2200      	movs	r2, #0
 8005626:	2300      	movs	r3, #0
 8005628:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800562c:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 8005630:	3401      	adds	r4, #1
 8005632:	1a40      	subs	r0, r0, r1
 8005634:	eb60 0100 	sbc.w	r1, r0, r0
 8005638:	1880      	adds	r0, r0, r2
 800563a:	b2a4      	uxth	r4, r4
 800563c:	eb41 0103 	adc.w	r1, r1, r3
 8005640:	454c      	cmp	r4, r9
 8005642:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 8005646:	460a      	mov	r2, r1
 8005648:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800564c:	4625      	mov	r5, r4
 800564e:	d3eb      	bcc.n	8005628 <Sub_Moduli_Big+0x6c>
 8005650:	45a0      	cmp	r8, r4
 8005652:	d90f      	bls.n	8005674 <Sub_Moduli_Big+0xb8>
 8005654:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005658:	f104 0c01 	add.w	ip, r4, #1
 800565c:	1950      	adds	r0, r2, r5
 800565e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8005662:	fa1f f48c 	uxth.w	r4, ip
 8005666:	f143 0100 	adc.w	r1, r3, #0
 800566a:	45a0      	cmp	r8, r4
 800566c:	460a      	mov	r2, r1
 800566e:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8005672:	d8ef      	bhi.n	8005654 <Sub_Moduli_Big+0x98>
 8005674:	b132      	cbz	r2, 8005684 <Sub_Moduli_Big+0xc8>
 8005676:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800567a:	3b01      	subs	r3, #1
 800567c:	f06f 0201 	mvn.w	r2, #1
 8005680:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
 8005684:	1e63      	subs	r3, r4, #1
 8005686:	b29b      	uxth	r3, r3
 8005688:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800568c:	b942      	cbnz	r2, 80056a0 <Sub_Moduli_Big+0xe4>
 800568e:	b16b      	cbz	r3, 80056ac <Sub_Moduli_Big+0xf0>
 8005690:	3b01      	subs	r3, #1
 8005692:	b29b      	uxth	r3, r3
 8005694:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 8005698:	2a00      	cmp	r2, #0
 800569a:	d0f8      	beq.n	800568e <Sub_Moduli_Big+0xd2>
 800569c:	1c5c      	adds	r4, r3, #1
 800569e:	b2a4      	uxth	r4, r4
 80056a0:	f8aa 4004 	strh.w	r4, [sl, #4]
 80056a4:	2000      	movs	r0, #0
 80056a6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80056aa:	4770      	bx	lr
 80056ac:	2401      	movs	r4, #1
 80056ae:	f8aa 4004 	strh.w	r4, [sl, #4]
 80056b2:	2000      	movs	r0, #0
 80056b4:	e7f7      	b.n	80056a6 <Sub_Moduli_Big+0xea>
 80056b6:	bf00      	nop

080056b8 <SubBig>:
 80056b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	460d      	mov	r5, r1
 80056c0:	ac02      	add	r4, sp, #8
 80056c2:	2100      	movs	r1, #0
 80056c4:	f890 c006 	ldrb.w	ip, [r0, #6]
 80056c8:	f844 1d04 	str.w	r1, [r4, #-4]!
 80056cc:	f895 e006 	ldrb.w	lr, [r5, #6]
 80056d0:	4606      	mov	r6, r0
 80056d2:	4690      	mov	r8, r2
 80056d4:	45f4      	cmp	ip, lr
 80056d6:	bf2c      	ite	cs
 80056d8:	4661      	movcs	r1, ip
 80056da:	4671      	movcc	r1, lr
 80056dc:	4620      	mov	r0, r4
 80056de:	461a      	mov	r2, r3
 80056e0:	461f      	mov	r7, r3
 80056e2:	f7ff fc53 	bl	8004f8c <StAllocBig>
 80056e6:	b120      	cbz	r0, 80056f2 <SubBig+0x3a>
 80056e8:	f240 30ed 	movw	r0, #1005	; 0x3ed
 80056ec:	b002      	add	sp, #8
 80056ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f2:	9b01      	ldr	r3, [sp, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	809a      	strh	r2, [r3, #4]
 80056f8:	4630      	mov	r0, r6
 80056fa:	4629      	mov	r1, r5
 80056fc:	f7ff fd60 	bl	80051c0 <CompareBig>
 8005700:	3003      	adds	r0, #3
 8005702:	2806      	cmp	r0, #6
 8005704:	d80d      	bhi.n	8005722 <SubBig+0x6a>
 8005706:	e8df f000 	tbb	[pc, r0]
 800570a:	3639      	.short	0x3639
 800570c:	262f3204 	.word	0x262f3204
 8005710:	1d          	.byte	0x1d
 8005711:	00          	.byte	0x00
 8005712:	4628      	mov	r0, r5
 8005714:	4631      	mov	r1, r6
 8005716:	9a01      	ldr	r2, [sp, #4]
 8005718:	f7ff ff50 	bl	80055bc <Sub_Moduli_Big>
 800571c:	9b01      	ldr	r3, [sp, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	71da      	strb	r2, [r3, #7]
 8005722:	4640      	mov	r0, r8
 8005724:	2100      	movs	r1, #0
 8005726:	f7ff fc5d 	bl	8004fe4 <InitBig>
 800572a:	4641      	mov	r1, r8
 800572c:	9801      	ldr	r0, [sp, #4]
 800572e:	f7ff fc75 	bl	800501c <CopyBig>
 8005732:	4639      	mov	r1, r7
 8005734:	4605      	mov	r5, r0
 8005736:	4620      	mov	r0, r4
 8005738:	f7ff fc46 	bl	8004fc8 <StFreeBig>
 800573c:	4628      	mov	r0, r5
 800573e:	b002      	add	sp, #8
 8005740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005744:	9a01      	ldr	r2, [sp, #4]
 8005746:	4630      	mov	r0, r6
 8005748:	4629      	mov	r1, r5
 800574a:	f7ff fc9d 	bl	8005088 <Add_Moduli_Big>
 800574e:	9b01      	ldr	r3, [sp, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	71da      	strb	r2, [r3, #7]
 8005754:	e7e5      	b.n	8005722 <SubBig+0x6a>
 8005756:	4630      	mov	r0, r6
 8005758:	4629      	mov	r1, r5
 800575a:	9a01      	ldr	r2, [sp, #4]
 800575c:	f7ff ff2e 	bl	80055bc <Sub_Moduli_Big>
 8005760:	9b01      	ldr	r3, [sp, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	71da      	strb	r2, [r3, #7]
 8005766:	e7dc      	b.n	8005722 <SubBig+0x6a>
 8005768:	4628      	mov	r0, r5
 800576a:	4631      	mov	r1, r6
 800576c:	e7f5      	b.n	800575a <SubBig+0xa2>
 800576e:	9801      	ldr	r0, [sp, #4]
 8005770:	f7ff fd12 	bl	8005198 <SetZeroBig>
 8005774:	e7d5      	b.n	8005722 <SubBig+0x6a>
 8005776:	4630      	mov	r0, r6
 8005778:	4629      	mov	r1, r5
 800577a:	e7cc      	b.n	8005716 <SubBig+0x5e>
 800577c:	9a01      	ldr	r2, [sp, #4]
 800577e:	4630      	mov	r0, r6
 8005780:	4629      	mov	r1, r5
 8005782:	f7ff fc81 	bl	8005088 <Add_Moduli_Big>
 8005786:	9b01      	ldr	r3, [sp, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	71da      	strb	r2, [r3, #7]
 800578c:	e7c9      	b.n	8005722 <SubBig+0x6a>
 800578e:	bf00      	nop

08005790 <MontyInit>:
 8005790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005794:	468b      	mov	fp, r1
 8005796:	7981      	ldrb	r1, [r0, #6]
 8005798:	b083      	sub	sp, #12
 800579a:	f10b 0a04 	add.w	sl, fp, #4
 800579e:	4680      	mov	r8, r0
 80057a0:	2300      	movs	r3, #0
 80057a2:	3102      	adds	r1, #2
 80057a4:	4650      	mov	r0, sl
 80057a6:	9301      	str	r3, [sp, #4]
 80057a8:	4691      	mov	r9, r2
 80057aa:	f7ff fbef 	bl	8004f8c <StAllocBig>
 80057ae:	b128      	cbz	r0, 80057bc <MontyInit+0x2c>
 80057b0:	f240 37ed 	movw	r7, #1005	; 0x3ed
 80057b4:	4638      	mov	r0, r7
 80057b6:	b003      	add	sp, #12
 80057b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057bc:	4601      	mov	r1, r0
 80057be:	f8cb 8000 	str.w	r8, [fp]
 80057c2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80057c6:	f7ff fc0d 	bl	8004fe4 <InitBig>
 80057ca:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80057ce:	f8db 3004 	ldr.w	r3, [fp, #4]
 80057d2:	f8d8 2000 	ldr.w	r2, [r8]
 80057d6:	6819      	ldr	r1, [r3, #0]
 80057d8:	3001      	adds	r0, #1
 80057da:	8098      	strh	r0, [r3, #4]
 80057dc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80057e0:	2401      	movs	r4, #1
 80057e2:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 80057e6:	6812      	ldr	r2, [r2, #0]
 80057e8:	261f      	movs	r6, #31
 80057ea:	2502      	movs	r5, #2
 80057ec:	2703      	movs	r7, #3
 80057ee:	fb02 f304 	mul.w	r3, r2, r4
 80057f2:	403b      	ands	r3, r7
 80057f4:	eb05 0e04 	add.w	lr, r5, r4
 80057f8:	42ab      	cmp	r3, r5
 80057fa:	bf28      	it	cs
 80057fc:	4674      	movcs	r4, lr
 80057fe:	007f      	lsls	r7, r7, #1
 8005800:	3e01      	subs	r6, #1
 8005802:	f087 0701 	eor.w	r7, r7, #1
 8005806:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800580a:	d1f0      	bne.n	80057ee <MontyInit+0x5e>
 800580c:	4264      	negs	r4, r4
 800580e:	f8cb 4008 	str.w	r4, [fp, #8]
 8005812:	f898 1006 	ldrb.w	r1, [r8, #6]
 8005816:	a801      	add	r0, sp, #4
 8005818:	3101      	adds	r1, #1
 800581a:	464a      	mov	r2, r9
 800581c:	f7ff fbb6 	bl	8004f8c <StAllocBig>
 8005820:	b148      	cbz	r0, 8005836 <MontyInit+0xa6>
 8005822:	4650      	mov	r0, sl
 8005824:	4649      	mov	r1, r9
 8005826:	f7ff fbcf 	bl	8004fc8 <StFreeBig>
 800582a:	f240 37ed 	movw	r7, #1005	; 0x3ed
 800582e:	4638      	mov	r0, r7
 8005830:	b003      	add	sp, #12
 8005832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005836:	9901      	ldr	r1, [sp, #4]
 8005838:	4640      	mov	r0, r8
 800583a:	f7ff fbef 	bl	800501c <CopyBig>
 800583e:	9801      	ldr	r0, [sp, #4]
 8005840:	f7ff fd08 	bl	8005254 <CountBits>
 8005844:	4240      	negs	r0, r0
 8005846:	f000 051f 	and.w	r5, r0, #31
 800584a:	4629      	mov	r1, r5
 800584c:	9801      	ldr	r0, [sp, #4]
 800584e:	f7ff fe3b 	bl	80054c8 <LeftShift>
 8005852:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005856:	9901      	ldr	r1, [sp, #4]
 8005858:	4602      	mov	r2, r0
 800585a:	464b      	mov	r3, r9
 800585c:	f7ff ff2c 	bl	80056b8 <SubBig>
 8005860:	4607      	mov	r7, r0
 8005862:	2800      	cmp	r0, #0
 8005864:	d143      	bne.n	80058ee <MontyInit+0x15e>
 8005866:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800586a:	b35b      	cbz	r3, 80058c4 <MontyInit+0x134>
 800586c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8005870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005874:	3b01      	subs	r3, #1
 8005876:	6802      	ldr	r2, [r0, #0]
 8005878:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800587c:	2101      	movs	r1, #1
 800587e:	f7ff fdf1 	bl	8005464 <FastMulInnerBase>
 8005882:	2c00      	cmp	r4, #0
 8005884:	d03e      	beq.n	8005904 <MontyInit+0x174>
 8005886:	9901      	ldr	r1, [sp, #4]
 8005888:	4640      	mov	r0, r8
 800588a:	f7ff fbc7 	bl	800501c <CopyBig>
 800588e:	4621      	mov	r1, r4
 8005890:	9801      	ldr	r0, [sp, #4]
 8005892:	f7ff fe59 	bl	8005548 <MulBigbyUnInt>
 8005896:	4629      	mov	r1, r5
 8005898:	9801      	ldr	r0, [sp, #4]
 800589a:	f7ff fe15 	bl	80054c8 <LeftShift>
 800589e:	f8db 0004 	ldr.w	r0, [fp, #4]
 80058a2:	9901      	ldr	r1, [sp, #4]
 80058a4:	4602      	mov	r2, r0
 80058a6:	464b      	mov	r3, r9
 80058a8:	f7ff ff06 	bl	80056b8 <SubBig>
 80058ac:	f8db 2004 	ldr.w	r2, [fp, #4]
 80058b0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80058ba:	2c00      	cmp	r4, #0
 80058bc:	d1e3      	bne.n	8005886 <MontyInit+0xf6>
 80058be:	3601      	adds	r6, #1
 80058c0:	429e      	cmp	r6, r3
 80058c2:	d3d3      	bcc.n	800586c <MontyInit+0xdc>
 80058c4:	a801      	add	r0, sp, #4
 80058c6:	4649      	mov	r1, r9
 80058c8:	f7ff fb7e 	bl	8004fc8 <StFreeBig>
 80058cc:	f8db 0004 	ldr.w	r0, [fp, #4]
 80058d0:	4641      	mov	r1, r8
 80058d2:	f7ff fc75 	bl	80051c0 <CompareBig>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	dd06      	ble.n	80058e8 <MontyInit+0x158>
 80058da:	f8db 0004 	ldr.w	r0, [fp, #4]
 80058de:	4641      	mov	r1, r8
 80058e0:	4602      	mov	r2, r0
 80058e2:	464b      	mov	r3, r9
 80058e4:	f7ff fee8 	bl	80056b8 <SubBig>
 80058e8:	f8cb 900c 	str.w	r9, [fp, #12]
 80058ec:	e762      	b.n	80057b4 <MontyInit+0x24>
 80058ee:	4650      	mov	r0, sl
 80058f0:	4649      	mov	r1, r9
 80058f2:	f7ff fb69 	bl	8004fc8 <StFreeBig>
 80058f6:	a801      	add	r0, sp, #4
 80058f8:	4649      	mov	r1, r9
 80058fa:	f7ff fb65 	bl	8004fc8 <StFreeBig>
 80058fe:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8005902:	e757      	b.n	80057b4 <MontyInit+0x24>
 8005904:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005908:	e7d9      	b.n	80058be <MontyInit+0x12e>
 800590a:	bf00      	nop

0800590c <MontyKillR2>:
 800590c:	b508      	push	{r3, lr}
 800590e:	4603      	mov	r3, r0
 8005910:	3004      	adds	r0, #4
 8005912:	68d9      	ldr	r1, [r3, #12]
 8005914:	f7ff fb58 	bl	8004fc8 <StFreeBig>
 8005918:	bd08      	pop	{r3, pc}
 800591a:	bf00      	nop

0800591c <MontyKillAll>:
 800591c:	6841      	ldr	r1, [r0, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	b508      	push	{r3, lr}
 8005922:	4603      	mov	r3, r0
 8005924:	6002      	str	r2, [r0, #0]
 8005926:	6082      	str	r2, [r0, #8]
 8005928:	b119      	cbz	r1, 8005932 <MontyKillAll+0x16>
 800592a:	3004      	adds	r0, #4
 800592c:	68d9      	ldr	r1, [r3, #12]
 800592e:	f7ff fb4b 	bl	8004fc8 <StFreeBig>
 8005932:	bd08      	pop	{r3, pc}

08005934 <MontyMul>:
 8005934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	b09f      	sub	sp, #124	; 0x7c
 800593a:	9312      	str	r3, [sp, #72]	; 0x48
 800593c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800593e:	921a      	str	r2, [sp, #104]	; 0x68
 8005940:	682c      	ldr	r4, [r5, #0]
 8005942:	ab1e      	add	r3, sp, #120	; 0x78
 8005944:	9315      	str	r3, [sp, #84]	; 0x54
 8005946:	68ab      	ldr	r3, [r5, #8]
 8005948:	88a5      	ldrh	r5, [r4, #4]
 800594a:	9318      	str	r3, [sp, #96]	; 0x60
 800594c:	950a      	str	r5, [sp, #40]	; 0x28
 800594e:	79a3      	ldrb	r3, [r4, #6]
 8005950:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005952:	6824      	ldr	r4, [r4, #0]
 8005954:	9414      	str	r4, [sp, #80]	; 0x50
 8005956:	2400      	movs	r4, #0
 8005958:	f845 4d04 	str.w	r4, [r5, #-4]!
 800595c:	460c      	mov	r4, r1
 800595e:	1c59      	adds	r1, r3, #1
 8005960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005962:	9515      	str	r5, [sp, #84]	; 0x54
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	9313      	str	r3, [sp, #76]	; 0x4c
 800596a:	4605      	mov	r5, r0
 800596c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800596e:	f7ff fb0d 	bl	8004f8c <StAllocBig>
 8005972:	4606      	mov	r6, r0
 8005974:	b120      	cbz	r0, 8005980 <MontyMul+0x4c>
 8005976:	f240 30ed 	movw	r0, #1005	; 0x3ed
 800597a:	b01f      	add	sp, #124	; 0x7c
 800597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005980:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005982:	4631      	mov	r1, r6
 8005984:	f7ff fb2e 	bl	8004fe4 <InitBig>
 8005988:	88a0      	ldrh	r0, [r4, #4]
 800598a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800598e:	941b      	str	r4, [sp, #108]	; 0x6c
 8005990:	4283      	cmp	r3, r0
 8005992:	6827      	ldr	r7, [r4, #0]
 8005994:	d907      	bls.n	80059a6 <MontyMul+0x72>
 8005996:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005998:	1a1a      	subs	r2, r3, r0
 800599a:	4631      	mov	r1, r6
 800599c:	0092      	lsls	r2, r2, #2
 800599e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80059a2:	f000 fd59 	bl	8006458 <memset>
 80059a6:	88ab      	ldrh	r3, [r5, #4]
 80059a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059aa:	429c      	cmp	r4, r3
 80059ac:	f240 80c5 	bls.w	8005b3a <MontyMul+0x206>
 80059b0:	6828      	ldr	r0, [r5, #0]
 80059b2:	1ae2      	subs	r2, r4, r3
 80059b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80059b8:	0092      	lsls	r2, r2, #2
 80059ba:	2100      	movs	r1, #0
 80059bc:	f000 fd4c 	bl	8006458 <memset>
 80059c0:	6829      	ldr	r1, [r5, #0]
 80059c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80059c4:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 80059c8:	00ab      	lsls	r3, r5, #2
 80059ca:	3801      	subs	r0, #1
 80059cc:	1f1a      	subs	r2, r3, #4
 80059ce:	0080      	lsls	r0, r0, #2
 80059d0:	3904      	subs	r1, #4
 80059d2:	18ba      	adds	r2, r7, r2
 80059d4:	18fb      	adds	r3, r7, r3
 80059d6:	9007      	str	r0, [sp, #28]
 80059d8:	2000      	movs	r0, #0
 80059da:	9116      	str	r1, [sp, #88]	; 0x58
 80059dc:	9219      	str	r2, [sp, #100]	; 0x64
 80059de:	9317      	str	r3, [sp, #92]	; 0x5c
 80059e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80059e2:	46bc      	mov	ip, r7
 80059e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80059e8:	f853 1f04 	ldr.w	r1, [r3, #4]!
 80059ec:	9106      	str	r1, [sp, #24]
 80059ee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80059f0:	6821      	ldr	r1, [r4, #0]
 80059f2:	9806      	ldr	r0, [sp, #24]
 80059f4:	f8dc 2000 	ldr.w	r2, [ip]
 80059f8:	682c      	ldr	r4, [r5, #0]
 80059fa:	9316      	str	r3, [sp, #88]	; 0x58
 80059fc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80059fe:	2300      	movs	r3, #0
 8005a00:	fbe1 2300 	umlal	r2, r3, r1, r0
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	2100      	movs	r1, #0
 8005a0a:	fb02 fe05 	mul.w	lr, r2, r5
 8005a0e:	4010      	ands	r0, r2
 8005a10:	4019      	ands	r1, r3
 8005a12:	fbe4 010e 	umlal	r0, r1, r4, lr
 8005a16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a18:	2c01      	cmp	r4, #1
 8005a1a:	d02c      	beq.n	8005a76 <MontyMul+0x142>
 8005a1c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8005a1e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005a20:	4666      	mov	r6, ip
 8005a22:	2400      	movs	r4, #0
 8005a24:	469b      	mov	fp, r3
 8005a26:	f04f 0900 	mov.w	r9, #0
 8005a2a:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8005a2e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8005a32:	9104      	str	r1, [sp, #16]
 8005a34:	f8cd 9014 	str.w	r9, [sp, #20]
 8005a38:	9303      	str	r3, [sp, #12]
 8005a3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a3e:	eb1b 0a02 	adds.w	sl, fp, r2
 8005a42:	9a03      	ldr	r2, [sp, #12]
 8005a44:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8005a48:	fbee 0102 	umlal	r0, r1, lr, r2
 8005a4c:	e9cd 0100 	strd	r0, r1, [sp]
 8005a50:	9806      	ldr	r0, [sp, #24]
 8005a52:	9a07      	ldr	r2, [sp, #28]
 8005a54:	f149 0b00 	adc.w	fp, r9, #0
 8005a58:	fbe0 ab03 	umlal	sl, fp, r0, r3
 8005a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a60:	eb10 000a 	adds.w	r0, r0, sl
 8005a64:	f84c 0004 	str.w	r0, [ip, r4]
 8005a68:	f104 0404 	add.w	r4, r4, #4
 8005a6c:	f141 0100 	adc.w	r1, r1, #0
 8005a70:	4294      	cmp	r4, r2
 8005a72:	d1d8      	bne.n	8005a26 <MontyMul+0xf2>
 8005a74:	465b      	mov	r3, fp
 8005a76:	2500      	movs	r5, #0
 8005a78:	9308      	str	r3, [sp, #32]
 8005a7a:	9509      	str	r5, [sp, #36]	; 0x24
 8005a7c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005a7e:	910c      	str	r1, [sp, #48]	; 0x30
 8005a80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	950d      	str	r5, [sp, #52]	; 0x34
 8005a88:	18c0      	adds	r0, r0, r3
 8005a8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a8e:	f141 0100 	adc.w	r1, r1, #0
 8005a92:	9110      	str	r1, [sp, #64]	; 0x40
 8005a94:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005a96:	950f      	str	r5, [sp, #60]	; 0x3c
 8005a98:	1812      	adds	r2, r2, r0
 8005a9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005a9c:	600a      	str	r2, [r1, #0]
 8005a9e:	f143 0300 	adc.w	r3, r3, #0
 8005aa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8005aa6:	9511      	str	r5, [sp, #68]	; 0x44
 8005aa8:	4403      	add	r3, r0
 8005aaa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab0:	3501      	adds	r5, #1
 8005ab2:	42ab      	cmp	r3, r5
 8005ab4:	950b      	str	r5, [sp, #44]	; 0x2c
 8005ab6:	d895      	bhi.n	80059e4 <MontyMul+0xb0>
 8005ab8:	4667      	mov	r7, ip
 8005aba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005abc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8005abe:	1c6b      	adds	r3, r5, #1
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	80a3      	strh	r3, [r4, #4]
 8005ac6:	d915      	bls.n	8005af4 <MontyMul+0x1c0>
 8005ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005acc:	3b01      	subs	r3, #1
 8005ace:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005ad2:	b97b      	cbnz	r3, 8005af4 <MontyMul+0x1c0>
 8005ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad6:	e005      	b.n	8005ae4 <MontyMul+0x1b0>
 8005ad8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005adc:	1e59      	subs	r1, r3, #1
 8005ade:	b289      	uxth	r1, r1
 8005ae0:	bb12      	cbnz	r2, 8005b28 <MontyMul+0x1f4>
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	f102 32ff 	add.w	r2, r2, #4294967295
 8005aee:	d1f3      	bne.n	8005ad8 <MontyMul+0x1a4>
 8005af0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005af2:	80ab      	strh	r3, [r5, #4]
 8005af4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005af6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005af8:	6821      	ldr	r1, [r4, #0]
 8005afa:	f7ff fb61 	bl	80051c0 <CompareBig>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	db15      	blt.n	8005b2e <MontyMul+0x1fa>
 8005b02:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005b04:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005b06:	6829      	ldr	r1, [r5, #0]
 8005b08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005b0a:	f7ff fd57 	bl	80055bc <Sub_Moduli_Big>
 8005b0e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005b10:	2300      	movs	r3, #0
 8005b12:	4604      	mov	r4, r0
 8005b14:	71eb      	strb	r3, [r5, #7]
 8005b16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b18:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005b1a:	68d9      	ldr	r1, [r3, #12]
 8005b1c:	f7ff fa54 	bl	8004fc8 <StFreeBig>
 8005b20:	4620      	mov	r0, r4
 8005b22:	b01f      	add	sp, #124	; 0x7c
 8005b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b28:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8005b2a:	80a3      	strh	r3, [r4, #4]
 8005b2c:	e7e2      	b.n	8005af4 <MontyMul+0x1c0>
 8005b2e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b30:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005b32:	f7ff fa73 	bl	800501c <CopyBig>
 8005b36:	4604      	mov	r4, r0
 8005b38:	e7ed      	b.n	8005b16 <MontyMul+0x1e2>
 8005b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0bc      	beq.n	8005aba <MontyMul+0x186>
 8005b40:	e73e      	b.n	80059c0 <MontyMul+0x8c>
 8005b42:	bf00      	nop

08005b44 <MontyExit>:
 8005b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b46:	b083      	sub	sp, #12
 8005b48:	ac02      	add	r4, sp, #8
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	4606      	mov	r6, r0
 8005b4e:	f844 3d04 	str.w	r3, [r4, #-4]!
 8005b52:	4615      	mov	r5, r2
 8005b54:	460f      	mov	r7, r1
 8005b56:	4620      	mov	r0, r4
 8005b58:	79b1      	ldrb	r1, [r6, #6]
 8005b5a:	68d2      	ldr	r2, [r2, #12]
 8005b5c:	f7ff fa16 	bl	8004f8c <StAllocBig>
 8005b60:	b118      	cbz	r0, 8005b6a <MontyExit+0x26>
 8005b62:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8005b66:	b003      	add	sp, #12
 8005b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b6a:	9801      	ldr	r0, [sp, #4]
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	f7ff fa39 	bl	8004fe4 <InitBig>
 8005b72:	463a      	mov	r2, r7
 8005b74:	9901      	ldr	r1, [sp, #4]
 8005b76:	462b      	mov	r3, r5
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f7ff fedb 	bl	8005934 <MontyMul>
 8005b7e:	68e9      	ldr	r1, [r5, #12]
 8005b80:	4606      	mov	r6, r0
 8005b82:	4620      	mov	r0, r4
 8005b84:	f7ff fa20 	bl	8004fc8 <StFreeBig>
 8005b88:	4630      	mov	r0, r6
 8005b8a:	b003      	add	sp, #12
 8005b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8e:	bf00      	nop

08005b90 <ModularExpSlidWin>:
 8005b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	460f      	mov	r7, r1
 8005b96:	8889      	ldrh	r1, [r1, #4]
 8005b98:	b091      	sub	sp, #68	; 0x44
 8005b9a:	2901      	cmp	r1, #1
 8005b9c:	4681      	mov	r9, r0
 8005b9e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8005ba0:	4616      	mov	r6, r2
 8005ba2:	469a      	mov	sl, r3
 8005ba4:	f240 80d0 	bls.w	8005d48 <ModularExpSlidWin+0x1b8>
 8005ba8:	f06f 0108 	mvn.w	r1, #8
 8005bac:	2308      	movs	r3, #8
 8005bae:	9106      	str	r1, [sp, #24]
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	2104      	movs	r1, #4
 8005bb4:	469c      	mov	ip, r3
 8005bb6:	9205      	str	r2, [sp, #20]
 8005bb8:	f04f 0820 	mov.w	r8, #32
 8005bbc:	f04f 0b03 	mov.w	fp, #3
 8005bc0:	9104      	str	r1, [sp, #16]
 8005bc2:	79b2      	ldrb	r2, [r6, #6]
 8005bc4:	88e5      	ldrh	r5, [r4, #6]
 8005bc6:	00d1      	lsls	r1, r2, #3
 8005bc8:	0092      	lsls	r2, r2, #2
 8005bca:	311c      	adds	r1, #28
 8005bcc:	3211      	adds	r2, #17
 8005bce:	fb02 1303 	mla	r3, r2, r3, r1
 8005bd2:	88a1      	ldrh	r1, [r4, #4]
 8005bd4:	442b      	add	r3, r5
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	da05      	bge.n	8005be6 <ModularExpSlidWin+0x56>
 8005bda:	f240 35ed 	movw	r5, #1005	; 0x3ed
 8005bde:	4628      	mov	r0, r5
 8005be0:	b011      	add	sp, #68	; 0x44
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	9203      	str	r2, [sp, #12]
 8005bea:	eb08 0305 	add.w	r3, r8, r5
 8005bee:	80e3      	strh	r3, [r4, #6]
 8005bf0:	1953      	adds	r3, r2, r5
 8005bf2:	9307      	str	r3, [sp, #28]
 8005bf4:	d0f1      	beq.n	8005bda <ModularExpSlidWin+0x4a>
 8005bf6:	a90c      	add	r1, sp, #48	; 0x30
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	f8cd c004 	str.w	ip, [sp, #4]
 8005c00:	f7ff fdc6 	bl	8005790 <MontyInit>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d1e8      	bne.n	8005bda <ModularExpSlidWin+0x4a>
 8005c08:	ab0c      	add	r3, sp, #48	; 0x30
 8005c0a:	4648      	mov	r0, r9
 8005c0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c0e:	464a      	mov	r2, r9
 8005c10:	f7ff fe90 	bl	8005934 <MontyMul>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d1df      	bne.n	8005bda <ModularExpSlidWin+0x4a>
 8005c1a:	a80c      	add	r0, sp, #48	; 0x30
 8005c1c:	9302      	str	r3, [sp, #8]
 8005c1e:	f7ff fe75 	bl	800590c <MontyKillR2>
 8005c22:	9b02      	ldr	r3, [sp, #8]
 8005c24:	9308      	str	r3, [sp, #32]
 8005c26:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005c2a:	9b07      	ldr	r3, [sp, #28]
 8005c2c:	970b      	str	r7, [sp, #44]	; 0x2c
 8005c2e:	9f08      	ldr	r7, [sp, #32]
 8005c30:	9509      	str	r5, [sp, #36]	; 0x24
 8005c32:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005c36:	4665      	mov	r5, ip
 8005c38:	4698      	mov	r8, r3
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	79b1      	ldrb	r1, [r6, #6]
 8005c3e:	4622      	mov	r2, r4
 8005c40:	3701      	adds	r7, #1
 8005c42:	f108 0804 	add.w	r8, r8, #4
 8005c46:	f7ff f9a1 	bl	8004f8c <StAllocBig>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d1c5      	bne.n	8005bda <ModularExpSlidWin+0x4a>
 8005c4e:	42af      	cmp	r7, r5
 8005c50:	dbf3      	blt.n	8005c3a <ModularExpSlidWin+0xaa>
 8005c52:	4602      	mov	r2, r0
 8005c54:	46ac      	mov	ip, r5
 8005c56:	4611      	mov	r1, r2
 8005c58:	4650      	mov	r0, sl
 8005c5a:	9202      	str	r2, [sp, #8]
 8005c5c:	f8cd c004 	str.w	ip, [sp, #4]
 8005c60:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005c62:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8005c66:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005c68:	f7ff f9bc 	bl	8004fe4 <InitBig>
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	4648      	mov	r0, r9
 8005c70:	5959      	ldr	r1, [r3, r5]
 8005c72:	f7ff f9d3 	bl	800501c <CopyBig>
 8005c76:	9a02      	ldr	r2, [sp, #8]
 8005c78:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005c7c:	f1bb 0f00 	cmp.w	fp, #0
 8005c80:	d013      	beq.n	8005caa <ModularExpSlidWin+0x11a>
 8005c82:	4623      	mov	r3, r4
 8005c84:	9e07      	ldr	r6, [sp, #28]
 8005c86:	f8cd c00c 	str.w	ip, [sp, #12]
 8005c8a:	4614      	mov	r4, r2
 8005c8c:	461d      	mov	r5, r3
 8005c8e:	6830      	ldr	r0, [r6, #0]
 8005c90:	ab0c      	add	r3, sp, #48	; 0x30
 8005c92:	4601      	mov	r1, r0
 8005c94:	4602      	mov	r2, r0
 8005c96:	3401      	adds	r4, #1
 8005c98:	f7ff fe4c 	bl	8005934 <MontyMul>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d19c      	bne.n	8005bda <ModularExpSlidWin+0x4a>
 8005ca0:	455c      	cmp	r4, fp
 8005ca2:	d1f4      	bne.n	8005c8e <ModularExpSlidWin+0xfe>
 8005ca4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005ca8:	462c      	mov	r4, r5
 8005caa:	f1bc 0f01 	cmp.w	ip, #1
 8005cae:	d010      	beq.n	8005cd2 <ModularExpSlidWin+0x142>
 8005cb0:	9907      	ldr	r1, [sp, #28]
 8005cb2:	2601      	movs	r6, #1
 8005cb4:	1f0d      	subs	r5, r1, #4
 8005cb6:	46e3      	mov	fp, ip
 8005cb8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	686a      	ldr	r2, [r5, #4]
 8005cc0:	ab0c      	add	r3, sp, #48	; 0x30
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	f7ff fe36 	bl	8005934 <MontyMul>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d186      	bne.n	8005bda <ModularExpSlidWin+0x4a>
 8005ccc:	455e      	cmp	r6, fp
 8005cce:	d1f3      	bne.n	8005cb8 <ModularExpSlidWin+0x128>
 8005cd0:	46dc      	mov	ip, fp
 8005cd2:	88bb      	ldrh	r3, [r7, #4]
 8005cd4:	f8cd c004 	str.w	ip, [sp, #4]
 8005cd8:	2600      	movs	r6, #0
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	4648      	mov	r0, r9
 8005cde:	4651      	mov	r1, sl
 8005ce0:	9603      	str	r6, [sp, #12]
 8005ce2:	9308      	str	r3, [sp, #32]
 8005ce4:	f7ff f99a 	bl	800501c <CopyBig>
 8005ce8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005cec:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8005cf0:	4635      	mov	r5, r6
 8005cf2:	46b4      	mov	ip, r6
 8005cf4:	940a      	str	r4, [sp, #40]	; 0x28
 8005cf6:	4634      	mov	r4, r6
 8005cf8:	9e04      	ldr	r6, [sp, #16]
 8005cfa:	f04f 0b01 	mov.w	fp, #1
 8005cfe:	f1bb 0b01 	subs.w	fp, fp, #1
 8005d02:	d109      	bne.n	8005d18 <ModularExpSlidWin+0x188>
 8005d04:	9a08      	ldr	r2, [sp, #32]
 8005d06:	1c53      	adds	r3, r2, #1
 8005d08:	d05f      	beq.n	8005dca <ModularExpSlidWin+0x23a>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8005d10:	3a01      	subs	r2, #1
 8005d12:	f04f 0b20 	mov.w	fp, #32
 8005d16:	9208      	str	r2, [sp, #32]
 8005d18:	0fe3      	lsrs	r3, r4, #31
 8005d1a:	0064      	lsls	r4, r4, #1
 8005d1c:	f1bc 0f00 	cmp.w	ip, #0
 8005d20:	d01f      	beq.n	8005d62 <ModularExpSlidWin+0x1d2>
 8005d22:	f1bc 0f01 	cmp.w	ip, #1
 8005d26:	d101      	bne.n	8005d2c <ModularExpSlidWin+0x19c>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d040      	beq.n	8005dae <ModularExpSlidWin+0x21e>
 8005d2c:	3501      	adds	r5, #1
 8005d2e:	9903      	ldr	r1, [sp, #12]
 8005d30:	1b72      	subs	r2, r6, r5
 8005d32:	4093      	lsls	r3, r2
 8005d34:	4319      	orrs	r1, r3
 8005d36:	42b5      	cmp	r5, r6
 8005d38:	9103      	str	r1, [sp, #12]
 8005d3a:	d019      	beq.n	8005d70 <ModularExpSlidWin+0x1e0>
 8005d3c:	f1bb 0b01 	subs.w	fp, fp, #1
 8005d40:	f04f 0c02 	mov.w	ip, #2
 8005d44:	d1e8      	bne.n	8005d18 <ModularExpSlidWin+0x188>
 8005d46:	e7dd      	b.n	8005d04 <ModularExpSlidWin+0x174>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	f06f 0101 	mvn.w	r1, #1
 8005d4e:	2202      	movs	r2, #2
 8005d50:	469c      	mov	ip, r3
 8005d52:	9304      	str	r3, [sp, #16]
 8005d54:	9106      	str	r1, [sp, #24]
 8005d56:	9205      	str	r2, [sp, #20]
 8005d58:	f04f 0804 	mov.w	r8, #4
 8005d5c:	f04f 0b00 	mov.w	fp, #0
 8005d60:	e72f      	b.n	8005bc2 <ModularExpSlidWin+0x32>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0cb      	beq.n	8005cfe <ModularExpSlidWin+0x16e>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0e0      	beq.n	8005d2c <ModularExpSlidWin+0x19c>
 8005d6a:	f04f 0c01 	mov.w	ip, #1
 8005d6e:	e7c6      	b.n	8005cfe <ModularExpSlidWin+0x16e>
 8005d70:	2500      	movs	r5, #0
 8005d72:	4650      	mov	r0, sl
 8005d74:	4651      	mov	r1, sl
 8005d76:	4652      	mov	r2, sl
 8005d78:	ab0c      	add	r3, sp, #48	; 0x30
 8005d7a:	3501      	adds	r5, #1
 8005d7c:	f7ff fdda 	bl	8005934 <MontyMul>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	f47f af2a 	bne.w	8005bda <ModularExpSlidWin+0x4a>
 8005d86:	42ae      	cmp	r6, r5
 8005d88:	dcf3      	bgt.n	8005d72 <ModularExpSlidWin+0x1e2>
 8005d8a:	9a03      	ldr	r2, [sp, #12]
 8005d8c:	9906      	ldr	r1, [sp, #24]
 8005d8e:	ea02 0301 	and.w	r3, r2, r1
 8005d92:	9a07      	ldr	r2, [sp, #28]
 8005d94:	4650      	mov	r0, sl
 8005d96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d9a:	4652      	mov	r2, sl
 8005d9c:	ab0c      	add	r3, sp, #48	; 0x30
 8005d9e:	f7ff fdc9 	bl	8005934 <MontyMul>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	f47f af19 	bne.w	8005bda <ModularExpSlidWin+0x4a>
 8005da8:	9003      	str	r0, [sp, #12]
 8005daa:	4605      	mov	r5, r0
 8005dac:	e7dd      	b.n	8005d6a <ModularExpSlidWin+0x1da>
 8005dae:	4650      	mov	r0, sl
 8005db0:	4651      	mov	r1, sl
 8005db2:	4652      	mov	r2, sl
 8005db4:	ab0c      	add	r3, sp, #48	; 0x30
 8005db6:	f8cd c004 	str.w	ip, [sp, #4]
 8005dba:	f7ff fdbb 	bl	8005934 <MontyMul>
 8005dbe:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	f47f af09 	bne.w	8005bda <ModularExpSlidWin+0x4a>
 8005dc8:	e799      	b.n	8005cfe <ModularExpSlidWin+0x16e>
 8005dca:	4663      	mov	r3, ip
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8005dd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005dd4:	d11f      	bne.n	8005e16 <ModularExpSlidWin+0x286>
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	dd1d      	ble.n	8005e16 <ModularExpSlidWin+0x286>
 8005dda:	9e03      	ldr	r6, [sp, #12]
 8005ddc:	4667      	mov	r7, ip
 8005dde:	e001      	b.n	8005de4 <ModularExpSlidWin+0x254>
 8005de0:	45ab      	cmp	fp, r5
 8005de2:	d017      	beq.n	8005e14 <ModularExpSlidWin+0x284>
 8005de4:	4650      	mov	r0, sl
 8005de6:	4651      	mov	r1, sl
 8005de8:	4652      	mov	r2, sl
 8005dea:	ab0c      	add	r3, sp, #48	; 0x30
 8005dec:	0076      	lsls	r6, r6, #1
 8005dee:	f10b 0b01 	add.w	fp, fp, #1
 8005df2:	f7ff fd9f 	bl	8005934 <MontyMul>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	f47f aeef 	bne.w	8005bda <ModularExpSlidWin+0x4a>
 8005dfc:	9b05      	ldr	r3, [sp, #20]
 8005dfe:	4233      	tst	r3, r6
 8005e00:	d0ee      	beq.n	8005de0 <ModularExpSlidWin+0x250>
 8005e02:	4650      	mov	r0, sl
 8005e04:	4649      	mov	r1, r9
 8005e06:	4652      	mov	r2, sl
 8005e08:	ab0c      	add	r3, sp, #48	; 0x30
 8005e0a:	f7ff fd93 	bl	8005934 <MontyMul>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d0e6      	beq.n	8005de0 <ModularExpSlidWin+0x250>
 8005e12:	e6e2      	b.n	8005bda <ModularExpSlidWin+0x4a>
 8005e14:	46bc      	mov	ip, r7
 8005e16:	4650      	mov	r0, sl
 8005e18:	4651      	mov	r1, sl
 8005e1a:	aa0c      	add	r2, sp, #48	; 0x30
 8005e1c:	f8cd c004 	str.w	ip, [sp, #4]
 8005e20:	f7ff fe90 	bl	8005b44 <MontyExit>
 8005e24:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005e28:	4605      	mov	r5, r0
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	f47f aed5 	bne.w	8005bda <ModularExpSlidWin+0x4a>
 8005e30:	a80c      	add	r0, sp, #48	; 0x30
 8005e32:	f8cd c004 	str.w	ip, [sp, #4]
 8005e36:	f7ff fd71 	bl	800591c <MontyKillAll>
 8005e3a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005e3e:	462e      	mov	r6, r5
 8005e40:	4667      	mov	r7, ip
 8005e42:	9907      	ldr	r1, [sp, #28]
 8005e44:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8005e48:	4621      	mov	r1, r4
 8005e4a:	3601      	adds	r6, #1
 8005e4c:	f7ff f8bc 	bl	8004fc8 <StFreeBig>
 8005e50:	42be      	cmp	r6, r7
 8005e52:	dbf6      	blt.n	8005e42 <ModularExpSlidWin+0x2b2>
 8005e54:	88e3      	ldrh	r3, [r4, #6]
 8005e56:	ebc8 0803 	rsb	r8, r8, r3
 8005e5a:	f8a4 8006 	strh.w	r8, [r4, #6]
 8005e5e:	e6be      	b.n	8005bde <ModularExpSlidWin+0x4e>

08005e60 <RSASP1>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	4c97      	ldr	r4, [pc, #604]	; (80060c4 <RSASP1+0x264>)
 8005e66:	f8df c260 	ldr.w	ip, [pc, #608]	; 80060c8 <RSASP1+0x268>
 8005e6a:	b08f      	sub	sp, #60	; 0x3c
 8005e6c:	2501      	movs	r5, #1
 8005e6e:	2700      	movs	r7, #0
 8005e70:	9709      	str	r7, [sp, #36]	; 0x24
 8005e72:	6025      	str	r5, [r4, #0]
 8005e74:	6824      	ldr	r4, [r4, #0]
 8005e76:	9409      	str	r4, [sp, #36]	; 0x24
 8005e78:	f8dc 4000 	ldr.w	r4, [ip]
 8005e7c:	9409      	str	r4, [sp, #36]	; 0x24
 8005e7e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005e82:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005e86:	4604      	mov	r4, r0
 8005e88:	460d      	mov	r5, r1
 8005e8a:	4616      	mov	r6, r2
 8005e8c:	469a      	mov	sl, r3
 8005e8e:	d057      	beq.n	8005f40 <RSASP1+0xe0>
 8005e90:	970a      	str	r7, [sp, #40]	; 0x28
 8005e92:	970b      	str	r7, [sp, #44]	; 0x2c
 8005e94:	970c      	str	r7, [sp, #48]	; 0x30
 8005e96:	970d      	str	r7, [sp, #52]	; 0x34
 8005e98:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8005e9c:	6887      	ldr	r7, [r0, #8]
 8005e9e:	f8d0 8000 	ldr.w	r8, [r0]
 8005ea2:	6843      	ldr	r3, [r0, #4]
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	d033      	beq.n	8005f10 <RSASP1+0xb0>
 8005ea8:	2f00      	cmp	r7, #0
 8005eaa:	d031      	beq.n	8005f10 <RSASP1+0xb0>
 8005eac:	f1b8 0f00 	cmp.w	r8, #0
 8005eb0:	d02e      	beq.n	8005f10 <RSASP1+0xb0>
 8005eb2:	f112 0c02 	adds.w	ip, r2, #2
 8005eb6:	d02b      	beq.n	8005f10 <RSASP1+0xb0>
 8005eb8:	f1b9 0f00 	cmp.w	r9, #0
 8005ebc:	dd28      	ble.n	8005f10 <RSASP1+0xb0>
 8005ebe:	f103 3bff 	add.w	fp, r3, #4294967295
 8005ec2:	f1bb 0f00 	cmp.w	fp, #0
 8005ec6:	dd23      	ble.n	8005f10 <RSASP1+0xb0>
 8005ec8:	45d9      	cmp	r9, fp
 8005eca:	dc21      	bgt.n	8005f10 <RSASP1+0xb0>
 8005ecc:	3302      	adds	r3, #2
 8005ece:	089b      	lsrs	r3, r3, #2
 8005ed0:	aa0a      	add	r2, sp, #40	; 0x28
 8005ed2:	9205      	str	r2, [sp, #20]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	4652      	mov	r2, sl
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	f8cd c010 	str.w	ip, [sp, #16]
 8005ee0:	f7ff f854 	bl	8004f8c <StAllocBig>
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	f8dd c010 	ldr.w	ip, [sp, #16]
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d130      	bne.n	8005f50 <RSASP1+0xf0>
 8005eee:	aa0c      	add	r2, sp, #48	; 0x30
 8005ef0:	9206      	str	r2, [sp, #24]
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4652      	mov	r2, sl
 8005ef8:	f8cd c010 	str.w	ip, [sp, #16]
 8005efc:	f7ff f846 	bl	8004f8c <StAllocBig>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f000 80b1 	beq.w	8006068 <RSASP1+0x208>
 8005f06:	9805      	ldr	r0, [sp, #20]
 8005f08:	4651      	mov	r1, sl
 8005f0a:	f7ff f85d 	bl	8004fc8 <StFreeBig>
 8005f0e:	e01f      	b.n	8005f50 <RSASP1+0xf0>
 8005f10:	461c      	mov	r4, r3
 8005f12:	2300      	movs	r3, #0
 8005f14:	930a      	str	r3, [sp, #40]	; 0x28
 8005f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f18:	930c      	str	r3, [sp, #48]	; 0x30
 8005f1a:	930d      	str	r3, [sp, #52]	; 0x34
 8005f1c:	b155      	cbz	r5, 8005f34 <RSASP1+0xd4>
 8005f1e:	b14f      	cbz	r7, 8005f34 <RSASP1+0xd4>
 8005f20:	f1b8 0f00 	cmp.w	r8, #0
 8005f24:	d006      	beq.n	8005f34 <RSASP1+0xd4>
 8005f26:	b12e      	cbz	r6, 8005f34 <RSASP1+0xd4>
 8005f28:	4599      	cmp	r9, r3
 8005f2a:	dd03      	ble.n	8005f34 <RSASP1+0xd4>
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	dd01      	ble.n	8005f34 <RSASP1+0xd4>
 8005f30:	45a1      	cmp	r9, r4
 8005f32:	dd66      	ble.n	8006002 <RSASP1+0x1a2>
 8005f34:	f241 3bef 	movw	fp, #5103	; 0x13ef
 8005f38:	4658      	mov	r0, fp
 8005f3a:	b00f      	add	sp, #60	; 0x3c
 8005f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f42:	f8cc 3000 	str.w	r3, [ip]
 8005f46:	f8dc 3000 	ldr.w	r3, [ip]
 8005f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4e:	b933      	cbnz	r3, 8005f5e <RSASP1+0xfe>
 8005f50:	68a7      	ldr	r7, [r4, #8]
 8005f52:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8005f56:	f8d4 8000 	ldr.w	r8, [r4]
 8005f5a:	6864      	ldr	r4, [r4, #4]
 8005f5c:	e7d9      	b.n	8005f12 <RSASP1+0xb2>
 8005f5e:	970a      	str	r7, [sp, #40]	; 0x28
 8005f60:	970b      	str	r7, [sp, #44]	; 0x2c
 8005f62:	970c      	str	r7, [sp, #48]	; 0x30
 8005f64:	970d      	str	r7, [sp, #52]	; 0x34
 8005f66:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8005f6a:	6887      	ldr	r7, [r0, #8]
 8005f6c:	6803      	ldr	r3, [r0, #0]
 8005f6e:	6842      	ldr	r2, [r0, #4]
 8005f70:	2900      	cmp	r1, #0
 8005f72:	d043      	beq.n	8005ffc <RSASP1+0x19c>
 8005f74:	2f00      	cmp	r7, #0
 8005f76:	d041      	beq.n	8005ffc <RSASP1+0x19c>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d03f      	beq.n	8005ffc <RSASP1+0x19c>
 8005f7c:	f116 0b02 	adds.w	fp, r6, #2
 8005f80:	d03c      	beq.n	8005ffc <RSASP1+0x19c>
 8005f82:	f1b9 0f00 	cmp.w	r9, #0
 8005f86:	dd39      	ble.n	8005ffc <RSASP1+0x19c>
 8005f88:	f102 38ff 	add.w	r8, r2, #4294967295
 8005f8c:	f1b8 0f00 	cmp.w	r8, #0
 8005f90:	dd34      	ble.n	8005ffc <RSASP1+0x19c>
 8005f92:	45c1      	cmp	r9, r8
 8005f94:	dc32      	bgt.n	8005ffc <RSASP1+0x19c>
 8005f96:	3202      	adds	r2, #2
 8005f98:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8005f9c:	aa0a      	add	r2, sp, #40	; 0x28
 8005f9e:	9205      	str	r2, [sp, #20]
 8005fa0:	4661      	mov	r1, ip
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4652      	mov	r2, sl
 8005fa6:	9303      	str	r3, [sp, #12]
 8005fa8:	f8cd c010 	str.w	ip, [sp, #16]
 8005fac:	f7fe ffee 	bl	8004f8c <StAllocBig>
 8005fb0:	9b03      	ldr	r3, [sp, #12]
 8005fb2:	f8dd c010 	ldr.w	ip, [sp, #16]
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d1ca      	bne.n	8005f50 <RSASP1+0xf0>
 8005fba:	aa0c      	add	r2, sp, #48	; 0x30
 8005fbc:	9206      	str	r2, [sp, #24]
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4661      	mov	r1, ip
 8005fc2:	4652      	mov	r2, sl
 8005fc4:	9303      	str	r3, [sp, #12]
 8005fc6:	f7fe ffe1 	bl	8004f8c <StAllocBig>
 8005fca:	9b03      	ldr	r3, [sp, #12]
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d19a      	bne.n	8005f06 <RSASP1+0xa6>
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd6:	f7ff f983 	bl	80052e0 <W8_to_Big>
 8005fda:	4641      	mov	r1, r8
 8005fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f7ff f97e 	bl	80052e0 <W8_to_Big>
 8005fe4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005fe6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fe8:	f7ff f8ea 	bl	80051c0 <CompareBig>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	f2c0 808d 	blt.w	800610c <RSASP1+0x2ac>
 8005ff2:	9806      	ldr	r0, [sp, #24]
 8005ff4:	4651      	mov	r1, sl
 8005ff6:	f7fe ffe7 	bl	8004fc8 <StFreeBig>
 8005ffa:	e784      	b.n	8005f06 <RSASP1+0xa6>
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	4698      	mov	r8, r3
 8006000:	e787      	b.n	8005f12 <RSASP1+0xb2>
 8006002:	1ce3      	adds	r3, r4, #3
 8006004:	089b      	lsrs	r3, r3, #2
 8006006:	aa0a      	add	r2, sp, #40	; 0x28
 8006008:	9205      	str	r2, [sp, #20]
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	4652      	mov	r2, sl
 8006010:	9303      	str	r3, [sp, #12]
 8006012:	f7fe ffbb 	bl	8004f8c <StAllocBig>
 8006016:	9b03      	ldr	r3, [sp, #12]
 8006018:	4683      	mov	fp, r0
 800601a:	2800      	cmp	r0, #0
 800601c:	d18c      	bne.n	8005f38 <RSASP1+0xd8>
 800601e:	aa0c      	add	r2, sp, #48	; 0x30
 8006020:	9206      	str	r2, [sp, #24]
 8006022:	4610      	mov	r0, r2
 8006024:	4619      	mov	r1, r3
 8006026:	4652      	mov	r2, sl
 8006028:	f7fe ffb0 	bl	8004f8c <StAllocBig>
 800602c:	4683      	mov	fp, r0
 800602e:	b120      	cbz	r0, 800603a <RSASP1+0x1da>
 8006030:	9805      	ldr	r0, [sp, #20]
 8006032:	4651      	mov	r1, sl
 8006034:	f7fe ffc8 	bl	8004fc8 <StFreeBig>
 8006038:	e77e      	b.n	8005f38 <RSASP1+0xd8>
 800603a:	4621      	mov	r1, r4
 800603c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800603e:	4640      	mov	r0, r8
 8006040:	f7ff f94e 	bl	80052e0 <W8_to_Big>
 8006044:	4621      	mov	r1, r4
 8006046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006048:	4628      	mov	r0, r5
 800604a:	f7ff f949 	bl	80052e0 <W8_to_Big>
 800604e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006050:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006052:	f7ff f8b5 	bl	80051c0 <CompareBig>
 8006056:	2800      	cmp	r0, #0
 8006058:	db38      	blt.n	80060cc <RSASP1+0x26c>
 800605a:	f241 3bf2 	movw	fp, #5106	; 0x13f2
 800605e:	9806      	ldr	r0, [sp, #24]
 8006060:	4651      	mov	r1, sl
 8006062:	f7fe ffb1 	bl	8004fc8 <StFreeBig>
 8006066:	e7e3      	b.n	8006030 <RSASP1+0x1d0>
 8006068:	4659      	mov	r1, fp
 800606a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800606c:	4640      	mov	r0, r8
 800606e:	f7ff f937 	bl	80052e0 <W8_to_Big>
 8006072:	4659      	mov	r1, fp
 8006074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006076:	4628      	mov	r0, r5
 8006078:	f7ff f932 	bl	80052e0 <W8_to_Big>
 800607c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800607e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006080:	f7ff f89e 	bl	80051c0 <CompareBig>
 8006084:	2800      	cmp	r0, #0
 8006086:	dab4      	bge.n	8005ff2 <RSASP1+0x192>
 8006088:	ab0d      	add	r3, sp, #52	; 0x34
 800608a:	f109 0103 	add.w	r1, r9, #3
 800608e:	4618      	mov	r0, r3
 8006090:	0889      	lsrs	r1, r1, #2
 8006092:	4652      	mov	r2, sl
 8006094:	9307      	str	r3, [sp, #28]
 8006096:	f7fe ff79 	bl	8004f8c <StAllocBig>
 800609a:	2800      	cmp	r0, #0
 800609c:	d1a9      	bne.n	8005ff2 <RSASP1+0x192>
 800609e:	4638      	mov	r0, r7
 80060a0:	4649      	mov	r1, r9
 80060a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060a4:	f7ff f91c 	bl	80052e0 <W8_to_Big>
 80060a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060aa:	af0b      	add	r7, sp, #44	; 0x2c
 80060ac:	7999      	ldrb	r1, [r3, #6]
 80060ae:	4638      	mov	r0, r7
 80060b0:	4652      	mov	r2, sl
 80060b2:	f7fe ff6b 	bl	8004f8c <StAllocBig>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d05d      	beq.n	8006176 <RSASP1+0x316>
 80060ba:	9807      	ldr	r0, [sp, #28]
 80060bc:	4651      	mov	r1, sl
 80060be:	f7fe ff83 	bl	8004fc8 <StFreeBig>
 80060c2:	e796      	b.n	8005ff2 <RSASP1+0x192>
 80060c4:	40023008 	.word	0x40023008
 80060c8:	40023000 	.word	0x40023000
 80060cc:	ab0d      	add	r3, sp, #52	; 0x34
 80060ce:	f109 0103 	add.w	r1, r9, #3
 80060d2:	4618      	mov	r0, r3
 80060d4:	0889      	lsrs	r1, r1, #2
 80060d6:	4652      	mov	r2, sl
 80060d8:	9307      	str	r3, [sp, #28]
 80060da:	f7fe ff57 	bl	8004f8c <StAllocBig>
 80060de:	4683      	mov	fp, r0
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d1bc      	bne.n	800605e <RSASP1+0x1fe>
 80060e4:	4638      	mov	r0, r7
 80060e6:	4649      	mov	r1, r9
 80060e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060ea:	f7ff f8f9 	bl	80052e0 <W8_to_Big>
 80060ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060f0:	af0b      	add	r7, sp, #44	; 0x2c
 80060f2:	7999      	ldrb	r1, [r3, #6]
 80060f4:	4638      	mov	r0, r7
 80060f6:	4652      	mov	r2, sl
 80060f8:	f7fe ff48 	bl	8004f8c <StAllocBig>
 80060fc:	4683      	mov	fp, r0
 80060fe:	2800      	cmp	r0, #0
 8006100:	d073      	beq.n	80061ea <RSASP1+0x38a>
 8006102:	9807      	ldr	r0, [sp, #28]
 8006104:	4651      	mov	r1, sl
 8006106:	f7fe ff5f 	bl	8004fc8 <StFreeBig>
 800610a:	e7a8      	b.n	800605e <RSASP1+0x1fe>
 800610c:	ab0d      	add	r3, sp, #52	; 0x34
 800610e:	f109 0103 	add.w	r1, r9, #3
 8006112:	4618      	mov	r0, r3
 8006114:	0889      	lsrs	r1, r1, #2
 8006116:	4652      	mov	r2, sl
 8006118:	9307      	str	r3, [sp, #28]
 800611a:	f7fe ff37 	bl	8004f8c <StAllocBig>
 800611e:	2800      	cmp	r0, #0
 8006120:	f47f af67 	bne.w	8005ff2 <RSASP1+0x192>
 8006124:	4638      	mov	r0, r7
 8006126:	4649      	mov	r1, r9
 8006128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800612a:	f7ff f8d9 	bl	80052e0 <W8_to_Big>
 800612e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006130:	af0b      	add	r7, sp, #44	; 0x2c
 8006132:	7999      	ldrb	r1, [r3, #6]
 8006134:	4638      	mov	r0, r7
 8006136:	4652      	mov	r2, sl
 8006138:	f7fe ff28 	bl	8004f8c <StAllocBig>
 800613c:	2800      	cmp	r0, #0
 800613e:	d1bc      	bne.n	80060ba <RSASP1+0x25a>
 8006140:	f8cd a000 	str.w	sl, [sp]
 8006144:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006146:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800614a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800614c:	f7ff fd20 	bl	8005b90 <ModularExpSlidWin>
 8006150:	2800      	cmp	r0, #0
 8006152:	d145      	bne.n	80061e0 <RSASP1+0x380>
 8006154:	4681      	mov	r9, r0
 8006156:	4603      	mov	r3, r0
 8006158:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800615a:	9303      	str	r3, [sp, #12]
 800615c:	f7ff f89e 	bl	800529c <CountBytes>
 8006160:	ebc0 0008 	rsb	r0, r0, r8
 8006164:	4581      	cmp	r9, r0
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	da64      	bge.n	8006234 <RSASP1+0x3d4>
 800616a:	eb06 0209 	add.w	r2, r6, r9
 800616e:	f109 0901 	add.w	r9, r9, #1
 8006172:	7093      	strb	r3, [r2, #2]
 8006174:	e7f0      	b.n	8006158 <RSASP1+0x2f8>
 8006176:	f8cd a000 	str.w	sl, [sp]
 800617a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800617c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800617e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006182:	f7ff fd05 	bl	8005b90 <ModularExpSlidWin>
 8006186:	f8dd c010 	ldr.w	ip, [sp, #16]
 800618a:	bb48      	cbnz	r0, 80061e0 <RSASP1+0x380>
 800618c:	463a      	mov	r2, r7
 800618e:	4680      	mov	r8, r0
 8006190:	462f      	mov	r7, r5
 8006192:	4681      	mov	r9, r0
 8006194:	4625      	mov	r5, r4
 8006196:	4664      	mov	r4, ip
 8006198:	e005      	b.n	80061a6 <RSASP1+0x346>
 800619a:	eb06 0308 	add.w	r3, r6, r8
 800619e:	f108 0801 	add.w	r8, r8, #1
 80061a2:	f883 9002 	strb.w	r9, [r3, #2]
 80061a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80061a8:	9204      	str	r2, [sp, #16]
 80061aa:	f7ff f877 	bl	800529c <CountBytes>
 80061ae:	ebc0 000b 	rsb	r0, r0, fp
 80061b2:	4580      	cmp	r8, r0
 80061b4:	9a04      	ldr	r2, [sp, #16]
 80061b6:	dbf0      	blt.n	800619a <RSASP1+0x33a>
 80061b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80061bc:	46a4      	mov	ip, r4
 80061be:	4640      	mov	r0, r8
 80061c0:	f8cd c010 	str.w	ip, [sp, #16]
 80061c4:	462c      	mov	r4, r5
 80061c6:	463d      	mov	r5, r7
 80061c8:	4617      	mov	r7, r2
 80061ca:	f7ff f867 	bl	800529c <CountBytes>
 80061ce:	f8dd c010 	ldr.w	ip, [sp, #16]
 80061d2:	ebc0 010b 	rsb	r1, r0, fp
 80061d6:	4461      	add	r1, ip
 80061d8:	4640      	mov	r0, r8
 80061da:	2200      	movs	r2, #0
 80061dc:	f7ff f902 	bl	80053e4 <Big_to_W8>
 80061e0:	4638      	mov	r0, r7
 80061e2:	4651      	mov	r1, sl
 80061e4:	f7fe fef0 	bl	8004fc8 <StFreeBig>
 80061e8:	e767      	b.n	80060ba <RSASP1+0x25a>
 80061ea:	f8cd a000 	str.w	sl, [sp]
 80061ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80061f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80061f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061f6:	f7ff fccb 	bl	8005b90 <ModularExpSlidWin>
 80061fa:	4683      	mov	fp, r0
 80061fc:	b9a8      	cbnz	r0, 800622a <RSASP1+0x3ca>
 80061fe:	4605      	mov	r5, r0
 8006200:	4680      	mov	r8, r0
 8006202:	e002      	b.n	800620a <RSASP1+0x3aa>
 8006204:	f806 8005 	strb.w	r8, [r6, r5]
 8006208:	3501      	adds	r5, #1
 800620a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800620c:	f7ff f846 	bl	800529c <CountBytes>
 8006210:	1a20      	subs	r0, r4, r0
 8006212:	4285      	cmp	r5, r0
 8006214:	dbf6      	blt.n	8006204 <RSASP1+0x3a4>
 8006216:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006218:	4628      	mov	r0, r5
 800621a:	f7ff f83f 	bl	800529c <CountBytes>
 800621e:	1a21      	subs	r1, r4, r0
 8006220:	4431      	add	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	2200      	movs	r2, #0
 8006226:	f7ff f8dd 	bl	80053e4 <Big_to_W8>
 800622a:	4638      	mov	r0, r7
 800622c:	4651      	mov	r1, sl
 800622e:	f7fe fecb 	bl	8004fc8 <StFreeBig>
 8006232:	e766      	b.n	8006102 <RSASP1+0x2a2>
 8006234:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006238:	4648      	mov	r0, r9
 800623a:	f7ff f82f 	bl	800529c <CountBytes>
 800623e:	ebc0 0108 	rsb	r1, r0, r8
 8006242:	4459      	add	r1, fp
 8006244:	4648      	mov	r0, r9
 8006246:	2200      	movs	r2, #0
 8006248:	f7ff f8cc 	bl	80053e4 <Big_to_W8>
 800624c:	e7c8      	b.n	80061e0 <RSASP1+0x380>
 800624e:	bf00      	nop

08006250 <RSA_PKCS1v15_Decrypt>:
 8006250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	b083      	sub	sp, #12
 8006256:	2500      	movs	r5, #0
 8006258:	9501      	str	r5, [sp, #4]
 800625a:	460c      	mov	r4, r1
 800625c:	4616      	mov	r6, r2
 800625e:	461f      	mov	r7, r3
 8006260:	4605      	mov	r5, r0
 8006262:	b150      	cbz	r0, 800627a <RSA_PKCS1v15_Decrypt+0x2a>
 8006264:	b149      	cbz	r1, 800627a <RSA_PKCS1v15_Decrypt+0x2a>
 8006266:	b142      	cbz	r2, 800627a <RSA_PKCS1v15_Decrypt+0x2a>
 8006268:	6809      	ldr	r1, [r1, #0]
 800626a:	b131      	cbz	r1, 800627a <RSA_PKCS1v15_Decrypt+0x2a>
 800626c:	68a2      	ldr	r2, [r4, #8]
 800626e:	b122      	cbz	r2, 800627a <RSA_PKCS1v15_Decrypt+0x2a>
 8006270:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8006274:	6842      	ldr	r2, [r0, #4]
 8006276:	4594      	cmp	ip, r2
 8006278:	d004      	beq.n	8006284 <RSA_PKCS1v15_Decrypt+0x34>
 800627a:	f241 30f4 	movw	r0, #5108	; 0x13f4
 800627e:	b003      	add	sp, #12
 8006280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006284:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8006288:	889a      	ldrh	r2, [r3, #4]
 800628a:	44cc      	add	ip, r9
 800628c:	4562      	cmp	r2, ip
 800628e:	dbf4      	blt.n	800627a <RSA_PKCS1v15_Decrypt+0x2a>
 8006290:	f8d3 a000 	ldr.w	sl, [r3]
 8006294:	f8a3 c006 	strh.w	ip, [r3, #6]
 8006298:	eb0a 0809 	add.w	r8, sl, r9
 800629c:	4642      	mov	r2, r8
 800629e:	f7ff fddf 	bl	8005e60 <RSASP1>
 80062a2:	b130      	cbz	r0, 80062b2 <RSA_PKCS1v15_Decrypt+0x62>
 80062a4:	686b      	ldr	r3, [r5, #4]
 80062a6:	f241 30f4 	movw	r0, #5108	; 0x13f4
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	80fb      	strh	r3, [r7, #6]
 80062b0:	e7e5      	b.n	800627e <RSA_PKCS1v15_Decrypt+0x2e>
 80062b2:	f81a 3009 	ldrb.w	r3, [sl, r9]
 80062b6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80062ba:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80062be:	f082 0a02 	eor.w	sl, r2, #2
 80062c2:	f1b9 0f02 	cmp.w	r9, #2
 80062c6:	ea4a 0a03 	orr.w	sl, sl, r3
 80062ca:	4602      	mov	r2, r0
 80062cc:	dd10      	ble.n	80062f0 <RSA_PKCS1v15_Decrypt+0xa0>
 80062ce:	f108 0102 	add.w	r1, r8, #2
 80062d2:	eb08 0c09 	add.w	ip, r8, r9
 80062d6:	2301      	movs	r3, #1
 80062d8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80062dc:	ea40 1010 	orr.w	r0, r0, r0, lsr #4
 80062e0:	ea40 0090 	orr.w	r0, r0, r0, lsr #2
 80062e4:	ea40 0050 	orr.w	r0, r0, r0, lsr #1
 80062e8:	4003      	ands	r3, r0
 80062ea:	4561      	cmp	r1, ip
 80062ec:	441a      	add	r2, r3
 80062ee:	d1f3      	bne.n	80062d8 <RSA_PKCS1v15_Decrypt+0x88>
 80062f0:	f022 0b07 	bic.w	fp, r2, #7
 80062f4:	ea4b 2b2b 	orr.w	fp, fp, fp, asr #8
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	4843      	ldr	r0, [pc, #268]	; (8006408 <RSA_PKCS1v15_Decrypt+0x1b8>)
 80062fc:	4943      	ldr	r1, [pc, #268]	; (800640c <RSA_PKCS1v15_Decrypt+0x1bc>)
 80062fe:	ea4b 1b2b 	orr.w	fp, fp, fp, asr #4
 8006302:	ea4b 0bab 	orr.w	fp, fp, fp, asr #2
 8006306:	ebc2 0c09 	rsb	ip, r2, r9
 800630a:	ea4b 0b6b 	orr.w	fp, fp, fp, asr #1
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	3b03      	subs	r3, #3
 8006312:	f1ac 0c03 	sub.w	ip, ip, #3
 8006316:	f00b 0b01 	and.w	fp, fp, #1
 800631a:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 800631e:	f08b 0b01 	eor.w	fp, fp, #1
 8006322:	fb93 fcf9 	sdiv	ip, r3, r9
 8006326:	fb09 391c 	mls	r9, r9, ip, r3
 800632a:	ea4a 0a0b 	orr.w	sl, sl, fp
 800632e:	f04f 0c01 	mov.w	ip, #1
 8006332:	ea0a 030c 	and.w	r3, sl, ip
 8006336:	f8c6 9000 	str.w	r9, [r6]
 800633a:	f8c0 c000 	str.w	ip, [r0]
 800633e:	6800      	ldr	r0, [r0, #0]
 8006340:	9001      	str	r0, [sp, #4]
 8006342:	ea83 030c 	eor.w	r3, r3, ip
 8006346:	fa03 fc0c 	lsl.w	ip, r3, ip
 800634a:	ea4c 0c03 	orr.w	ip, ip, r3
 800634e:	680b      	ldr	r3, [r1, #0]
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	ea4c 0c8c 	orr.w	ip, ip, ip, lsl #2
 8006356:	9b01      	ldr	r3, [sp, #4]
 8006358:	ea4c 1c0c 	orr.w	ip, ip, ip, lsl #4
 800635c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006360:	3301      	adds	r3, #1
 8006362:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006366:	d01d      	beq.n	80063a4 <RSA_PKCS1v15_Decrypt+0x154>
 8006368:	686b      	ldr	r3, [r5, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	dd13      	ble.n	8006396 <RSA_PKCS1v15_Decrypt+0x146>
 800636e:	2300      	movs	r3, #0
 8006370:	4619      	mov	r1, r3
 8006372:	fa5f f98c 	uxtb.w	r9, ip
 8006376:	f818 6003 	ldrb.w	r6, [r8, r3]
 800637a:	68a0      	ldr	r0, [r4, #8]
 800637c:	ea06 0609 	and.w	r6, r6, r9
 8006380:	5446      	strb	r6, [r0, r1]
 8006382:	6868      	ldr	r0, [r5, #4]
 8006384:	3301      	adds	r3, #1
 8006386:	f3c2 66c0 	ubfx	r6, r2, #27, #1
 800638a:	4298      	cmp	r0, r3
 800638c:	4431      	add	r1, r6
 800638e:	f1a2 0205 	sub.w	r2, r2, #5
 8006392:	dcf0      	bgt.n	8006376 <RSA_PKCS1v15_Decrypt+0x126>
 8006394:	4603      	mov	r3, r0
 8006396:	ea6f 0c0c 	mvn.w	ip, ip
 800639a:	f241 30f4 	movw	r0, #5108	; 0x13f4
 800639e:	ea0c 0000 	and.w	r0, ip, r0
 80063a2:	e782      	b.n	80062aa <RSA_PKCS1v15_Decrypt+0x5a>
 80063a4:	9b01      	ldr	r3, [sp, #4]
 80063a6:	600b      	str	r3, [r1, #0]
 80063a8:	680b      	ldr	r3, [r1, #0]
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	9901      	ldr	r1, [sp, #4]
 80063ae:	686b      	ldr	r3, [r5, #4]
 80063b0:	b1a9      	cbz	r1, 80063de <RSA_PKCS1v15_Decrypt+0x18e>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	ddef      	ble.n	8006396 <RSA_PKCS1v15_Decrypt+0x146>
 80063b6:	2300      	movs	r3, #0
 80063b8:	3a03      	subs	r2, #3
 80063ba:	4619      	mov	r1, r3
 80063bc:	fa5f f98c 	uxtb.w	r9, ip
 80063c0:	f818 6003 	ldrb.w	r6, [r8, r3]
 80063c4:	68a0      	ldr	r0, [r4, #8]
 80063c6:	ea06 0609 	and.w	r6, r6, r9
 80063ca:	5446      	strb	r6, [r0, r1]
 80063cc:	6868      	ldr	r0, [r5, #4]
 80063ce:	18d6      	adds	r6, r2, r3
 80063d0:	3301      	adds	r3, #1
 80063d2:	f3c6 6640 	ubfx	r6, r6, #25, #1
 80063d6:	4298      	cmp	r0, r3
 80063d8:	4431      	add	r1, r6
 80063da:	dcf1      	bgt.n	80063c0 <RSA_PKCS1v15_Decrypt+0x170>
 80063dc:	e7da      	b.n	8006394 <RSA_PKCS1v15_Decrypt+0x144>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	ddd9      	ble.n	8006396 <RSA_PKCS1v15_Decrypt+0x146>
 80063e2:	460b      	mov	r3, r1
 80063e4:	3202      	adds	r2, #2
 80063e6:	fa5f f98c 	uxtb.w	r9, ip
 80063ea:	f818 6003 	ldrb.w	r6, [r8, r3]
 80063ee:	68a0      	ldr	r0, [r4, #8]
 80063f0:	ea06 0609 	and.w	r6, r6, r9
 80063f4:	5446      	strb	r6, [r0, r1]
 80063f6:	6868      	ldr	r0, [r5, #4]
 80063f8:	1ad6      	subs	r6, r2, r3
 80063fa:	3301      	adds	r3, #1
 80063fc:	4298      	cmp	r0, r3
 80063fe:	eb01 71d6 	add.w	r1, r1, r6, lsr #31
 8006402:	dcf2      	bgt.n	80063ea <RSA_PKCS1v15_Decrypt+0x19a>
 8006404:	e7c6      	b.n	8006394 <RSA_PKCS1v15_Decrypt+0x144>
 8006406:	bf00      	nop
 8006408:	40023008 	.word	0x40023008
 800640c:	40023000 	.word	0x40023000

08006410 <__libc_init_array>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	4d0d      	ldr	r5, [pc, #52]	; (8006448 <__libc_init_array+0x38>)
 8006414:	4c0d      	ldr	r4, [pc, #52]	; (800644c <__libc_init_array+0x3c>)
 8006416:	1b64      	subs	r4, r4, r5
 8006418:	10a4      	asrs	r4, r4, #2
 800641a:	2600      	movs	r6, #0
 800641c:	42a6      	cmp	r6, r4
 800641e:	d109      	bne.n	8006434 <__libc_init_array+0x24>
 8006420:	4d0b      	ldr	r5, [pc, #44]	; (8006450 <__libc_init_array+0x40>)
 8006422:	4c0c      	ldr	r4, [pc, #48]	; (8006454 <__libc_init_array+0x44>)
 8006424:	f000 f820 	bl	8006468 <_init>
 8006428:	1b64      	subs	r4, r4, r5
 800642a:	10a4      	asrs	r4, r4, #2
 800642c:	2600      	movs	r6, #0
 800642e:	42a6      	cmp	r6, r4
 8006430:	d105      	bne.n	800643e <__libc_init_array+0x2e>
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	f855 3b04 	ldr.w	r3, [r5], #4
 8006438:	4798      	blx	r3
 800643a:	3601      	adds	r6, #1
 800643c:	e7ee      	b.n	800641c <__libc_init_array+0xc>
 800643e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006442:	4798      	blx	r3
 8006444:	3601      	adds	r6, #1
 8006446:	e7f2      	b.n	800642e <__libc_init_array+0x1e>
 8006448:	080066a8 	.word	0x080066a8
 800644c:	080066a8 	.word	0x080066a8
 8006450:	080066a8 	.word	0x080066a8
 8006454:	080066ac 	.word	0x080066ac

08006458 <memset>:
 8006458:	4402      	add	r2, r0
 800645a:	4603      	mov	r3, r0
 800645c:	4293      	cmp	r3, r2
 800645e:	d100      	bne.n	8006462 <memset+0xa>
 8006460:	4770      	bx	lr
 8006462:	f803 1b01 	strb.w	r1, [r3], #1
 8006466:	e7f9      	b.n	800645c <memset+0x4>

08006468 <_init>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr

08006474 <_fini>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr
