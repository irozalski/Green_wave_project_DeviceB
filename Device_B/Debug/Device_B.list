
Device_B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053dc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005694  08005694  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800569c  0800569c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056a0  080056a0  000156a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080056a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000010  080056b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  080056b4  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d1e  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c9  00000000  00000000  00031d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00034428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00035438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018344  00000000  00000000  00036360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014df2  00000000  00000000  0004e6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e80  00000000  00000000  00063496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6316  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a8  00000000  00000000  000f6368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800555c 	.word	0x0800555c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800555c 	.word	0x0800555c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14d      	bne.n	80002b4 <__udivmoddi4+0xac>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d968      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b152      	cbz	r2, 800023a <__udivmoddi4+0x32>
 8000224:	fa01 f302 	lsl.w	r3, r1, r2
 8000228:	f1c2 0120 	rsb	r1, r2, #32
 800022c:	fa20 f101 	lsr.w	r1, r0, r1
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	ea41 0803 	orr.w	r8, r1, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800023e:	0c21      	lsrs	r1, r4, #16
 8000240:	fbb8 fef5 	udiv	lr, r8, r5
 8000244:	fa1f f78c 	uxth.w	r7, ip
 8000248:	fb05 831e 	mls	r3, r5, lr, r8
 800024c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000250:	fb0e f107 	mul.w	r1, lr, r7
 8000254:	4299      	cmp	r1, r3
 8000256:	d90b      	bls.n	8000270 <__udivmoddi4+0x68>
 8000258:	eb1c 0303 	adds.w	r3, ip, r3
 800025c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000260:	f080 811e 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000264:	4299      	cmp	r1, r3
 8000266:	f240 811b 	bls.w	80004a0 <__udivmoddi4+0x298>
 800026a:	f1ae 0e02 	sub.w	lr, lr, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f5 	udiv	r0, r3, r5
 8000278:	fb05 3310 	mls	r3, r5, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x96>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 8108 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8105 	bls.w	80004a4 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa8>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d908      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	f000 80ee 	beq.w	800049a <__udivmoddi4+0x292>
 80002be:	2100      	movs	r1, #0
 80002c0:	e9c6 0500 	strd	r0, r5, [r6]
 80002c4:	4608      	mov	r0, r1
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0303 	sbc.w	r3, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e2      	beq.n	80002b0 <__udivmoddi4+0xa8>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7df      	b.n	80002b0 <__udivmoddi4+0xa8>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8091 	bne.w	8000420 <__udivmoddi4+0x218>
 80002fe:	eba1 050c 	sub.w	r5, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000310:	fb07 5013 	mls	r0, r7, r3, r5
 8000314:	0c25      	lsrs	r5, r4, #16
 8000316:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	42a8      	cmp	r0, r5
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0505 	adds.w	r5, ip, r5
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	42a8      	cmp	r0, r5
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb5 f0f7 	udiv	r0, r5, r7
 800033c:	fb07 5510 	mls	r5, r7, r0, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4628      	mov	r0, r5
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x9e>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa05 f301 	lsl.w	r3, r5, r1
 800037e:	431c      	orrs	r4, r3
 8000380:	40fd      	lsrs	r5, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f301 	lsl.w	r3, r0, r1
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 5518 	mls	r5, r9, r8, r5
 8000398:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	42a8      	cmp	r0, r5
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0505 	adds.w	r5, ip, r5
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4465      	add	r5, ip
 80003c0:	1a2d      	subs	r5, r5, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003c8:	fb09 5510 	mls	r5, r9, r0, r5
 80003cc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45ae      	cmp	lr, r5
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0505 	adds.w	r5, ip, r5
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	45ae      	cmp	lr, r5
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4465      	add	r5, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba5 050e 	sub.w	r5, r5, lr
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15e      	cbz	r6, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb65 050e 	sbc.w	r5, r5, lr
 800040a:	fa05 f707 	lsl.w	r7, r5, r7
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	40cd      	lsrs	r5, r1
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c6 7500 	strd	r7, r5, [r6]
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa25 f303 	lsr.w	r3, r5, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	430d      	orrs	r5, r1
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000440:	fb07 3011 	mls	r0, r7, r1, r3
 8000444:	0c2b      	lsrs	r3, r5, #16
 8000446:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800044a:	fb01 f00e 	mul.w	r0, r1, lr
 800044e:	4298      	cmp	r0, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f101 38ff 	add.w	r8, r1, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	4298      	cmp	r0, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3902      	subs	r1, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a1b      	subs	r3, r3, r0
 800046a:	b2ad      	uxth	r5, r5
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3310 	mls	r3, r7, r0, r3
 8000474:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000478:	fb00 f30e 	mul.w	r3, r0, lr
 800047c:	42ab      	cmp	r3, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 38ff 	add.w	r8, r0, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	42ab      	cmp	r3, r5
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	1aed      	subs	r5, r5, r3
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e707      	b.n	80002b0 <__udivmoddi4+0xa8>
 80004a0:	4686      	mov	lr, r0
 80004a2:	e6e5      	b.n	8000270 <__udivmoddi4+0x68>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fa      	b.n	800029e <__udivmoddi4+0x96>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4641      	mov	r1, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4465      	add	r5, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <calc_pulse>:
static volatile uint32_t received_value;
static int received_bits;

//Normal NEC protocol
static pulse_t calc_pulse(uint32_t time)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2bf9      	cmp	r3, #249	; 0xf9
 80004e8:	d801      	bhi.n	80004ee <calc_pulse+0x12>
		return PULSE_ERROR;
 80004ea:	2305      	movs	r3, #5
 80004ec:	e021      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 1200)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80004f4:	d201      	bcs.n	80004fa <calc_pulse+0x1e>
		return PULSE_SHORT;
 80004f6:	2304      	movs	r3, #4
 80004f8:	e01b      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 2000)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000500:	d201      	bcs.n	8000506 <calc_pulse+0x2a>
		return PULSE_LONG;
 8000502:	2303      	movs	r3, #3
 8000504:	e015      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 3000)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800050c:	4293      	cmp	r3, r2
 800050e:	d801      	bhi.n	8000514 <calc_pulse+0x38>
		return PULSE_2MS;
 8000510:	2302      	movs	r3, #2
 8000512:	e00e      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 6000)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f241 726f 	movw	r2, #5999	; 0x176f
 800051a:	4293      	cmp	r3, r2
 800051c:	d801      	bhi.n	8000522 <calc_pulse+0x46>
		return PULSE_4MS;
 800051e:	2301      	movs	r3, #1
 8000520:	e007      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 12000)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000528:	4293      	cmp	r3, r2
 800052a:	d801      	bhi.n	8000530 <calc_pulse+0x54>
		return PULSE_9MS;
 800052c:	2300      	movs	r3, #0
 800052e:	e000      	b.n	8000532 <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000530:	2305      	movs	r3, #5
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <ir_tim_interrupt>:
	else
		return PULSE_ERROR;
}

void ir_tim_interrupt(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 8000542:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <ir_tim_interrupt+0xa4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b1f      	cmp	r3, #31
 8000548:	dc43      	bgt.n	80005d2 <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1));
 800054a:	2100      	movs	r1, #0
 800054c:	4825      	ldr	r0, [pc, #148]	; (80005e4 <ir_tim_interrupt+0xa8>)
 800054e:	f003 ff53 	bl	80043f8 <HAL_TIM_ReadCapturedValue>
 8000552:	4603      	mov	r3, r0
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffc1 	bl	80004dc <calc_pulse>
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	3b01      	subs	r3, #1
 8000562:	2b03      	cmp	r3, #3
 8000564:	d831      	bhi.n	80005ca <ir_tim_interrupt+0x8e>
 8000566:	a201      	add	r2, pc, #4	; (adr r2, 800056c <ir_tim_interrupt+0x30>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	080005ad 	.word	0x080005ad
 8000570:	080005bb 	.word	0x080005bb
 8000574:	08000593 	.word	0x08000593
 8000578:	0800057d 	.word	0x0800057d
	case PULSE_SHORT:
		received_value = received_value >> 1;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <ir_tim_interrupt+0xac>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	085b      	lsrs	r3, r3, #1
 8000582:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <ir_tim_interrupt+0xac>)
 8000584:	6013      	str	r3, [r2, #0]
		received_bits++;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <ir_tim_interrupt+0xa4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <ir_tim_interrupt+0xa4>)
 800058e:	6013      	str	r3, [r2, #0]
		break;
 8000590:	e022      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <ir_tim_interrupt+0xac>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	085b      	lsrs	r3, r3, #1
 8000598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <ir_tim_interrupt+0xac>)
 800059e:	6013      	str	r3, [r2, #0]
		received_bits++;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005a8:	6013      	str	r3, [r2, #0]
		break;
 80005aa:	e015      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <ir_tim_interrupt+0xac>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
		break;
 80005b8:	e00e      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if (received_bits == 0)
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d109      	bne.n	80005d6 <ir_tim_interrupt+0x9a>
			received_bits = 32;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005c4:	2220      	movs	r2, #32
 80005c6:	601a      	str	r2, [r3, #0]
		break;
 80005c8:	e005      	b.n	80005d6 <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
		break;
 80005d0:	e002      	b.n	80005d8 <ir_tim_interrupt+0x9c>
		return;
 80005d2:	bf00      	nop
 80005d4:	e000      	b.n	80005d8 <ir_tim_interrupt+0x9c>
		break;
 80005d6:	bf00      	nop
	}
}
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000030 	.word	0x20000030
 80005e4:	20000124 	.word	0x20000124
 80005e8:	2000002c 	.word	0x2000002c

080005ec <ir_receiver_init>:

void ir_receiver_init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim3);
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <ir_receiver_init+0x18>)
 80005f2:	f003 f863 	bl	80036bc <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005f6:	2100      	movs	r1, #0
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <ir_receiver_init+0x18>)
 80005fa:	f003 fa73 	bl	8003ae4 <HAL_TIM_IC_Start_IT>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000124 	.word	0x20000124

08000608 <ir_read>:

int ir_read(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <ir_read+0x30>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b20      	cmp	r3, #32
 8000614:	d002      	beq.n	800061c <ir_read+0x14>
		return -1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e007      	b.n	800062c <ir_read+0x24>

	uint8_t value = received_value >> 16;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <ir_read+0x34>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <ir_read+0x30>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
	return value;
 800062a:	79fb      	ldrb	r3, [r7, #7]
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000030 	.word	0x20000030
 800063c:	2000002c 	.word	0x2000002c

08000640 <ir_sender_init>:
#include "ir_sender.h"
#include "tim.h"

void ir_sender_init(void){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Nie potrzebne bo start jest przy wysyłaniu komendy
    HAL_TIM_Base_Start(&htim2);
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <ir_sender_init+0x10>)
 8000646:	f003 f839 	bl	80036bc <HAL_TIM_Base_Start>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000dc 	.word	0x200000dc

08000654 <delay_us>:


void delay_us (uint16_t delay){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <delay_us+0x2c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2)<delay);
 8000666:	bf00      	nop
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <delay_us+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3f9      	bcc.n	8000668 <delay_us+0x14>
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	200000dc 	.word	0x200000dc

08000684 <NEC_SendCommand>:


// Funkcja do wysyłania całej komendy NEC
void NEC_SendCommand(uint8_t command) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
    // Wyślij ramkę startową
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Start nośnej
 800068e:	2100      	movs	r1, #0
 8000690:	4841      	ldr	r0, [pc, #260]	; (8000798 <NEC_SendCommand+0x114>)
 8000692:	f003 f8bb 	bl	800380c <HAL_TIM_PWM_Start>
    delay_us(NEC_START_PULSE);         // Impuls 9ms
 8000696:	f242 3028 	movw	r0, #9000	; 0x2328
 800069a:	f7ff ffdb 	bl	8000654 <delay_us>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Stop nośnej
 800069e:	2100      	movs	r1, #0
 80006a0:	483d      	ldr	r0, [pc, #244]	; (8000798 <NEC_SendCommand+0x114>)
 80006a2:	f003 f963 	bl	800396c <HAL_TIM_PWM_Stop>
    delay_us(NEC_START_PAUSE);         // Pauza 4.5ms
 80006a6:	f241 1094 	movw	r0, #4500	; 0x1194
 80006aa:	f7ff ffd3 	bl	8000654 <delay_us>


    //Adres i negacja adresu
    for (int i = 0; i < 8; i++) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e012      	b.n	80006da <NEC_SendCommand+0x56>
    	// Zawsze najpierw krótki impuls 560µs
    	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80006b4:	2100      	movs	r1, #0
 80006b6:	4838      	ldr	r0, [pc, #224]	; (8000798 <NEC_SendCommand+0x114>)
 80006b8:	f003 f8a8 	bl	800380c <HAL_TIM_PWM_Start>
    	    delay_us(NEC_PULSE);
 80006bc:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006c0:	f7ff ffc8 	bl	8000654 <delay_us>
    	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80006c4:	2100      	movs	r1, #0
 80006c6:	4834      	ldr	r0, [pc, #208]	; (8000798 <NEC_SendCommand+0x114>)
 80006c8:	f003 f950 	bl	800396c <HAL_TIM_PWM_Stop>
    	    delay_us(NEC_PAUSE_0);
 80006cc:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006d0:	f7ff ffc0 	bl	8000654 <delay_us>
    for (int i = 0; i < 8; i++) {
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	dde9      	ble.n	80006b4 <NEC_SendCommand+0x30>
    }

    for (int i = 0; i < 8; i++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	e012      	b.n	800070c <NEC_SendCommand+0x88>
        	// Zawsze najpierw krótki impuls 560µs
        	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80006e6:	2100      	movs	r1, #0
 80006e8:	482b      	ldr	r0, [pc, #172]	; (8000798 <NEC_SendCommand+0x114>)
 80006ea:	f003 f88f 	bl	800380c <HAL_TIM_PWM_Start>
        	    delay_us(NEC_PULSE);
 80006ee:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006f2:	f7ff ffaf 	bl	8000654 <delay_us>
        	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80006f6:	2100      	movs	r1, #0
 80006f8:	4827      	ldr	r0, [pc, #156]	; (8000798 <NEC_SendCommand+0x114>)
 80006fa:	f003 f937 	bl	800396c <HAL_TIM_PWM_Stop>
        	    delay_us(NEC_PAUSE_1);
 80006fe:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8000702:	f7ff ffa7 	bl	8000654 <delay_us>
    for (int i = 0; i < 8; i++) {
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	3301      	adds	r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	2b07      	cmp	r3, #7
 8000710:	dde9      	ble.n	80006e6 <NEC_SendCommand+0x62>
        }

    // Wyślij bity komendy (zakładamy 8-bitową komendę)
    for (int i = 0; i < 8; i++) {
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e00d      	b.n	8000734 <NEC_SendCommand+0xb0>
        NEC_SendBit((command >> i) & 0x01);
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	fa42 f303 	asr.w	r3, r2, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f837 	bl	800079c <NEC_SendBit>
    for (int i = 0; i < 8; i++) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b07      	cmp	r3, #7
 8000738:	ddee      	ble.n	8000718 <NEC_SendCommand+0x94>
    }

    // Wyślij bity zanegowanej komendy (zakładamy 8-bitową komendę)
        for (int i = 0; i < 8; i++) {
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	e010      	b.n	8000762 <NEC_SendCommand+0xde>
            NEC_SendBit(~(command >> i) & 0x01);
 8000740:	79fa      	ldrb	r2, [r7, #7]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	fa42 f303 	asr.w	r3, r2, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf0c      	ite	eq
 8000750:	2301      	moveq	r3, #1
 8000752:	2300      	movne	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f820 	bl	800079c <NEC_SendBit>
        for (int i = 0; i < 8; i++) {
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3301      	adds	r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2b07      	cmp	r3, #7
 8000766:	ddeb      	ble.n	8000740 <NEC_SendCommand+0xbc>
        }

        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 8000768:	2100      	movs	r1, #0
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <NEC_SendCommand+0x114>)
 800076c:	f003 f84e 	bl	800380c <HAL_TIM_PWM_Start>
                	    delay_us(NEC_PULSE);
 8000770:	f44f 700c 	mov.w	r0, #560	; 0x230
 8000774:	f7ff ff6e 	bl	8000654 <delay_us>
                	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 8000778:	2100      	movs	r1, #0
 800077a:	4807      	ldr	r0, [pc, #28]	; (8000798 <NEC_SendCommand+0x114>)
 800077c:	f003 f8f6 	bl	800396c <HAL_TIM_PWM_Stop>
                	    delay_us(NEC_PAUSE_1);
 8000780:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8000784:	f7ff ff66 	bl	8000654 <delay_us>

    // Opcjonalnie dodaj pauzę końcową
    delay_us(560);  // Koniec transmisji
 8000788:	f44f 700c 	mov.w	r0, #560	; 0x230
 800078c:	f7ff ff62 	bl	8000654 <delay_us>
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000094 	.word	0x20000094

0800079c <NEC_SendBit>:

// Funkcja do wysyłania pojedynczego bitu
void NEC_SendBit(uint8_t bit) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
    // Zawsze najpierw krótki impuls 560µs
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80007a6:	2100      	movs	r1, #0
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <NEC_SendBit+0x44>)
 80007aa:	f003 f82f 	bl	800380c <HAL_TIM_PWM_Start>
    delay_us(NEC_PULSE);
 80007ae:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007b2:	f7ff ff4f 	bl	8000654 <delay_us>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80007b6:	2100      	movs	r1, #0
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <NEC_SendBit+0x44>)
 80007ba:	f003 f8d7 	bl	800396c <HAL_TIM_PWM_Stop>

    // Pauza zależna od wartości bitu (bit 0 - 560µs, bit 1 - 1680µs)
    if (bit == 0) {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <NEC_SendBit+0x32>
    	delay_us(NEC_PAUSE_0);
 80007c4:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007c8:	f7ff ff44 	bl	8000654 <delay_us>
    } else {
    	delay_us(NEC_PAUSE_1);
    }
}
 80007cc:	e003      	b.n	80007d6 <NEC_SendBit+0x3a>
    	delay_us(NEC_PAUSE_1);
 80007ce:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 80007d2:	f7ff ff3f 	bl	8000654 <delay_us>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000094 	.word	0x20000094

080007e4 <HAL_TIM_IC_CaptureCallback>:
static void MX_USART1_UART_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x30>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d108      	bne.n	8000806 <HAL_TIM_IC_CaptureCallback+0x22>
  {
    switch (HAL_TIM_GetActiveChannel(&htim3))
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x30>)
 80007f6:	f003 fe67 	bl	80044c8 <HAL_TIM_GetActiveChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d104      	bne.n	800080a <HAL_TIM_IC_CaptureCallback+0x26>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 8000800:	f7ff fe9c 	bl	800053c <ir_tim_interrupt>
        break;
 8000804:	e002      	b.n	800080c <HAL_TIM_IC_CaptureCallback+0x28>
      default:
        break;
    }
  }
 8000806:	bf00      	nop
 8000808:	e000      	b.n	800080c <HAL_TIM_IC_CaptureCallback+0x28>
        break;
 800080a:	bf00      	nop
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000124 	.word	0x20000124

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0c2      	sub	sp, #264	; 0x108
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f001 f96d 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f877 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 faad 	bl	8000d84 <MX_GPIO_Init>
  MX_TIM1_Init();
 800082a:	f000 f925 	bl	8000a78 <MX_TIM1_Init>
  MX_TIM2_Init();
 800082e:	f000 f9a7 	bl	8000b80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000832:	f000 f9f1 	bl	8000c18 <MX_TIM3_Init>
  MX_SPI2_Init();
 8000836:	f000 f8e9 	bl	8000a0c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800083a:	f000 fa79 	bl	8000d30 <MX_USART1_UART_Init>
  MX_CRC_Init();
 800083e:	f000 f8d1 	bl	80009e4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  //nRF Config
  nRF24_Init(&hspi2);
 8000842:	482c      	ldr	r0, [pc, #176]	; (80008f4 <main+0xdc>)
 8000844:	f000 febc 	bl	80015c0 <nRF24_Init>
//    	nRF24_SetRXAddress(0, "Odb");
//    	nRF24_SetTXAddress("Nad");
//    	nRF24_RX_Mode();
//
  nRF24_SetRXAddress(0, "Nad");
 8000848:	492b      	ldr	r1, [pc, #172]	; (80008f8 <main+0xe0>)
 800084a:	2000      	movs	r0, #0
 800084c:	f000 fdcf 	bl	80013ee <nRF24_SetRXAddress>
      nRF24_SetTXAddress("Odb");
 8000850:	482a      	ldr	r0, [pc, #168]	; (80008fc <main+0xe4>)
 8000852:	f000 fe05 	bl	8001460 <nRF24_SetTXAddress>
      nRF24_TX_Mode();
 8000856:	f000 fbf3 	bl	8001040 <nRF24_TX_Mode>

  //IR Config
  ir_sender_init();
 800085a:	f7ff fef1 	bl	8000640 <ir_sender_init>
  ir_receiver_init();
 800085e:	f7ff fec5 	bl	80005ec <ir_receiver_init>

  HAL_Delay(200);
 8000862:	20c8      	movs	r0, #200	; 0xc8
 8000864:	f001 f9b8 	bl	8001bd8 <HAL_Delay>

       uint8_t Message[] =
 8000868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800086c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000870:	4a23      	ldr	r2, [pc, #140]	; (8000900 <main+0xe8>)
 8000872:	4618      	mov	r0, r3
 8000874:	4611      	mov	r1, r2
 8000876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800087a:	461a      	mov	r2, r3
 800087c:	f004 fe58 	bl	8005530 <memcpy>
          0x27, 0xF7, 0xED, 0x0C, 0xF5, 0x1D, 0xC1, 0x6F, 0xA4, 0x00, 0x45, 0x8A, 0x22, 0x09, 0x84, 0xD1, 0xB4, 0xB1, 0x18,
          0x44, 0x76, 0xC9, 0xD6, 0xA7, 0xC6, 0x72, 0x5B, 0x43, 0x48, 0x91, 0x85, 0xBB, 0x7F, 0xB1, 0x44, 0x73, 0x45, 0xF5,
          0x5A, 0x7E, 0x72, 0x3D, 0xA1, 0x8C, 0x43, 0xAE, 0x83, 0xD9, 0xB4, 0xCB, 0x1D, 0xDC, 0x26, 0x3F, 0x7F, 0x1E, 0xFE,
          0x83, 0x6C, 0x9A, 0x0D, 0xEA, 0xE1, 0x94, 0x55, 0xF1
        };
    			buffer_add(Message, sizeof(Message));
 8000880:	463b      	mov	r3, r7
 8000882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000886:	4618      	mov	r0, r3
 8000888:	f000 feee 	bl	8001668 <buffer_add>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(transmission_step == 0){
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <main+0xec>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d114      	bne.n	80008be <main+0xa6>
	  	  int value = ir_read();
 8000894:	f7ff feb8 	bl	8000608 <ir_read>
 8000898:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	  	  	  	  if (value != -1) {
 800089c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80008a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a4:	d00b      	beq.n	80008be <main+0xa6>
	  	  	  	    if (value == IR_CODE_ONOFF){
 80008a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80008aa:	2b0d      	cmp	r3, #13
 80008ac:	d107      	bne.n	80008be <main+0xa6>
	  	  	  	    	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b2:	4815      	ldr	r0, [pc, #84]	; (8000908 <main+0xf0>)
 80008b4:	f001 fc78 	bl	80021a8 <HAL_GPIO_TogglePin>
	  	  	  	    	transmission_step = 1;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <main+0xec>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
	  	  	  	    }
	  	  	  	  }
	  	  }
	  	  if(transmission_step == 1){
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <main+0xec>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d1e2      	bne.n	800088c <main+0x74>
	  	  	  uint32_t currentTime = HAL_GetTick();  // Pobranie aktualnego czasu w ms
 80008c6:	f001 f97d 	bl	8001bc4 <HAL_GetTick>
 80008ca:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
	  	  	  	  if ((currentTime - lastCommandTime) >= 1000) {
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <main+0xf4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008dc:	d3d6      	bcc.n	800088c <main+0x74>
	  	  	  	      NEC_SendCommand(command);           // Wysłanie komendy
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <main+0xf8>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fece 	bl	8000684 <NEC_SendCommand>
	  	  	  	      lastCommandTime = currentTime;      // Aktualizacja czasu ostatniego wysłania
 80008e8:	4a08      	ldr	r2, [pc, #32]	; (800090c <main+0xf4>)
 80008ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80008ee:	6013      	str	r3, [r2, #0]
	  if(transmission_step == 0){
 80008f0:	e7cc      	b.n	800088c <main+0x74>
 80008f2:	bf00      	nop
 80008f4:	2000003c 	.word	0x2000003c
 80008f8:	08005574 	.word	0x08005574
 80008fc:	08005578 	.word	0x08005578
 8000900:	0800557c 	.word	0x0800557c
 8000904:	200001b4 	.word	0x200001b4
 8000908:	40020800 	.word	0x40020800
 800090c:	200001b0 	.word	0x200001b0
 8000910:	20000000 	.word	0x20000000

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	; 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	2230      	movs	r2, #48	; 0x30
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f004 fe12 	bl	800554c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <SystemClock_Config+0xc8>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	4a26      	ldr	r2, [pc, #152]	; (80009dc <SystemClock_Config+0xc8>)
 8000942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <SystemClock_Config+0xc8>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <SystemClock_Config+0xcc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <SystemClock_Config+0xcc>)
 800095e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <SystemClock_Config+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	2301      	movs	r3, #1
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2310      	movs	r3, #16
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000984:	2308      	movs	r3, #8
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000990:	2304      	movs	r3, #4
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fc41 	bl	8002220 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009a4:	f000 fa78 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2103      	movs	r1, #3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fea3 	bl	8002710 <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009d0:	f000 fa62 	bl	8000e98 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3750      	adds	r7, #80	; 0x50
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_CRC_Init+0x20>)
 80009ea:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <MX_CRC_Init+0x24>)
 80009ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_CRC_Init+0x20>)
 80009f0:	f001 fa23 	bl	8001e3a <HAL_CRC_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009fa:	f000 fa4d 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000034 	.word	0x20000034
 8000a08:	40023000 	.word	0x40023000

08000a0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <MX_SPI2_Init+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a40:	2210      	movs	r2, #16
 8000a42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a58:	220a      	movs	r2, #10
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_SPI2_Init+0x64>)
 8000a5e:	f002 f835 	bl	8002acc <HAL_SPI_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a68:	f000 fa16 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000003c 	.word	0x2000003c
 8000a74:	40003800 	.word	0x40003800

08000a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b092      	sub	sp, #72	; 0x48
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f004 fd52 	bl	800554c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa8:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000aaa:	4a34      	ldr	r2, [pc, #208]	; (8000b7c <MX_TIM1_Init+0x104>)
 8000aac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aae:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2631;
 8000aba:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000abc:	f640 2247 	movw	r2, #2631	; 0xa47
 8000ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ad4:	4828      	ldr	r0, [pc, #160]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000ad6:	f002 fe49 	bl	800376c <HAL_TIM_PWM_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000ae0:	f000 f9da 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000af0:	4619      	mov	r1, r3
 8000af2:	4821      	ldr	r0, [pc, #132]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000af4:	f004 f960 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000afe:	f000 f9cb 	bl	8000e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1315;
 8000b06:	f240 5323 	movw	r3, #1315	; 0x523
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	2200      	movs	r2, #0
 8000b26:	4619      	mov	r1, r3
 8000b28:	4813      	ldr	r0, [pc, #76]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000b2a:	f003 fa99 	bl	8004060 <HAL_TIM_PWM_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000b34:	f000 f9b0 	bl	8000e98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4807      	ldr	r0, [pc, #28]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000b5c:	f004 f998 	bl	8004e90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000b66:	f000 f997 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b6a:	4803      	ldr	r0, [pc, #12]	; (8000b78 <MX_TIM1_Init+0x100>)
 8000b6c:	f000 fed2 	bl	8001914 <HAL_TIM_MspPostInit>

}
 8000b70:	bf00      	nop
 8000b72:	3748      	adds	r7, #72	; 0x48
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000094 	.word	0x20000094
 8000b7c:	40010000 	.word	0x40010000

08000b80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000ba6:	2263      	movs	r2, #99	; 0x63
 8000ba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc4:	4813      	ldr	r0, [pc, #76]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bc6:	f002 fd29 	bl	800361c <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bd0:	f000 f962 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000be2:	f003 faff 	bl	80041e4 <HAL_TIM_ConfigClockSource>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bec:	f000 f954 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_TIM2_Init+0x94>)
 8000bfe:	f004 f8db 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f000 f946 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000dc 	.word	0x200000dc

08000c18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b090      	sub	sp, #64	; 0x40
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c52:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000c54:	4a35      	ldr	r2, [pc, #212]	; (8000d2c <MX_TIM3_Init+0x114>)
 8000c56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000c58:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000c5a:	2263      	movs	r2, #99	; 0x63
 8000c5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c64:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c78:	482b      	ldr	r0, [pc, #172]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000c7a:	f002 fccf 	bl	800361c <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c84:	f000 f908 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c92:	4619      	mov	r1, r3
 8000c94:	4824      	ldr	r0, [pc, #144]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000c96:	f003 faa5 	bl	80041e4 <HAL_TIM_ConfigClockSource>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ca0:	f000 f8fa 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000ca4:	4820      	ldr	r0, [pc, #128]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000ca6:	f002 fec5 	bl	8003a34 <HAL_TIM_IC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000cb0:	f000 f8f2 	bl	8000e98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000cb8:	2340      	movs	r3, #64	; 0x40
 8000cba:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4817      	ldr	r0, [pc, #92]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000ccc:	f003 fb51 	bl	8004372 <HAL_TIM_SlaveConfigSynchro>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000cd6:	f000 f8df 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480f      	ldr	r0, [pc, #60]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000cea:	f004 f865 	bl	8004db8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000cf4:	f000 f8d0 	bl	8000e98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_TIM3_Init+0x110>)
 8000d10:	f003 f90a 	bl	8003f28 <HAL_TIM_IC_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000d1a:	f000 f8bd 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3740      	adds	r7, #64	; 0x40
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000124 	.word	0x20000124
 8000d2c:	40000400 	.word	0x40000400

08000d30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MX_USART1_UART_Init+0x50>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_USART1_UART_Init+0x4c>)
 8000d68:	f004 f8f5 	bl	8004f56 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d72:	f000 f891 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000016c 	.word	0x2000016c
 8000d80:	40011000 	.word	0x40011000

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a3a      	ldr	r2, [pc, #232]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a33      	ldr	r2, [pc, #204]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a2c      	ldr	r2, [pc, #176]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <MX_GPIO_Init+0x108>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e10:	481f      	ldr	r0, [pc, #124]	; (8000e90 <MX_GPIO_Init+0x10c>)
 8000e12:	f001 f9b1 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_NRF_Pin|CS_NRF_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2118      	movs	r1, #24
 8000e1a:	481e      	ldr	r0, [pc, #120]	; (8000e94 <MX_GPIO_Init+0x110>)
 8000e1c:	f001 f9ac 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4815      	ldr	r0, [pc, #84]	; (8000e90 <MX_GPIO_Init+0x10c>)
 8000e3a:	f001 f81b 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_NRF_Pin CS_NRF_Pin */
  GPIO_InitStruct.Pin = CE_NRF_Pin|CS_NRF_Pin;
 8000e3e:	2318      	movs	r3, #24
 8000e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <MX_GPIO_Init+0x110>)
 8000e56:	f001 f80d 	bl	8001e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_NRF_Pin */
  GPIO_InitStruct.Pin = IRQ_NRF_Pin;
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_NRF_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_GPIO_Init+0x110>)
 8000e70:	f001 f800 	bl	8001e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2017      	movs	r0, #23
 8000e7a:	f000 ffa8 	bl	8001dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e7e:	2017      	movs	r0, #23
 8000e80:	f000 ffc1 	bl	8001e06 <HAL_NVIC_EnableIRQ>

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020800 	.word	0x40020800
 8000e94:	40020400 	.word	0x40020400

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <Error_Handler+0x8>

08000ea2 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f000 fe93 	bl	8001bd8 <HAL_Delay>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <nRF24_SendSpi+0x28>)
 8000eca:	6818      	ldr	r0, [r3, #0]
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	f001 fe82 	bl	8002bde <HAL_SPI_Transmit>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200001b8 	.word	0x200001b8

08000ee8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <nRF24_ReadSpi+0x28>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	f001 ffa8 	bl	8002e56 <HAL_SPI_Receive>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001b8 	.word	0x200001b8

08000f14 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000f22:	2200      	movs	r2, #0
 8000f24:	2110      	movs	r1, #16
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <nRF24_ReadRegister+0x44>)
 8000f28:	f001 f926 	bl	8002178 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8000f2c:	1dfb      	adds	r3, r7, #7
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ffc3 	bl	8000ebc <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8000f36:	f107 030f 	add.w	r3, r7, #15
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffd3 	bl	8000ee8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8000f42:	2201      	movs	r2, #1
 8000f44:	2110      	movs	r1, #16
 8000f46:	4804      	ldr	r0, [pc, #16]	; (8000f58 <nRF24_ReadRegister+0x44>)
 8000f48:	f001 f916 	bl	8002178 <HAL_GPIO_WritePin>

	return result;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020400 	.word	0x40020400

08000f5c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <nRF24_ReadRegisters+0x44>)
 8000f76:	f001 f8ff 	bl	8002178 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff9c 	bl	8000ebc <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	4619      	mov	r1, r3
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f7ff ffad 	bl	8000ee8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2110      	movs	r1, #16
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <nRF24_ReadRegisters+0x44>)
 8000f94:	f001 f8f0 	bl	8002178 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f043 0320 	orr.w	r3, r3, #32
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	4809      	ldr	r0, [pc, #36]	; (8000fec <nRF24_WriteRegister+0x48>)
 8000fc8:	f001 f8d6 	bl	8002178 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff72 	bl	8000ebc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2110      	movs	r1, #16
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <nRF24_WriteRegister+0x48>)
 8000fde:	f001 f8cb 	bl	8002178 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020400 	.word	0x40020400

08000ff0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	b2db      	uxtb	r3, r3
 8001008:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800100a:	2200      	movs	r2, #0
 800100c:	2110      	movs	r1, #16
 800100e:	480b      	ldr	r0, [pc, #44]	; (800103c <nRF24_WriteRegisters+0x4c>)
 8001010:	f001 f8b2 	bl	8002178 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	2101      	movs	r1, #1
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff4f 	bl	8000ebc <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	4619      	mov	r1, r3
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	f7ff ff4a 	bl	8000ebc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001028:	2201      	movs	r2, #1
 800102a:	2110      	movs	r1, #16
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <nRF24_WriteRegisters+0x4c>)
 800102e:	f001 f8a3 	bl	8002178 <HAL_GPIO_WritePin>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40020400 	.word	0x40020400

08001040 <nRF24_TX_Mode>:
	NRF24_CE_HIGH;
	nRF24_Delay(1);
}

void nRF24_TX_Mode(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001046:	2200      	movs	r2, #0
 8001048:	2108      	movs	r1, #8
 800104a:	4810      	ldr	r0, [pc, #64]	; (800108c <nRF24_TX_Mode+0x4c>)
 800104c:	f001 f894 	bl	8002178 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001050:	f000 f81e 	bl	8001090 <nRF24_ReadConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f023 0301 	bic.w	r3, r3, #1
 8001066:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f818 	bl	80010a0 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001070:	2070      	movs	r0, #112	; 0x70
 8001072:	f000 f870 	bl	8001156 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001076:	f000 f87d 	bl	8001174 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 800107a:	f000 f895 	bl	80011a8 <nRF24_FlushTX>

	nRF24_Delay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff ff0f 	bl	8000ea2 <nRF24_Delay>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40020400 	.word	0x40020400

08001090 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff ff3d 	bl	8000f14 <nRF24_ReadRegister>
 800109a:	4603      	mov	r3, r0
}
 800109c:	4618      	mov	r0, r3
 800109e:	bd80      	pop	{r7, pc}

080010a0 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4619      	mov	r1, r3
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff ff78 	bl	8000fa4 <nRF24_WriteRegister>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80010c6:	2006      	movs	r0, #6
 80010c8:	f7ff ff24 	bl	8000f14 <nRF24_ReadRegister>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f023 0307 	bic.w	r3, r3, #7
 80010d6:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	b25a      	sxtb	r2, r3
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	4619      	mov	r1, r3
 80010ec:	2006      	movs	r0, #6
 80010ee:	f7ff ff59 	bl	8000fa4 <nRF24_WriteRegister>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001104:	2006      	movs	r0, #6
 8001106:	f7ff ff05 	bl	8000f14 <nRF24_ReadRegister>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001114:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d104      	bne.n	8001126 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	f043 0320 	orr.w	r3, r3, #32
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e006      	b.n	8001134 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d103      	bne.n	8001134 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	4619      	mov	r1, r3
 8001138:	2006      	movs	r0, #6
 800113a:	f7ff ff33 	bl	8000fa4 <nRF24_WriteRegister>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800114a:	2007      	movs	r0, #7
 800114c:	f7ff fee2 	bl	8000f14 <nRF24_ReadRegister>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	bd80      	pop	{r7, pc}

08001156 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	4619      	mov	r1, r3
 8001164:	2007      	movs	r0, #7
 8001166:	f7ff ff1d 	bl	8000fa4 <nRF24_WriteRegister>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800117a:	23e2      	movs	r3, #226	; 0xe2
 800117c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800117e:	2200      	movs	r2, #0
 8001180:	2110      	movs	r1, #16
 8001182:	4808      	ldr	r0, [pc, #32]	; (80011a4 <nRF24_FlushRX+0x30>)
 8001184:	f000 fff8 	bl	8002178 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	2101      	movs	r1, #1
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fe95 	bl	8000ebc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001192:	2201      	movs	r2, #1
 8001194:	2110      	movs	r1, #16
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <nRF24_FlushRX+0x30>)
 8001198:	f000 ffee 	bl	8002178 <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40020400 	.word	0x40020400

080011a8 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80011ae:	23e1      	movs	r3, #225	; 0xe1
 80011b0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80011b2:	2200      	movs	r2, #0
 80011b4:	2110      	movs	r1, #16
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <nRF24_FlushTX+0x30>)
 80011b8:	f000 ffde 	bl	8002178 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	2101      	movs	r1, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe7b 	bl	8000ebc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80011c6:	2201      	movs	r2, #1
 80011c8:	2110      	movs	r1, #16
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <nRF24_FlushTX+0x30>)
 80011cc:	f000 ffd4 	bl	8002178 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020400 	.word	0x40020400

080011dc <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80011e6:	f7ff ff53 	bl	8001090 <nRF24_ReadConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e003      	b.n	8001206 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	f023 0308 	bic.w	r3, r3, #8
 8001204:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff49 	bl	80010a0 <nRF24_WriteConfig>
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001220:	f7ff ff36 	bl	8001090 <nRF24_ReadConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d104      	bne.n	8001238 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e003      	b.n	8001240 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	f023 0304 	bic.w	r3, r3, #4
 800123e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff2c 	bl	80010a0 <nRF24_WriteConfig>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	b25a      	sxtb	r2, r3
 8001266:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4619      	mov	r1, r3
 8001278:	2004      	movs	r0, #4
 800127a:	f7ff fe93 	bl	8000fa4 <nRF24_WriteRegister>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	2005      	movs	r0, #5
 800129c:	f7ff fe82 	bl	8000fa4 <nRF24_WriteRegister>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d901      	bls.n	80012c2 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80012be:	2305      	movs	r3, #5
 80012c0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	3311      	adds	r3, #17
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	4610      	mov	r0, r2
 80012d4:	f7ff fe66 	bl	8000fa4 <nRF24_WriteRegister>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d901      	bls.n	80012fa <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80012f6:	2305      	movs	r3, #5
 80012f8:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80012fa:	2002      	movs	r0, #2
 80012fc:	f7ff fe0a 	bl	8000f14 <nRF24_ReadRegister>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10a      	bne.n	8001320 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2201      	movs	r2, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	b25a      	sxtb	r2, r3
 8001314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001318:	4313      	orrs	r3, r2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e00b      	b.n	8001338 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2201      	movs	r2, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	b25b      	sxtb	r3, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	b25a      	sxtb	r2, r3
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4013      	ands	r3, r2
 8001334:	b25b      	sxtb	r3, r3
 8001336:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	4619      	mov	r1, r3
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff fe31 	bl	8000fa4 <nRF24_WriteRegister>
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	460a      	mov	r2, r1
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	4613      	mov	r3, r2
 8001358:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b05      	cmp	r3, #5
 800135e:	d901      	bls.n	8001364 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001360:	2305      	movs	r3, #5
 8001362:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff fdd5 	bl	8000f14 <nRF24_ReadRegister>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d10a      	bne.n	800138a <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2201      	movs	r2, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	b25a      	sxtb	r2, r3
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4313      	orrs	r3, r2
 8001384:	b25b      	sxtb	r3, r3
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e00b      	b.n	80013a2 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2201      	movs	r2, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	b25b      	sxtb	r3, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	b25a      	sxtb	r2, r3
 8001398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139c:	4013      	ands	r3, r2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4619      	mov	r1, r3
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff fdfc 	bl	8000fa4 <nRF24_WriteRegister>
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d901      	bls.n	80013c8 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80013c4:	2305      	movs	r3, #5
 80013c6:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d801      	bhi.n	80013d2 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80013ce:	2303      	movs	r3, #3
 80013d0:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	3b02      	subs	r3, #2
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	2003      	movs	r0, #3
 80013e2:	f7ff fddf 	bl	8000fa4 <nRF24_WriteRegister>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b084      	sub	sp, #16
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	6039      	str	r1, [r7, #0]
 80013f8:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <nRF24_SetRXAddress+0x18>
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d11d      	bne.n	8001442 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e00d      	b.n	8001428 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	441a      	add	r2, r3
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	f1c3 0302 	rsb	r3, r3, #2
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	3310      	adds	r3, #16
 800141c:	443b      	add	r3, r7
 800141e:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	3301      	adds	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d9ee      	bls.n	800140c <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	330a      	adds	r3, #10
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f107 010c 	add.w	r1, r7, #12
 8001438:	2203      	movs	r2, #3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fdd8 	bl	8000ff0 <nRF24_WriteRegisters>
	{
 8001440:	e00a      	b.n	8001458 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	330a      	adds	r3, #10
 8001446:	b2da      	uxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	3302      	adds	r3, #2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	4610      	mov	r0, r2
 8001452:	f7ff fda7 	bl	8000fa4 <nRF24_WriteRegister>
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	2203      	movs	r2, #3
 800146e:	4619      	mov	r1, r3
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff fd73 	bl	8000f5c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
 800147a:	e00c      	b.n	8001496 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	f1c3 0302 	rsb	r3, r3, #2
 8001484:	3210      	adds	r2, #16
 8001486:	443a      	add	r2, r7
 8001488:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 800148c:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <nRF24_SetTXAddress+0x88>)
 800148e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3301      	adds	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d9ef      	bls.n	800147c <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e00d      	b.n	80014be <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	441a      	add	r2, r3
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	f1c3 0302 	rsb	r3, r3, #2
 80014ae:	7812      	ldrb	r2, [r2, #0]
 80014b0:	3310      	adds	r3, #16
 80014b2:	443b      	add	r3, r7
 80014b4:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	3301      	adds	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d9ee      	bls.n	80014a2 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2203      	movs	r2, #3
 80014ca:	4619      	mov	r1, r3
 80014cc:	200a      	movs	r0, #10
 80014ce:	f7ff fd8f 	bl	8000ff0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	2203      	movs	r2, #3
 80014d8:	4619      	mov	r1, r3
 80014da:	2010      	movs	r0, #16
 80014dc:	f7ff fd88 	bl	8000ff0 <nRF24_WriteRegisters>

}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200001bc 	.word	0x200001bc

080014ec <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80014f2:	f7ff fe28 	bl	8001146 <nRF24_ReadStatus>
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001500:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fe26 	bl	8001156 <nRF24_WriteStatus>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800151c:	f7ff fdb8 	bl	8001090 <nRF24_ReadConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d104      	bne.n	8001534 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	e003      	b.n	800153c <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800153a:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fdae 	bl	80010a0 <nRF24_WriteConfig>
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001556:	f7ff fd9b 	bl	8001090 <nRF24_ReadConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d104      	bne.n	800156e <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	f043 0320 	orr.w	r3, r3, #32
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e003      	b.n	8001576 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	f023 0320 	bic.w	r3, r3, #32
 8001574:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fd91 	bl	80010a0 <nRF24_WriteConfig>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001590:	f7ff fd7e 	bl	8001090 <nRF24_ReadConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d104      	bne.n	80015a8 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	f043 0310 	orr.w	r3, r3, #16
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e003      	b.n	80015b0 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	f023 0310 	bic.w	r3, r3, #16
 80015ae:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fd74 	bl	80010a0 <nRF24_WriteConfig>
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80015c8:	4a25      	ldr	r2, [pc, #148]	; (8001660 <nRF24_Init+0xa0>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80015ce:	2200      	movs	r2, #0
 80015d0:	2108      	movs	r1, #8
 80015d2:	4824      	ldr	r0, [pc, #144]	; (8001664 <nRF24_Init+0xa4>)
 80015d4:	f000 fdd0 	bl	8002178 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80015d8:	2201      	movs	r2, #1
 80015da:	2110      	movs	r1, #16
 80015dc:	4821      	ldr	r0, [pc, #132]	; (8001664 <nRF24_Init+0xa4>)
 80015de:	f000 fdcb 	bl	8002178 <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 80015e2:	2005      	movs	r0, #5
 80015e4:	f7ff fc5d 	bl	8000ea2 <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80015e8:	2003      	movs	r0, #3
 80015ea:	f7ff fd67 	bl	80010bc <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 80015ee:	2002      	movs	r0, #2
 80015f0:	f7ff fd83 	bl	80010fa <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fdf1 	bl	80011dc <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fe0b 	bl	8001216 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 8001600:	2107      	movs	r1, #7
 8001602:	2004      	movs	r0, #4
 8001604:	f7ff fe24 	bl	8001250 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8001608:	2100      	movs	r1, #0
 800160a:	201c      	movs	r0, #28
 800160c:	f7ff fcca 	bl	8000fa4 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 8001610:	200a      	movs	r0, #10
 8001612:	f7ff fe38 	bl	8001286 <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8001616:	2120      	movs	r1, #32
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fe45 	bl	80012a8 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800161e:	2101      	movs	r1, #1
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fe5d 	bl	80012e0 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8001626:	2101      	movs	r1, #1
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff fe8e 	bl	800134a <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800162e:	2003      	movs	r0, #3
 8001630:	f7ff fec0 	bl	80013b4 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 8001634:	2014      	movs	r0, #20
 8001636:	f7ff fc34 	bl	8000ea2 <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff ff69 	bl	8001512 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff ff83 	bl	800154c <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff ff9d 	bl	8001586 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 800164c:	2014      	movs	r0, #20
 800164e:	f7ff fc28 	bl	8000ea2 <nRF24_Delay>

	nRF24_ClearInterrupts();
 8001652:	f7ff ff4b 	bl	80014ec <nRF24_ClearInterrupts>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200001b8 	.word	0x200001b8
 8001664:	40020400 	.word	0x40020400

08001668 <buffer_add>:
uint32_t tx_size = 0;                 // Size of the message to transmit
uint32_t PackageTimer;				//send delay time

//TRANSMISSION
// Add data to the ring buffer
void buffer_add(uint8_t* data, uint16_t length) {
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	81fb      	strh	r3, [r7, #14]
 8001678:	e020      	b.n	80016bc <buffer_add+0x54>
        tx_ring_buffer[tx_head] = data[i];
 800167a:	89fb      	ldrh	r3, [r7, #14]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <buffer_add+0x68>)
 8001682:	8812      	ldrh	r2, [r2, #0]
 8001684:	7819      	ldrb	r1, [r3, #0]
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <buffer_add+0x6c>)
 8001688:	5499      	strb	r1, [r3, r2]
        tx_head = (tx_head + 1) % BUFFER_SIZE;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <buffer_add+0x68>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <buffer_add+0x70>)
 8001692:	fb82 1203 	smull	r1, r2, r2, r3
 8001696:	1191      	asrs	r1, r2, #6
 8001698:	17da      	asrs	r2, r3, #31
 800169a:	1a8a      	subs	r2, r1, r2
 800169c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016a0:	fb01 f202 	mul.w	r2, r1, r2
 80016a4:	1a9a      	subs	r2, r3, r2
 80016a6:	b292      	uxth	r2, r2
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <buffer_add+0x68>)
 80016aa:	801a      	strh	r2, [r3, #0]
        tx_size++;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <buffer_add+0x74>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <buffer_add+0x74>)
 80016b4:	6013      	str	r3, [r2, #0]
    for (uint16_t i = 0; i < length; i++) {
 80016b6:	89fb      	ldrh	r3, [r7, #14]
 80016b8:	3301      	adds	r3, #1
 80016ba:	81fb      	strh	r3, [r7, #14]
 80016bc:	89fa      	ldrh	r2, [r7, #14]
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3da      	bcc.n	800167a <buffer_add+0x12>
    }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	200005a8 	.word	0x200005a8
 80016d4:	200001c0 	.word	0x200001c0
 80016d8:	10624dd3 	.word	0x10624dd3
 80016dc:	200005ac 	.word	0x200005ac

080016e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x48>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x48>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x48>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_MspInit+0x48>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_MspInit+0x48>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_MspInit+0x48>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_CRC_MspInit+0x38>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d10d      	bne.n	800175a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_CRC_MspInit+0x3c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_CRC_MspInit+0x3c>)
 8001748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_CRC_MspInit+0x3c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40023000 	.word	0x40023000
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_SPI_MspInit+0x84>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12c      	bne.n	80017e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a10      	ldr	r2, [pc, #64]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_SPI_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80017c6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80017ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017d8:	2305      	movs	r3, #5
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <HAL_SPI_MspInit+0x8c>)
 80017e4:	f000 fb46 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40003800 	.word	0x40003800
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020400 	.word	0x40020400

080017fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <HAL_TIM_PWM_MspInit+0x38>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d10d      	bne.n	800182a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_TIM_PWM_MspInit+0x3c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_TIM_PWM_MspInit+0x3c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_TIM_PWM_MspInit+0x3c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	40010000 	.word	0x40010000
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185c:	d116      	bne.n	800188c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <HAL_TIM_Base_MspInit+0xcc>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a28      	ldr	r2, [pc, #160]	; (8001908 <HAL_TIM_Base_MspInit+0xcc>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <HAL_TIM_Base_MspInit+0xcc>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	201c      	movs	r0, #28
 8001880:	f000 faa5 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001884:	201c      	movs	r0, #28
 8001886:	f000 fabe 	bl	8001e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800188a:	e038      	b.n	80018fe <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1e      	ldr	r2, [pc, #120]	; (800190c <HAL_TIM_Base_MspInit+0xd0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d133      	bne.n	80018fe <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_TIM_Base_MspInit+0xcc>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_TIM_Base_MspInit+0xcc>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <HAL_TIM_Base_MspInit+0xcc>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_TIM_Base_MspInit+0xcc>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <HAL_TIM_Base_MspInit+0xcc>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_TIM_Base_MspInit+0xcc>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ce:	2340      	movs	r3, #64	; 0x40
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018de:	2302      	movs	r3, #2
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	4809      	ldr	r0, [pc, #36]	; (8001910 <HAL_TIM_Base_MspInit+0xd4>)
 80018ea:	f000 fac3 	bl	8001e74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	201d      	movs	r0, #29
 80018f4:	f000 fa6b 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f8:	201d      	movs	r0, #29
 80018fa:	f000 fa84 	bl	8001e06 <HAL_NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3728      	adds	r7, #40	; 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40000400 	.word	0x40000400
 8001910:	40020000 	.word	0x40020000

08001914 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <HAL_TIM_MspPostInit+0x68>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d11e      	bne.n	8001974 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_TIM_MspPostInit+0x6c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_TIM_MspPostInit+0x6c>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_TIM_MspPostInit+0x6c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001956:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001964:	2301      	movs	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <HAL_TIM_MspPostInit+0x70>)
 8001970:	f000 fa80 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001974:	bf00      	nop
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40010000 	.word	0x40010000
 8001980:	40023800 	.word	0x40023800
 8001984:	40020000 	.word	0x40020000

08001988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_UART_MspInit+0x84>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12c      	bne.n	8001a04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019b4:	f043 0310 	orr.w	r3, r3, #16
 80019b8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_UART_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f4:	2307      	movs	r3, #7
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <HAL_UART_MspInit+0x8c>)
 8001a00:	f000 fa38 	bl	8001e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40011000 	.word	0x40011000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5e:	f000 f89f 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_NRF_Pin);
 8001a6a:	2020      	movs	r0, #32
 8001a6c:	f000 fbb6 	bl	80021dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <TIM2_IRQHandler+0x10>)
 8001a7a:	f002 f94d 	bl	8003d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200000dc 	.word	0x200000dc

08001a88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <TIM3_IRQHandler+0x10>)
 8001a8e:	f002 f943 	bl	8003d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000124 	.word	0x20000124

08001a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aae:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac4:	4c0b      	ldr	r4, [pc, #44]	; (8001af4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ad2:	f7ff ffe3 	bl	8001a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f003 fd07 	bl	80054e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ada:	f7fe fe9d 	bl	8000818 <main>
  bx  lr    
 8001ade:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001aec:	080056a4 	.word	0x080056a4
  ldr r2, =_sbss
 8001af0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001af4:	200005b4 	.word	0x200005b4

08001af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC_IRQHandler>
	...

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <HAL_Init+0x40>)
 8001b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_Init+0x40>)
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_Init+0x40>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f000 f947 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2a:	200f      	movs	r0, #15
 8001b2c:	f000 f808 	bl	8001b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b30:	f7ff fdd6 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023c00 	.word	0x40023c00

08001b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x54>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_InitTick+0x58>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f95f 	bl	8001e22 <HAL_SYSTICK_Config>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00e      	b.n	8001b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d80a      	bhi.n	8001b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f000 f927 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b80:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <HAL_InitTick+0x5c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000004 	.word	0x20000004
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_IncTick+0x1c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_IncTick+0x20>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a03      	ldr	r2, [pc, #12]	; (8001bc0 <HAL_IncTick+0x20>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	2000000c 	.word	0x2000000c
 8001bc0:	200005b0 	.word	0x200005b0

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b02      	ldr	r3, [pc, #8]	; (8001bd4 <HAL_GetTick+0x10>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	200005b0 	.word	0x200005b0

08001bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be0:	f7ff fff0 	bl	8001bc4 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf0:	d005      	beq.n	8001bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_Delay+0x44>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bfe:	bf00      	nop
 8001c00:	f7ff ffe0 	bl	8001bc4 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8f7      	bhi.n	8001c00 <HAL_Delay+0x28>
  {
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000000c 	.word	0x2000000c

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4906      	ldr	r1, [pc, #24]	; (8001cb8 <__NVIC_EnableIRQ+0x34>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	; (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff90 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff2d 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff42 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff90 	bl	8001d10 <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5f 	bl	8001cbc <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff35 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffa2 	bl	8001d74 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e00e      	b.n	8001e6a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	795b      	ldrb	r3, [r3, #5]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fc65 	bl	800172c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e159      	b.n	8002144 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e90:	2201      	movs	r2, #1
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8148 	bne.w	800213e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d005      	beq.n	8001ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d130      	bne.n	8001f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 0201 	and.w	r2, r3, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d017      	beq.n	8001f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d123      	bne.n	8001fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	08da      	lsrs	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3208      	adds	r2, #8
 8001fb2:	69b9      	ldr	r1, [r7, #24]
 8001fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0203 	and.w	r2, r3, #3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a2 	beq.w	800213e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_GPIO_Init+0x2e4>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a55      	ldr	r2, [pc, #340]	; (8002158 <HAL_GPIO_Init+0x2e4>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_GPIO_Init+0x2e4>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002016:	4a51      	ldr	r2, [pc, #324]	; (800215c <HAL_GPIO_Init+0x2e8>)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a48      	ldr	r2, [pc, #288]	; (8002160 <HAL_GPIO_Init+0x2ec>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x202>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a47      	ldr	r2, [pc, #284]	; (8002164 <HAL_GPIO_Init+0x2f0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x1fe>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a46      	ldr	r2, [pc, #280]	; (8002168 <HAL_GPIO_Init+0x2f4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x1fa>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a45      	ldr	r2, [pc, #276]	; (800216c <HAL_GPIO_Init+0x2f8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x1f6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a44      	ldr	r2, [pc, #272]	; (8002170 <HAL_GPIO_Init+0x2fc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x1f2>
 8002062:	2304      	movs	r3, #4
 8002064:	e008      	b.n	8002078 <HAL_GPIO_Init+0x204>
 8002066:	2307      	movs	r3, #7
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x204>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <HAL_GPIO_Init+0x204>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <HAL_GPIO_Init+0x204>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x204>
 8002076:	2300      	movs	r3, #0
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	4093      	lsls	r3, r2
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002088:	4934      	ldr	r1, [pc, #208]	; (800215c <HAL_GPIO_Init+0x2e8>)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ba:	4a2e      	ldr	r2, [pc, #184]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e4:	4a23      	ldr	r2, [pc, #140]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_GPIO_Init+0x300>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210e:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_GPIO_Init+0x300>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <HAL_GPIO_Init+0x300>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	f67f aea2 	bls.w	8001e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40023800 	.word	0x40023800
 800215c:	40013800 	.word	0x40013800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	041a      	lsls	r2, r3, #16
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43d9      	mvns	r1, r3
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	400b      	ands	r3, r1
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f2:	4a05      	ldr	r2, [pc, #20]	; (8002208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f806 	bl	800220c <HAL_GPIO_EXTI_Callback>
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40013c00 	.word	0x40013c00

0800220c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr

08002220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e267      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d075      	beq.n	800232a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223e:	4b88      	ldr	r3, [pc, #544]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d00c      	beq.n	8002264 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224a:	4b85      	ldr	r3, [pc, #532]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002252:	2b08      	cmp	r3, #8
 8002254:	d112      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800225e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002262:	d10b      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	4b7e      	ldr	r3, [pc, #504]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d05b      	beq.n	8002328 <HAL_RCC_OscConfig+0x108>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d157      	bne.n	8002328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e242      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x74>
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a75      	ldr	r2, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e01d      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x98>
 800229e:	4b70      	ldr	r3, [pc, #448]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6f      	ldr	r2, [pc, #444]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6c      	ldr	r2, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 80022b8:	4b69      	ldr	r3, [pc, #420]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a68      	ldr	r2, [pc, #416]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b66      	ldr	r3, [pc, #408]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a65      	ldr	r2, [pc, #404]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff fc74 	bl	8001bc4 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e0:	f7ff fc70 	bl	8001bc4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e207      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b5b      	ldr	r3, [pc, #364]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xc0>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7ff fc60 	bl	8001bc4 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7ff fc5c 	bl	8001bc4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1f3      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0xe8>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d063      	beq.n	80023fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002336:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234a:	2b08      	cmp	r3, #8
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1c7      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4937      	ldr	r1, [pc, #220]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	e03a      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002390:	4b34      	ldr	r3, [pc, #208]	; (8002464 <HAL_RCC_OscConfig+0x244>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff fc15 	bl	8001bc4 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239e:	f7ff fc11 	bl	8001bc4 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1a8      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b28      	ldr	r3, [pc, #160]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4925      	ldr	r1, [pc, #148]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_RCC_OscConfig+0x244>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff fbf4 	bl	8001bc4 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e0:	f7ff fbf0 	bl	8001bc4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e187      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d036      	beq.n	8002478 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <HAL_RCC_OscConfig+0x248>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff fbd4 	bl	8001bc4 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002420:	f7ff fbd0 	bl	8001bc4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e167      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_OscConfig+0x240>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x200>
 800243e:	e01b      	b.n	8002478 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_OscConfig+0x248>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff fbbd 	bl	8001bc4 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	e00e      	b.n	800246c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff fbb9 	bl	8001bc4 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d907      	bls.n	800246c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e150      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002460:	40023800 	.word	0x40023800
 8002464:	42470000 	.word	0x42470000
 8002468:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	4b88      	ldr	r3, [pc, #544]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ea      	bne.n	800244e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8097 	beq.w	80025b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b81      	ldr	r3, [pc, #516]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b7d      	ldr	r3, [pc, #500]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a7c      	ldr	r2, [pc, #496]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b7a      	ldr	r3, [pc, #488]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b77      	ldr	r3, [pc, #476]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b74      	ldr	r3, [pc, #464]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a73      	ldr	r2, [pc, #460]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fb79 	bl	8001bc4 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7ff fb75 	bl	8001bc4 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e10c      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_OscConfig+0x474>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x2ea>
 80024fc:	4b64      	ldr	r3, [pc, #400]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	4a63      	ldr	r2, [pc, #396]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	; 0x70
 8002508:	e01c      	b.n	8002544 <HAL_RCC_OscConfig+0x324>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b05      	cmp	r3, #5
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x30c>
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	4a5e      	ldr	r2, [pc, #376]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6713      	str	r3, [r2, #112]	; 0x70
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6713      	str	r3, [r2, #112]	; 0x70
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0x324>
 800252c:	4b58      	ldr	r3, [pc, #352]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a57      	ldr	r2, [pc, #348]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	4b55      	ldr	r3, [pc, #340]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	4a54      	ldr	r2, [pc, #336]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d015      	beq.n	8002578 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7ff fb3a 	bl	8001bc4 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	e00a      	b.n	800256a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7ff fb36 	bl	8001bc4 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0cb      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0ee      	beq.n	8002554 <HAL_RCC_OscConfig+0x334>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7ff fb24 	bl	8001bc4 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257e:	e00a      	b.n	8002596 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7ff fb20 	bl	8001bc4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e0b5      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002596:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ee      	bne.n	8002580 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	4a38      	ldr	r2, [pc, #224]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a1 	beq.w	8002700 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d05c      	beq.n	8002684 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d141      	bne.n	8002656 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <HAL_RCC_OscConfig+0x478>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff faf4 	bl	8001bc4 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7ff faf0 	bl	8001bc4 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e087      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	019b      	lsls	r3, r3, #6
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	491b      	ldr	r1, [pc, #108]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x478>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7ff fac9 	bl	8001bc4 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002636:	f7ff fac5 	bl	8001bc4 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e05c      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x416>
 8002654:	e054      	b.n	8002700 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCC_OscConfig+0x478>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff fab2 	bl	8001bc4 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7ff faae 	bl	8001bc4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e045      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_OscConfig+0x470>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x444>
 8002682:	e03d      	b.n	8002700 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e038      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000
 8002698:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x4ec>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d028      	beq.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d121      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d11a      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d111      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0cc      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d90c      	bls.n	800274c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d044      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e067      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4934      	ldr	r1, [pc, #208]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7ff f9e0 	bl	8001bc4 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7ff f9dc 	bl	8001bc4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e04f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d20c      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f942 	bl	8001b40 <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	0800567c 	.word	0x0800567c
 80028d4:	20000004 	.word	0x20000004
 80028d8:	20000008 	.word	0x20000008

080028dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e0:	b090      	sub	sp, #64	; 0x40
 80028e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
 80028e8:	2300      	movs	r3, #0
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ec:	2300      	movs	r3, #0
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f4:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d00d      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x40>
 8002900:	2b08      	cmp	r3, #8
 8002902:	f200 80a2 	bhi.w	8002a4a <HAL_RCC_GetSysClockFreq+0x16e>
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x34>
 800290a:	2b04      	cmp	r3, #4
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x3a>
 800290e:	e09c      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002914:	e09c      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002916:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002918:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800291a:	e099      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002926:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d027      	beq.n	8002982 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002932:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	2200      	movs	r2, #0
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	627a      	str	r2, [r7, #36]	; 0x24
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002944:	2100      	movs	r1, #0
 8002946:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002948:	fb03 f201 	mul.w	r2, r3, r1
 800294c:	2300      	movs	r3, #0
 800294e:	fb00 f303 	mul.w	r3, r0, r3
 8002952:	4413      	add	r3, r2
 8002954:	4a43      	ldr	r2, [pc, #268]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002956:	fba0 2102 	umull	r2, r1, r0, r2
 800295a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800295c:	62ba      	str	r2, [r7, #40]	; 0x28
 800295e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002960:	4413      	add	r3, r2
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002966:	2200      	movs	r2, #0
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	61fa      	str	r2, [r7, #28]
 800296c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002970:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002974:	f7fd fc30 	bl	80001d8 <__aeabi_uldivmod>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4613      	mov	r3, r2
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002980:	e055      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002982:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	099b      	lsrs	r3, r3, #6
 8002988:	2200      	movs	r2, #0
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	617a      	str	r2, [r7, #20]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002994:	f04f 0b00 	mov.w	fp, #0
 8002998:	4652      	mov	r2, sl
 800299a:	465b      	mov	r3, fp
 800299c:	f04f 0000 	mov.w	r0, #0
 80029a0:	f04f 0100 	mov.w	r1, #0
 80029a4:	0159      	lsls	r1, r3, #5
 80029a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029aa:	0150      	lsls	r0, r2, #5
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	ebb2 080a 	subs.w	r8, r2, sl
 80029b4:	eb63 090b 	sbc.w	r9, r3, fp
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029c4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029c8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029cc:	ebb2 0408 	subs.w	r4, r2, r8
 80029d0:	eb63 0509 	sbc.w	r5, r3, r9
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	00eb      	lsls	r3, r5, #3
 80029de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e2:	00e2      	lsls	r2, r4, #3
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	eb14 030a 	adds.w	r3, r4, sl
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	eb45 030b 	adc.w	r3, r5, fp
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a00:	4629      	mov	r1, r5
 8002a02:	028b      	lsls	r3, r1, #10
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	4604      	mov	r4, r0
 8002a0a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002a0e:	4601      	mov	r1, r0
 8002a10:	028a      	lsls	r2, r1, #10
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a18:	2200      	movs	r2, #0
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	60fa      	str	r2, [r7, #12]
 8002a1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a22:	f7fd fbd9 	bl	80001d8 <__aeabi_uldivmod>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0c1b      	lsrs	r3, r3, #16
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a48:	e002      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3740      	adds	r7, #64	; 0x40
 8002a56:	46bd      	mov	sp, r7
 8002a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	017d7840 	.word	0x017d7840

08002a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a80:	f7ff fff2 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0a9b      	lsrs	r3, r3, #10
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	0800568c 	.word	0x0800568c

08002aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aa8:	f7ff ffde 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0b5b      	lsrs	r3, r3, #13
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4903      	ldr	r1, [pc, #12]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	0800568c 	.word	0x0800568c

08002acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07b      	b.n	8002bd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d108      	bne.n	8002af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aee:	d009      	beq.n	8002b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
 8002af6:	e005      	b.n	8002b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe fe24 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	ea42 0103 	orr.w	r1, r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	f003 0104 	and.w	r1, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	f003 0210 	and.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b088      	sub	sp, #32
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_SPI_Transmit+0x22>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e126      	b.n	8002e4e <HAL_SPI_Transmit+0x270>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c08:	f7fe ffdc 	bl	8001bc4 <HAL_GetTick>
 8002c0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d002      	beq.n	8002c24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c22:	e10b      	b.n	8002e3c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Transmit+0x52>
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c34:	e102      	b.n	8002e3c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	88fa      	ldrh	r2, [r7, #6]
 8002c4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7c:	d10f      	bne.n	8002c9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d007      	beq.n	8002cbc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc4:	d14b      	bne.n	8002d5e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_SPI_Transmit+0xf6>
 8002cce:	8afb      	ldrh	r3, [r7, #22]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d13e      	bne.n	8002d52 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	881a      	ldrh	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	1c9a      	adds	r2, r3, #2
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cf8:	e02b      	b.n	8002d52 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d112      	bne.n	8002d2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d2c:	e011      	b.n	8002d52 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2e:	f7fe ff49 	bl	8001bc4 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d803      	bhi.n	8002d46 <HAL_SPI_Transmit+0x168>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d102      	bne.n	8002d4c <HAL_SPI_Transmit+0x16e>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d50:	e074      	b.n	8002e3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ce      	bne.n	8002cfa <HAL_SPI_Transmit+0x11c>
 8002d5c:	e04c      	b.n	8002df8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_SPI_Transmit+0x18e>
 8002d66:	8afb      	ldrh	r3, [r7, #22]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d140      	bne.n	8002dee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	330c      	adds	r3, #12
 8002d76:	7812      	ldrb	r2, [r2, #0]
 8002d78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d92:	e02c      	b.n	8002dee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d113      	bne.n	8002dca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dc8:	e011      	b.n	8002dee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dca:	f7fe fefb 	bl	8001bc4 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d803      	bhi.n	8002de2 <HAL_SPI_Transmit+0x204>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d102      	bne.n	8002de8 <HAL_SPI_Transmit+0x20a>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dec:	e026      	b.n	8002e3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1cd      	bne.n	8002d94 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	6839      	ldr	r1, [r7, #0]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fbcb 	bl	8003598 <SPI_EndRxTxTransaction>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	e000      	b.n	8002e3c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b088      	sub	sp, #32
 8002e5a:	af02      	add	r7, sp, #8
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e72:	d112      	bne.n	8002e9a <HAL_SPI_Receive+0x44>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10e      	bne.n	8002e9a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f8f1 	bl	8003078 <HAL_SPI_TransmitReceive>
 8002e96:	4603      	mov	r3, r0
 8002e98:	e0ea      	b.n	8003070 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_SPI_Receive+0x52>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e0e3      	b.n	8003070 <HAL_SPI_Receive+0x21a>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eb0:	f7fe fe88 	bl	8001bc4 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ec6:	e0ca      	b.n	800305e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_Receive+0x7e>
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ed8:	e0c1      	b.n	800305e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2204      	movs	r2, #4
 8002ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f20:	d10f      	bne.n	8002f42 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d007      	beq.n	8002f60 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d162      	bne.n	800302e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f68:	e02e      	b.n	8002fc8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d115      	bne.n	8002fa4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f103 020c 	add.w	r2, r3, #12
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fa2:	e011      	b.n	8002fc8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fa4:	f7fe fe0e 	bl	8001bc4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d803      	bhi.n	8002fbc <HAL_SPI_Receive+0x166>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d102      	bne.n	8002fc2 <HAL_SPI_Receive+0x16c>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fc6:	e04a      	b.n	800305e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1cb      	bne.n	8002f6a <HAL_SPI_Receive+0x114>
 8002fd2:	e031      	b.n	8003038 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d113      	bne.n	800300a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	b292      	uxth	r2, r2
 8002fee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	1c9a      	adds	r2, r3, #2
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003008:	e011      	b.n	800302e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800300a:	f7fe fddb 	bl	8001bc4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d803      	bhi.n	8003022 <HAL_SPI_Receive+0x1cc>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d102      	bne.n	8003028 <HAL_SPI_Receive+0x1d2>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d102      	bne.n	800302e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800302c:	e017      	b.n	800305e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1cd      	bne.n	8002fd4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fa45 	bl	80034cc <SPI_EndRxTransaction>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	75fb      	strb	r3, [r7, #23]
 800305a:	e000      	b.n	800305e <HAL_SPI_Receive+0x208>
  }

error :
 800305c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800306e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	; 0x30
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003086:	2301      	movs	r3, #1
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_SPI_TransmitReceive+0x26>
 800309a:	2302      	movs	r3, #2
 800309c:	e18a      	b.n	80033b4 <HAL_SPI_TransmitReceive+0x33c>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030a6:	f7fe fd8d 	bl	8001bc4 <HAL_GetTick>
 80030aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030bc:	887b      	ldrh	r3, [r7, #2]
 80030be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d00f      	beq.n	80030e8 <HAL_SPI_TransmitReceive+0x70>
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ce:	d107      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x68>
 80030d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d003      	beq.n	80030e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
 80030e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030e6:	e15b      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_SPI_TransmitReceive+0x82>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HAL_SPI_TransmitReceive+0x82>
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003100:	e14e      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b04      	cmp	r3, #4
 800310c:	d003      	beq.n	8003116 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2205      	movs	r2, #5
 8003112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	887a      	ldrh	r2, [r7, #2]
 8003126:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	887a      	ldrh	r2, [r7, #2]
 800312c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	887a      	ldrh	r2, [r7, #2]
 800313e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d007      	beq.n	800316a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003168:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003172:	d178      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_SPI_TransmitReceive+0x10a>
 800317c:	8b7b      	ldrh	r3, [r7, #26]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d166      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	881a      	ldrh	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	1c9a      	adds	r2, r3, #2
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a6:	e053      	b.n	8003250 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d11b      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x176>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d016      	beq.n	80031ee <HAL_SPI_TransmitReceive+0x176>
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d113      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	881a      	ldrh	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	1c9a      	adds	r2, r3, #2
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d119      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x1b8>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d014      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	b292      	uxth	r2, r2
 8003212:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	1c9a      	adds	r2, r3, #2
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800322c:	2301      	movs	r3, #1
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003230:	f7fe fcc8 	bl	8001bc4 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800323c:	429a      	cmp	r2, r3
 800323e:	d807      	bhi.n	8003250 <HAL_SPI_TransmitReceive+0x1d8>
 8003240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d003      	beq.n	8003250 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800324e:	e0a7      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1a6      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0x130>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1a1      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0x130>
 8003264:	e07c      	b.n	8003360 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_SPI_TransmitReceive+0x1fc>
 800326e:	8b7b      	ldrh	r3, [r7, #26]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d16b      	bne.n	800334c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	7812      	ldrb	r2, [r2, #0]
 8003280:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329a:	e057      	b.n	800334c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d11c      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x26c>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d017      	beq.n	80032e4 <HAL_SPI_TransmitReceive+0x26c>
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d114      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
 80032c4:	7812      	ldrb	r2, [r2, #0]
 80032c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d119      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x2ae>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d014      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003322:	2301      	movs	r3, #1
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003326:	f7fe fc4d 	bl	8001bc4 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003332:	429a      	cmp	r2, r3
 8003334:	d803      	bhi.n	800333e <HAL_SPI_TransmitReceive+0x2c6>
 8003336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d102      	bne.n	8003344 <HAL_SPI_TransmitReceive+0x2cc>
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800334a:	e029      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1a2      	bne.n	800329c <HAL_SPI_TransmitReceive+0x224>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d19d      	bne.n	800329c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003362:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f917 	bl	8003598 <SPI_EndRxTxTransaction>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d006      	beq.n	800337e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800337c:	e010      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	e000      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800339e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3730      	adds	r7, #48	; 0x30
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033cc:	f7fe fbfa 	bl	8001bc4 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033dc:	f7fe fbf2 	bl	8001bc4 <HAL_GetTick>
 80033e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033e2:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	015b      	lsls	r3, r3, #5
 80033e8:	0d1b      	lsrs	r3, r3, #20
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	fb02 f303 	mul.w	r3, r2, r3
 80033f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033f2:	e054      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fa:	d050      	beq.n	800349e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033fc:	f7fe fbe2 	bl	8001bc4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	429a      	cmp	r2, r3
 800340a:	d902      	bls.n	8003412 <SPI_WaitFlagStateUntilTimeout+0x56>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d13d      	bne.n	800348e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342a:	d111      	bne.n	8003450 <SPI_WaitFlagStateUntilTimeout+0x94>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003434:	d004      	beq.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343e:	d107      	bne.n	8003450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003458:	d10f      	bne.n	800347a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e017      	b.n	80034be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3b01      	subs	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4013      	ands	r3, r2
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d19b      	bne.n	80033f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000004 	.word	0x20000004

080034cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e0:	d111      	bne.n	8003506 <SPI_EndRxTransaction+0x3a>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ea:	d004      	beq.n	80034f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f4:	d107      	bne.n	8003506 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800350e:	d12a      	bne.n	8003566 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003518:	d012      	beq.n	8003540 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff49 	bl	80033bc <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02d      	beq.n	800358c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e026      	b.n	800358e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff36 	bl	80033bc <SPI_WaitFlagStateUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01a      	beq.n	800358c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e013      	b.n	800358e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2200      	movs	r2, #0
 800356e:	2101      	movs	r1, #1
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff ff23 	bl	80033bc <SPI_WaitFlagStateUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f043 0220 	orr.w	r2, r3, #32
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e000      	b.n	800358e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <SPI_EndRxTxTransaction+0x7c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <SPI_EndRxTxTransaction+0x80>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0d5b      	lsrs	r3, r3, #21
 80035b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035c2:	d112      	bne.n	80035ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff fef4 	bl	80033bc <SPI_WaitFlagStateUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f043 0220 	orr.w	r2, r3, #32
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e00f      	b.n	800360a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d0f2      	beq.n	80035ea <SPI_EndRxTxTransaction+0x52>
 8003604:	e000      	b.n	8003608 <SPI_EndRxTxTransaction+0x70>
        break;
 8003606:	bf00      	nop
  }

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000004 	.word	0x20000004
 8003618:	165e9f81 	.word	0x165e9f81

0800361c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e041      	b.n	80036b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fe f8fa 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f000 ff40 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d001      	beq.n	80036d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e03c      	b.n	800374e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <HAL_TIM_Base_Start+0x9c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d018      	beq.n	8003718 <HAL_TIM_Base_Start+0x5c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d013      	beq.n	8003718 <HAL_TIM_Base_Start+0x5c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_TIM_Base_Start+0xa0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00e      	beq.n	8003718 <HAL_TIM_Base_Start+0x5c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a18      	ldr	r2, [pc, #96]	; (8003760 <HAL_TIM_Base_Start+0xa4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_TIM_Base_Start+0x5c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_TIM_Base_Start+0xa8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_TIM_Base_Start+0x5c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a15      	ldr	r2, [pc, #84]	; (8003768 <HAL_TIM_Base_Start+0xac>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d111      	bne.n	800373c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b06      	cmp	r3, #6
 8003728:	d010      	beq.n	800374c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373a:	e007      	b.n	800374c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40014000 	.word	0x40014000

0800376c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e041      	b.n	8003802 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fe f832 	bl	80017fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f000 fe98 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_TIM_PWM_Start+0x24>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e022      	b.n	8003876 <HAL_TIM_PWM_Start+0x6a>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d109      	bne.n	800384a <HAL_TIM_PWM_Start+0x3e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	e015      	b.n	8003876 <HAL_TIM_PWM_Start+0x6a>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d109      	bne.n	8003864 <HAL_TIM_PWM_Start+0x58>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e008      	b.n	8003876 <HAL_TIM_PWM_Start+0x6a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e068      	b.n	8003950 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <HAL_TIM_PWM_Start+0x82>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388c:	e013      	b.n	80038b6 <HAL_TIM_PWM_Start+0xaa>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d104      	bne.n	800389e <HAL_TIM_PWM_Start+0x92>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800389c:	e00b      	b.n	80038b6 <HAL_TIM_PWM_Start+0xaa>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d104      	bne.n	80038ae <HAL_TIM_PWM_Start+0xa2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ac:	e003      	b.n	80038b6 <HAL_TIM_PWM_Start+0xaa>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	6839      	ldr	r1, [r7, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 fa55 	bl	8004d6e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a23      	ldr	r2, [pc, #140]	; (8003958 <HAL_TIM_PWM_Start+0x14c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d107      	bne.n	80038de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <HAL_TIM_PWM_Start+0x14c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <HAL_TIM_PWM_Start+0x10e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f0:	d013      	beq.n	800391a <HAL_TIM_PWM_Start+0x10e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a19      	ldr	r2, [pc, #100]	; (800395c <HAL_TIM_PWM_Start+0x150>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_TIM_PWM_Start+0x10e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a17      	ldr	r2, [pc, #92]	; (8003960 <HAL_TIM_PWM_Start+0x154>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_TIM_PWM_Start+0x10e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a16      	ldr	r2, [pc, #88]	; (8003964 <HAL_TIM_PWM_Start+0x158>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_TIM_PWM_Start+0x10e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <HAL_TIM_PWM_Start+0x15c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d111      	bne.n	800393e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b06      	cmp	r3, #6
 800392a:	d010      	beq.n	800394e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393c:	e007      	b.n	800394e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40010000 	.word	0x40010000
 800395c:	40000400 	.word	0x40000400
 8003960:	40000800 	.word	0x40000800
 8003964:	40000c00 	.word	0x40000c00
 8003968:	40014000 	.word	0x40014000

0800396c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2200      	movs	r2, #0
 800397c:	6839      	ldr	r1, [r7, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f001 f9f5 	bl	8004d6e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a29      	ldr	r2, [pc, #164]	; (8003a30 <HAL_TIM_PWM_Stop+0xc4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d117      	bne.n	80039be <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a1a      	ldr	r2, [r3, #32]
 8003994:	f241 1311 	movw	r3, #4369	; 0x1111
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <HAL_TIM_PWM_Stop+0x52>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a1a      	ldr	r2, [r3, #32]
 80039a4:	f240 4344 	movw	r3, #1092	; 0x444
 80039a8:	4013      	ands	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d107      	bne.n	80039be <HAL_TIM_PWM_Stop+0x52>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a1a      	ldr	r2, [r3, #32]
 80039c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <HAL_TIM_PWM_Stop+0x82>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a1a      	ldr	r2, [r3, #32]
 80039d4:	f240 4344 	movw	r3, #1092	; 0x444
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d107      	bne.n	80039ee <HAL_TIM_PWM_Stop+0x82>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_PWM_Stop+0x92>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039fc:	e013      	b.n	8003a26 <HAL_TIM_PWM_Stop+0xba>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_PWM_Stop+0xa2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a0c:	e00b      	b.n	8003a26 <HAL_TIM_PWM_Stop+0xba>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d104      	bne.n	8003a1e <HAL_TIM_PWM_Stop+0xb2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1c:	e003      	b.n	8003a26 <HAL_TIM_PWM_Stop+0xba>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40010000 	.word	0x40010000

08003a34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e041      	b.n	8003aca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f839 	bl	8003ad2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f000 fd34 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d104      	bne.n	8003b02 <HAL_TIM_IC_Start_IT+0x1e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	e013      	b.n	8003b2a <HAL_TIM_IC_Start_IT+0x46>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d104      	bne.n	8003b12 <HAL_TIM_IC_Start_IT+0x2e>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e00b      	b.n	8003b2a <HAL_TIM_IC_Start_IT+0x46>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_IC_Start_IT+0x3e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e003      	b.n	8003b2a <HAL_TIM_IC_Start_IT+0x46>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d104      	bne.n	8003b3c <HAL_TIM_IC_Start_IT+0x58>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e013      	b.n	8003b64 <HAL_TIM_IC_Start_IT+0x80>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d104      	bne.n	8003b4c <HAL_TIM_IC_Start_IT+0x68>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e00b      	b.n	8003b64 <HAL_TIM_IC_Start_IT+0x80>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d104      	bne.n	8003b5c <HAL_TIM_IC_Start_IT+0x78>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e003      	b.n	8003b64 <HAL_TIM_IC_Start_IT+0x80>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b66:	7bbb      	ldrb	r3, [r7, #14]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b6c:	7b7b      	ldrb	r3, [r7, #13]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d001      	beq.n	8003b76 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0c2      	b.n	8003cfc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_IC_Start_IT+0xa2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b84:	e013      	b.n	8003bae <HAL_TIM_IC_Start_IT+0xca>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_IC_Start_IT+0xb2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b94:	e00b      	b.n	8003bae <HAL_TIM_IC_Start_IT+0xca>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_IC_Start_IT+0xc2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba4:	e003      	b.n	8003bae <HAL_TIM_IC_Start_IT+0xca>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_IC_Start_IT+0xda>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bbc:	e013      	b.n	8003be6 <HAL_TIM_IC_Start_IT+0x102>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_IC_Start_IT+0xea>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bcc:	e00b      	b.n	8003be6 <HAL_TIM_IC_Start_IT+0x102>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_IC_Start_IT+0xfa>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bdc:	e003      	b.n	8003be6 <HAL_TIM_IC_Start_IT+0x102>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b0c      	cmp	r3, #12
 8003bea:	d841      	bhi.n	8003c70 <HAL_TIM_IC_Start_IT+0x18c>
 8003bec:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <HAL_TIM_IC_Start_IT+0x110>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003c71 	.word	0x08003c71
 8003bfc:	08003c71 	.word	0x08003c71
 8003c00:	08003c71 	.word	0x08003c71
 8003c04:	08003c3b 	.word	0x08003c3b
 8003c08:	08003c71 	.word	0x08003c71
 8003c0c:	08003c71 	.word	0x08003c71
 8003c10:	08003c71 	.word	0x08003c71
 8003c14:	08003c4d 	.word	0x08003c4d
 8003c18:	08003c71 	.word	0x08003c71
 8003c1c:	08003c71 	.word	0x08003c71
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003c5f 	.word	0x08003c5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0202 	orr.w	r2, r2, #2
 8003c36:	60da      	str	r2, [r3, #12]
      break;
 8003c38:	e01d      	b.n	8003c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0204 	orr.w	r2, r2, #4
 8003c48:	60da      	str	r2, [r3, #12]
      break;
 8003c4a:	e014      	b.n	8003c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0208 	orr.w	r2, r2, #8
 8003c5a:	60da      	str	r2, [r3, #12]
      break;
 8003c5c:	e00b      	b.n	8003c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0210 	orr.w	r2, r2, #16
 8003c6c:	60da      	str	r2, [r3, #12]
      break;
 8003c6e:	e002      	b.n	8003c76 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      break;
 8003c74:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d13e      	bne.n	8003cfa <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2201      	movs	r2, #1
 8003c82:	6839      	ldr	r1, [r7, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 f872 	bl	8004d6e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_TIM_IC_Start_IT+0x220>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d018      	beq.n	8003cc6 <HAL_TIM_IC_Start_IT+0x1e2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9c:	d013      	beq.n	8003cc6 <HAL_TIM_IC_Start_IT+0x1e2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <HAL_TIM_IC_Start_IT+0x224>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_TIM_IC_Start_IT+0x1e2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <HAL_TIM_IC_Start_IT+0x228>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d009      	beq.n	8003cc6 <HAL_TIM_IC_Start_IT+0x1e2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <HAL_TIM_IC_Start_IT+0x22c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_TIM_IC_Start_IT+0x1e2>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a14      	ldr	r2, [pc, #80]	; (8003d14 <HAL_TIM_IC_Start_IT+0x230>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d111      	bne.n	8003cea <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b06      	cmp	r3, #6
 8003cd6:	d010      	beq.n	8003cfa <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	e007      	b.n	8003cfa <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40010000 	.word	0x40010000
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	40000c00 	.word	0x40000c00
 8003d14:	40014000 	.word	0x40014000

08003d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d122      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d11b      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0202 	mvn.w	r2, #2
 8003d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fc fd42 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fb95 	bl	8004492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fb9b 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d122      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0204 	mvn.w	r2, #4
 8003d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fc fd18 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fb6b 	bl	8004492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fb71 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0208 	mvn.w	r2, #8
 8003dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2204      	movs	r2, #4
 8003df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fc fcee 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fb41 	bl	8004492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fb47 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d122      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2208      	movs	r2, #8
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc fcc4 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fb17 	bl	8004492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fb1d 	bl	80044a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d10e      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0201 	mvn.w	r2, #1
 8003e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 faf2 	bl	8004480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f001 f83e 	bl	8004f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d107      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fae1 	bl	80044b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d10e      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d107      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0220 	mvn.w	r2, #32
 8003f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f001 f809 	bl	8004f32 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e088      	b.n	8004058 <HAL_TIM_IC_ConfigChannel+0x130>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f000 fd54 	bl	8004a10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 020c 	bic.w	r2, r2, #12
 8003f76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6999      	ldr	r1, [r3, #24]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	619a      	str	r2, [r3, #24]
 8003f8a:	e060      	b.n	800404e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d11c      	bne.n	8003fcc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f000 fdc9 	bl	8004b38 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fb4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6999      	ldr	r1, [r3, #24]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	021a      	lsls	r2, r3, #8
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	619a      	str	r2, [r3, #24]
 8003fca:	e040      	b.n	800404e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d11b      	bne.n	800400a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6819      	ldr	r1, [r3, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f000 fe14 	bl	8004c0e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 020c 	bic.w	r2, r2, #12
 8003ff4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69d9      	ldr	r1, [r3, #28]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	61da      	str	r2, [r3, #28]
 8004008:	e021      	b.n	800404e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b0c      	cmp	r3, #12
 800400e:	d11c      	bne.n	800404a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6819      	ldr	r1, [r3, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f000 fe30 	bl	8004c84 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69da      	ldr	r2, [r3, #28]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004032:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69d9      	ldr	r1, [r3, #28]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	021a      	lsls	r2, r3, #8
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	61da      	str	r2, [r3, #28]
 8004048:	e001      	b.n	800404e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004056:	7dfb      	ldrb	r3, [r7, #23]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800407a:	2302      	movs	r3, #2
 800407c:	e0ae      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b0c      	cmp	r3, #12
 800408a:	f200 809f 	bhi.w	80041cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800408e:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004094:	080040c9 	.word	0x080040c9
 8004098:	080041cd 	.word	0x080041cd
 800409c:	080041cd 	.word	0x080041cd
 80040a0:	080041cd 	.word	0x080041cd
 80040a4:	08004109 	.word	0x08004109
 80040a8:	080041cd 	.word	0x080041cd
 80040ac:	080041cd 	.word	0x080041cd
 80040b0:	080041cd 	.word	0x080041cd
 80040b4:	0800414b 	.word	0x0800414b
 80040b8:	080041cd 	.word	0x080041cd
 80040bc:	080041cd 	.word	0x080041cd
 80040c0:	080041cd 	.word	0x080041cd
 80040c4:	0800418b 	.word	0x0800418b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fa84 	bl	80045dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0208 	orr.w	r2, r2, #8
 80040e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6999      	ldr	r1, [r3, #24]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	619a      	str	r2, [r3, #24]
      break;
 8004106:	e064      	b.n	80041d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	4618      	mov	r0, r3
 8004110:	f000 faca 	bl	80046a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6999      	ldr	r1, [r3, #24]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	619a      	str	r2, [r3, #24]
      break;
 8004148:	e043      	b.n	80041d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fb13 	bl	800477c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0208 	orr.w	r2, r2, #8
 8004164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0204 	bic.w	r2, r2, #4
 8004174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69d9      	ldr	r1, [r3, #28]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	61da      	str	r2, [r3, #28]
      break;
 8004188:	e023      	b.n	80041d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fb5d 	bl	8004850 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69d9      	ldr	r1, [r3, #28]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	021a      	lsls	r2, r3, #8
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	61da      	str	r2, [r3, #28]
      break;
 80041ca:	e002      	b.n	80041d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75fb      	strb	r3, [r7, #23]
      break;
 80041d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_TIM_ConfigClockSource+0x1c>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e0b4      	b.n	800436a <HAL_TIM_ConfigClockSource+0x186>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800421e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004238:	d03e      	beq.n	80042b8 <HAL_TIM_ConfigClockSource+0xd4>
 800423a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423e:	f200 8087 	bhi.w	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004246:	f000 8086 	beq.w	8004356 <HAL_TIM_ConfigClockSource+0x172>
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424e:	d87f      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b70      	cmp	r3, #112	; 0x70
 8004252:	d01a      	beq.n	800428a <HAL_TIM_ConfigClockSource+0xa6>
 8004254:	2b70      	cmp	r3, #112	; 0x70
 8004256:	d87b      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004258:	2b60      	cmp	r3, #96	; 0x60
 800425a:	d050      	beq.n	80042fe <HAL_TIM_ConfigClockSource+0x11a>
 800425c:	2b60      	cmp	r3, #96	; 0x60
 800425e:	d877      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004260:	2b50      	cmp	r3, #80	; 0x50
 8004262:	d03c      	beq.n	80042de <HAL_TIM_ConfigClockSource+0xfa>
 8004264:	2b50      	cmp	r3, #80	; 0x50
 8004266:	d873      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d058      	beq.n	800431e <HAL_TIM_ConfigClockSource+0x13a>
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d86f      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004270:	2b30      	cmp	r3, #48	; 0x30
 8004272:	d064      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x15a>
 8004274:	2b30      	cmp	r3, #48	; 0x30
 8004276:	d86b      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004278:	2b20      	cmp	r3, #32
 800427a:	d060      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x15a>
 800427c:	2b20      	cmp	r3, #32
 800427e:	d867      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d05c      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x15a>
 8004284:	2b10      	cmp	r3, #16
 8004286:	d05a      	beq.n	800433e <HAL_TIM_ConfigClockSource+0x15a>
 8004288:	e062      	b.n	8004350 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	6899      	ldr	r1, [r3, #8]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f000 fd49 	bl	8004d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	609a      	str	r2, [r3, #8]
      break;
 80042b6:	e04f      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6899      	ldr	r1, [r3, #8]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f000 fd32 	bl	8004d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042da:	609a      	str	r2, [r3, #8]
      break;
 80042dc:	e03c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f000 fbf6 	bl	8004adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2150      	movs	r1, #80	; 0x50
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fd00 	bl	8004cfc <TIM_ITRx_SetConfig>
      break;
 80042fc:	e02c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6859      	ldr	r1, [r3, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	461a      	mov	r2, r3
 800430c:	f000 fc50 	bl	8004bb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2160      	movs	r1, #96	; 0x60
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fcf0 	bl	8004cfc <TIM_ITRx_SetConfig>
      break;
 800431c:	e01c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6859      	ldr	r1, [r3, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	461a      	mov	r2, r3
 800432c:	f000 fbd6 	bl	8004adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2140      	movs	r1, #64	; 0x40
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fce0 	bl	8004cfc <TIM_ITRx_SetConfig>
      break;
 800433c:	e00c      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4619      	mov	r1, r3
 8004348:	4610      	mov	r0, r2
 800434a:	f000 fcd7 	bl	8004cfc <TIM_ITRx_SetConfig>
      break;
 800434e:	e003      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      break;
 8004354:	e000      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004386:	2302      	movs	r3, #2
 8004388:	e031      	b.n	80043ee <HAL_TIM_SlaveConfigSynchro+0x7c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2202      	movs	r2, #2
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800439a:	6839      	ldr	r1, [r7, #0]
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 faa5 	bl	80048ec <TIM_SlaveTimer_SetConfig>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e018      	b.n	80043ee <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ca:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043da:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d831      	bhi.n	8004470 <HAL_TIM_ReadCapturedValue+0x78>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <HAL_TIM_ReadCapturedValue+0x1c>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004449 	.word	0x08004449
 8004418:	08004471 	.word	0x08004471
 800441c:	08004471 	.word	0x08004471
 8004420:	08004471 	.word	0x08004471
 8004424:	08004453 	.word	0x08004453
 8004428:	08004471 	.word	0x08004471
 800442c:	08004471 	.word	0x08004471
 8004430:	08004471 	.word	0x08004471
 8004434:	0800445d 	.word	0x0800445d
 8004438:	08004471 	.word	0x08004471
 800443c:	08004471 	.word	0x08004471
 8004440:	08004471 	.word	0x08004471
 8004444:	08004467 	.word	0x08004467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	60fb      	str	r3, [r7, #12]

      break;
 8004450:	e00f      	b.n	8004472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	60fb      	str	r3, [r7, #12]

      break;
 800445a:	e00a      	b.n	8004472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	60fb      	str	r3, [r7, #12]

      break;
 8004464:	e005      	b.n	8004472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	60fb      	str	r3, [r7, #12]

      break;
 800446e:	e000      	b.n	8004472 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004470:	bf00      	nop
  }

  return tmpreg;
 8004472:	68fb      	ldr	r3, [r7, #12]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop

08004480 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr

080044b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7f1b      	ldrb	r3, [r3, #28]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
	...

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a33      	ldr	r2, [pc, #204]	; (80045c0 <TIM_Base_SetConfig+0xe0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00f      	beq.n	8004518 <TIM_Base_SetConfig+0x38>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d00b      	beq.n	8004518 <TIM_Base_SetConfig+0x38>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a30      	ldr	r2, [pc, #192]	; (80045c4 <TIM_Base_SetConfig+0xe4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d007      	beq.n	8004518 <TIM_Base_SetConfig+0x38>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a2f      	ldr	r2, [pc, #188]	; (80045c8 <TIM_Base_SetConfig+0xe8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_Base_SetConfig+0x38>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a2e      	ldr	r2, [pc, #184]	; (80045cc <TIM_Base_SetConfig+0xec>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d108      	bne.n	800452a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a24      	ldr	r2, [pc, #144]	; (80045c0 <TIM_Base_SetConfig+0xe0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01b      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004538:	d017      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <TIM_Base_SetConfig+0xe4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a20      	ldr	r2, [pc, #128]	; (80045c8 <TIM_Base_SetConfig+0xe8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00f      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <TIM_Base_SetConfig+0xec>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00b      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1e      	ldr	r2, [pc, #120]	; (80045d0 <TIM_Base_SetConfig+0xf0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <TIM_Base_SetConfig+0xf4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_Base_SetConfig+0x8a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <TIM_Base_SetConfig+0xf8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d108      	bne.n	800457c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a07      	ldr	r2, [pc, #28]	; (80045c0 <TIM_Base_SetConfig+0xe0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d103      	bne.n	80045b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40000c00 	.word	0x40000c00
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0201 	bic.w	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 0302 	bic.w	r3, r3, #2
 8004624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <TIM_OC1_SetConfig+0xc8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10c      	bne.n	8004652 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0308 	bic.w	r3, r3, #8
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a13      	ldr	r2, [pc, #76]	; (80046a4 <TIM_OC1_SetConfig+0xc8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d111      	bne.n	800467e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	621a      	str	r2, [r3, #32]
}
 8004698:	bf00      	nop
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40010000 	.word	0x40010000

080046a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f023 0210 	bic.w	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f023 0320 	bic.w	r3, r3, #32
 80046f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <TIM_OC2_SetConfig+0xd0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d10d      	bne.n	8004724 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004722:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a14      	ldr	r2, [pc, #80]	; (8004778 <TIM_OC2_SetConfig+0xd0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d113      	bne.n	8004754 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800473a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	40010000 	.word	0x40010000

0800477c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1d      	ldr	r2, [pc, #116]	; (800484c <TIM_OC3_SetConfig+0xd0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10d      	bne.n	80047f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a14      	ldr	r2, [pc, #80]	; (800484c <TIM_OC3_SetConfig+0xd0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d113      	bne.n	8004826 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800480c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	621a      	str	r2, [r3, #32]
}
 8004840:	bf00      	nop
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000

08004850 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800489a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	031b      	lsls	r3, r3, #12
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a0f      	ldr	r2, [pc, #60]	; (80048e8 <TIM_OC4_SetConfig+0x98>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d109      	bne.n	80048c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	019b      	lsls	r3, r3, #6
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	40010000 	.word	0x40010000

080048ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004908:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f023 0307 	bic.w	r3, r3, #7
 800491a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b70      	cmp	r3, #112	; 0x70
 8004934:	d01a      	beq.n	800496c <TIM_SlaveTimer_SetConfig+0x80>
 8004936:	2b70      	cmp	r3, #112	; 0x70
 8004938:	d860      	bhi.n	80049fc <TIM_SlaveTimer_SetConfig+0x110>
 800493a:	2b60      	cmp	r3, #96	; 0x60
 800493c:	d054      	beq.n	80049e8 <TIM_SlaveTimer_SetConfig+0xfc>
 800493e:	2b60      	cmp	r3, #96	; 0x60
 8004940:	d85c      	bhi.n	80049fc <TIM_SlaveTimer_SetConfig+0x110>
 8004942:	2b50      	cmp	r3, #80	; 0x50
 8004944:	d046      	beq.n	80049d4 <TIM_SlaveTimer_SetConfig+0xe8>
 8004946:	2b50      	cmp	r3, #80	; 0x50
 8004948:	d858      	bhi.n	80049fc <TIM_SlaveTimer_SetConfig+0x110>
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	d019      	beq.n	8004982 <TIM_SlaveTimer_SetConfig+0x96>
 800494e:	2b40      	cmp	r3, #64	; 0x40
 8004950:	d854      	bhi.n	80049fc <TIM_SlaveTimer_SetConfig+0x110>
 8004952:	2b30      	cmp	r3, #48	; 0x30
 8004954:	d055      	beq.n	8004a02 <TIM_SlaveTimer_SetConfig+0x116>
 8004956:	2b30      	cmp	r3, #48	; 0x30
 8004958:	d850      	bhi.n	80049fc <TIM_SlaveTimer_SetConfig+0x110>
 800495a:	2b20      	cmp	r3, #32
 800495c:	d051      	beq.n	8004a02 <TIM_SlaveTimer_SetConfig+0x116>
 800495e:	2b20      	cmp	r3, #32
 8004960:	d84c      	bhi.n	80049fc <TIM_SlaveTimer_SetConfig+0x110>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d04d      	beq.n	8004a02 <TIM_SlaveTimer_SetConfig+0x116>
 8004966:	2b10      	cmp	r3, #16
 8004968:	d04b      	beq.n	8004a02 <TIM_SlaveTimer_SetConfig+0x116>
 800496a:	e047      	b.n	80049fc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68d9      	ldr	r1, [r3, #12]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f000 f9d8 	bl	8004d30 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004980:	e040      	b.n	8004a04 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b05      	cmp	r3, #5
 8004988:	d101      	bne.n	800498e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e03b      	b.n	8004a06 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a1a      	ldr	r2, [r3, #32]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0201 	bic.w	r2, r2, #1
 80049a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	621a      	str	r2, [r3, #32]
      break;
 80049d2:	e017      	b.n	8004a04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6899      	ldr	r1, [r3, #8]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	461a      	mov	r2, r3
 80049e2:	f000 f87b 	bl	8004adc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80049e6:	e00d      	b.n	8004a04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6899      	ldr	r1, [r3, #8]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	461a      	mov	r2, r3
 80049f6:	f000 f8db 	bl	8004bb0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80049fa:	e003      	b.n	8004a04 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004a00:	e000      	b.n	8004a04 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004a02:	bf00      	nop
  }

  return status;
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f023 0201 	bic.w	r2, r3, #1
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a23      	ldr	r2, [pc, #140]	; (8004ac8 <TIM_TI1_SetConfig+0xb8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <TIM_TI1_SetConfig+0x56>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a44:	d00f      	beq.n	8004a66 <TIM_TI1_SetConfig+0x56>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <TIM_TI1_SetConfig+0xbc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00b      	beq.n	8004a66 <TIM_TI1_SetConfig+0x56>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <TIM_TI1_SetConfig+0xc0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d007      	beq.n	8004a66 <TIM_TI1_SetConfig+0x56>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <TIM_TI1_SetConfig+0xc4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <TIM_TI1_SetConfig+0x56>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <TIM_TI1_SetConfig+0xc8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <TIM_TI1_SetConfig+0x5a>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <TIM_TI1_SetConfig+0x5c>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e003      	b.n	8004a8a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f023 030a 	bic.w	r3, r3, #10
 8004aa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 030a 	and.w	r3, r3, #10
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40014000 	.word	0x40014000

08004adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f023 0201 	bic.w	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 030a 	bic.w	r3, r3, #10
 8004b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	621a      	str	r2, [r3, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr

08004b38 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f023 0210 	bic.w	r2, r3, #16
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	031b      	lsls	r3, r3, #12
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	621a      	str	r2, [r3, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f023 0210 	bic.w	r2, r3, #16
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	031b      	lsls	r3, r3, #12
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	621a      	str	r2, [r3, #32]
}
 8004c04:	bf00      	nop
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b087      	sub	sp, #28
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
 8004c1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f023 0303 	bic.w	r3, r3, #3
 8004c3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cc2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	031b      	lsls	r3, r3, #12
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	031b      	lsls	r3, r3, #12
 8004cdc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f043 0307 	orr.w	r3, r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	609a      	str	r2, [r3, #8]
}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bc80      	pop	{r7}
 8004d2e:	4770      	bx	lr

08004d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	021a      	lsls	r2, r3, #8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	609a      	str	r2, [r3, #8]
}
 8004d64:	bf00      	nop
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2201      	movs	r2, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	401a      	ands	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a1a      	ldr	r2, [r3, #32]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	fa01 f303 	lsl.w	r3, r1, r3
 8004da6:	431a      	orrs	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr
	...

08004db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e050      	b.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d018      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d013      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00e      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d009      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d10c      	bne.n	8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40014000 	.word	0x40014000

08004e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e03d      	b.n	8004f28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr

08004f32 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr

08004f56 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e03f      	b.n	8004fe8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fc fd03 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2224      	movs	r2, #36	; 0x24
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f98:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f828 	bl	8004ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fbe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b0c0      	sub	sp, #256	; 0x100
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	68d9      	ldr	r1, [r3, #12]
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	ea40 0301 	orr.w	r3, r0, r1
 8005018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	431a      	orrs	r2, r3
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	431a      	orrs	r2, r3
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005048:	f021 010c 	bic.w	r1, r1, #12
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005056:	430b      	orrs	r3, r1
 8005058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	6999      	ldr	r1, [r3, #24]
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	ea40 0301 	orr.w	r3, r0, r1
 8005076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b91      	ldr	r3, [pc, #580]	; (80052c4 <UART_SetConfig+0x2d4>)
 8005080:	429a      	cmp	r2, r3
 8005082:	d005      	beq.n	8005090 <UART_SetConfig+0xa0>
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b8f      	ldr	r3, [pc, #572]	; (80052c8 <UART_SetConfig+0x2d8>)
 800508c:	429a      	cmp	r2, r3
 800508e:	d104      	bne.n	800509a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005090:	f7fd fd08 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 8005094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005098:	e003      	b.n	80050a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800509a:	f7fd fcef 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 800509e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ac:	f040 8110 	bne.w	80052d0 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	1891      	adds	r1, r2, r2
 80050c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050ca:	415b      	adcs	r3, r3
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050d2:	4620      	mov	r0, r4
 80050d4:	4629      	mov	r1, r5
 80050d6:	4604      	mov	r4, r0
 80050d8:	eb12 0804 	adds.w	r8, r2, r4
 80050dc:	460c      	mov	r4, r1
 80050de:	eb43 0904 	adc.w	r9, r3, r4
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f6:	4690      	mov	r8, r2
 80050f8:	4699      	mov	r9, r3
 80050fa:	4603      	mov	r3, r0
 80050fc:	eb18 0303 	adds.w	r3, r8, r3
 8005100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005104:	460b      	mov	r3, r1
 8005106:	eb49 0303 	adc.w	r3, r9, r3
 800510a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800511a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800511e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005122:	460b      	mov	r3, r1
 8005124:	18db      	adds	r3, r3, r3
 8005126:	653b      	str	r3, [r7, #80]	; 0x50
 8005128:	4613      	mov	r3, r2
 800512a:	eb42 0303 	adc.w	r3, r2, r3
 800512e:	657b      	str	r3, [r7, #84]	; 0x54
 8005130:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005134:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005138:	f7fb f84e 	bl	80001d8 <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4b62      	ldr	r3, [pc, #392]	; (80052cc <UART_SetConfig+0x2dc>)
 8005142:	fba3 2302 	umull	r2, r3, r3, r2
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	011c      	lsls	r4, r3, #4
 800514a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514e:	2200      	movs	r2, #0
 8005150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005154:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005158:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800515c:	4642      	mov	r2, r8
 800515e:	464b      	mov	r3, r9
 8005160:	1891      	adds	r1, r2, r2
 8005162:	64b9      	str	r1, [r7, #72]	; 0x48
 8005164:	415b      	adcs	r3, r3
 8005166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800516c:	4645      	mov	r5, r8
 800516e:	eb12 0a05 	adds.w	sl, r2, r5
 8005172:	4640      	mov	r0, r8
 8005174:	4649      	mov	r1, r9
 8005176:	460d      	mov	r5, r1
 8005178:	eb43 0b05 	adc.w	fp, r3, r5
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800518c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005190:	4692      	mov	sl, r2
 8005192:	469b      	mov	fp, r3
 8005194:	4603      	mov	r3, r0
 8005196:	eb1a 0303 	adds.w	r3, sl, r3
 800519a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800519e:	460b      	mov	r3, r1
 80051a0:	eb4b 0303 	adc.w	r3, fp, r3
 80051a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051bc:	460b      	mov	r3, r1
 80051be:	18db      	adds	r3, r3, r3
 80051c0:	643b      	str	r3, [r7, #64]	; 0x40
 80051c2:	4613      	mov	r3, r2
 80051c4:	eb42 0303 	adc.w	r3, r2, r3
 80051c8:	647b      	str	r3, [r7, #68]	; 0x44
 80051ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051d2:	f7fb f801 	bl	80001d8 <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4611      	mov	r1, r2
 80051dc:	4b3b      	ldr	r3, [pc, #236]	; (80052cc <UART_SetConfig+0x2dc>)
 80051de:	fba3 2301 	umull	r2, r3, r3, r1
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2264      	movs	r2, #100	; 0x64
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	1acb      	subs	r3, r1, r3
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051f2:	4b36      	ldr	r3, [pc, #216]	; (80052cc <UART_SetConfig+0x2dc>)
 80051f4:	fba3 2302 	umull	r2, r3, r3, r2
 80051f8:	095b      	lsrs	r3, r3, #5
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005200:	441c      	add	r4, r3
 8005202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005206:	2200      	movs	r2, #0
 8005208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800520c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	1891      	adds	r1, r2, r2
 800521a:	63b9      	str	r1, [r7, #56]	; 0x38
 800521c:	415b      	adcs	r3, r3
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005224:	4641      	mov	r1, r8
 8005226:	1851      	adds	r1, r2, r1
 8005228:	6339      	str	r1, [r7, #48]	; 0x30
 800522a:	4649      	mov	r1, r9
 800522c:	414b      	adcs	r3, r1
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800523c:	4659      	mov	r1, fp
 800523e:	00cb      	lsls	r3, r1, #3
 8005240:	4655      	mov	r5, sl
 8005242:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005246:	4651      	mov	r1, sl
 8005248:	00ca      	lsls	r2, r1, #3
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	4603      	mov	r3, r0
 8005250:	4642      	mov	r2, r8
 8005252:	189b      	adds	r3, r3, r2
 8005254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005258:	464b      	mov	r3, r9
 800525a:	460a      	mov	r2, r1
 800525c:	eb42 0303 	adc.w	r3, r2, r3
 8005260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005270:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005278:	460b      	mov	r3, r1
 800527a:	18db      	adds	r3, r3, r3
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
 800527e:	4613      	mov	r3, r2
 8005280:	eb42 0303 	adc.w	r3, r2, r3
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800528a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800528e:	f7fa ffa3 	bl	80001d8 <__aeabi_uldivmod>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <UART_SetConfig+0x2dc>)
 8005298:	fba3 1302 	umull	r1, r3, r3, r2
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	2164      	movs	r1, #100	; 0x64
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	3332      	adds	r3, #50	; 0x32
 80052aa:	4a08      	ldr	r2, [pc, #32]	; (80052cc <UART_SetConfig+0x2dc>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	f003 0207 	and.w	r2, r3, #7
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4422      	add	r2, r4
 80052be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052c0:	e109      	b.n	80054d6 <UART_SetConfig+0x4e6>
 80052c2:	bf00      	nop
 80052c4:	40011000 	.word	0x40011000
 80052c8:	40011400 	.word	0x40011400
 80052cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052e2:	4642      	mov	r2, r8
 80052e4:	464b      	mov	r3, r9
 80052e6:	1891      	adds	r1, r2, r2
 80052e8:	6239      	str	r1, [r7, #32]
 80052ea:	415b      	adcs	r3, r3
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
 80052ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052f2:	4641      	mov	r1, r8
 80052f4:	1854      	adds	r4, r2, r1
 80052f6:	46cc      	mov	ip, r9
 80052f8:	eb43 050c 	adc.w	r5, r3, ip
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	00eb      	lsls	r3, r5, #3
 8005306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800530a:	00e2      	lsls	r2, r4, #3
 800530c:	4614      	mov	r4, r2
 800530e:	461d      	mov	r5, r3
 8005310:	4640      	mov	r0, r8
 8005312:	4649      	mov	r1, r9
 8005314:	4603      	mov	r3, r0
 8005316:	18e3      	adds	r3, r4, r3
 8005318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800531c:	460b      	mov	r3, r1
 800531e:	eb45 0303 	adc.w	r3, r5, r3
 8005322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005342:	4629      	mov	r1, r5
 8005344:	008b      	lsls	r3, r1, #2
 8005346:	4620      	mov	r0, r4
 8005348:	4629      	mov	r1, r5
 800534a:	4604      	mov	r4, r0
 800534c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005350:	4601      	mov	r1, r0
 8005352:	008a      	lsls	r2, r1, #2
 8005354:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005358:	f7fa ff3e 	bl	80001d8 <__aeabi_uldivmod>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4b60      	ldr	r3, [pc, #384]	; (80054e4 <UART_SetConfig+0x4f4>)
 8005362:	fba3 2302 	umull	r2, r3, r3, r2
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	011c      	lsls	r4, r3, #4
 800536a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800536e:	2200      	movs	r2, #0
 8005370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005374:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005378:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800537c:	4642      	mov	r2, r8
 800537e:	464b      	mov	r3, r9
 8005380:	1891      	adds	r1, r2, r2
 8005382:	61b9      	str	r1, [r7, #24]
 8005384:	415b      	adcs	r3, r3
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800538c:	4641      	mov	r1, r8
 800538e:	1851      	adds	r1, r2, r1
 8005390:	6139      	str	r1, [r7, #16]
 8005392:	4649      	mov	r1, r9
 8005394:	414b      	adcs	r3, r1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053a4:	4659      	mov	r1, fp
 80053a6:	00cb      	lsls	r3, r1, #3
 80053a8:	4655      	mov	r5, sl
 80053aa:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80053ae:	4651      	mov	r1, sl
 80053b0:	00ca      	lsls	r2, r1, #3
 80053b2:	4610      	mov	r0, r2
 80053b4:	4619      	mov	r1, r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	4642      	mov	r2, r8
 80053ba:	189b      	adds	r3, r3, r2
 80053bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053c0:	464b      	mov	r3, r9
 80053c2:	460a      	mov	r2, r1
 80053c4:	eb42 0303 	adc.w	r3, r2, r3
 80053c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053e4:	4649      	mov	r1, r9
 80053e6:	008b      	lsls	r3, r1, #2
 80053e8:	4645      	mov	r5, r8
 80053ea:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80053ee:	4641      	mov	r1, r8
 80053f0:	008a      	lsls	r2, r1, #2
 80053f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053f6:	f7fa feef 	bl	80001d8 <__aeabi_uldivmod>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4b39      	ldr	r3, [pc, #228]	; (80054e4 <UART_SetConfig+0x4f4>)
 8005400:	fba3 1302 	umull	r1, r3, r3, r2
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	2164      	movs	r1, #100	; 0x64
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	3332      	adds	r3, #50	; 0x32
 8005412:	4a34      	ldr	r2, [pc, #208]	; (80054e4 <UART_SetConfig+0x4f4>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800541e:	441c      	add	r4, r3
 8005420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005424:	2200      	movs	r2, #0
 8005426:	673b      	str	r3, [r7, #112]	; 0x70
 8005428:	677a      	str	r2, [r7, #116]	; 0x74
 800542a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800542e:	4642      	mov	r2, r8
 8005430:	464b      	mov	r3, r9
 8005432:	1891      	adds	r1, r2, r2
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	415b      	adcs	r3, r3
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800543e:	4641      	mov	r1, r8
 8005440:	1851      	adds	r1, r2, r1
 8005442:	6039      	str	r1, [r7, #0]
 8005444:	4649      	mov	r1, r9
 8005446:	414b      	adcs	r3, r1
 8005448:	607b      	str	r3, [r7, #4]
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	f04f 0300 	mov.w	r3, #0
 8005452:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005456:	4659      	mov	r1, fp
 8005458:	00cb      	lsls	r3, r1, #3
 800545a:	4655      	mov	r5, sl
 800545c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005460:	4651      	mov	r1, sl
 8005462:	00ca      	lsls	r2, r1, #3
 8005464:	4610      	mov	r0, r2
 8005466:	4619      	mov	r1, r3
 8005468:	4603      	mov	r3, r0
 800546a:	4642      	mov	r2, r8
 800546c:	189b      	adds	r3, r3, r2
 800546e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005470:	464b      	mov	r3, r9
 8005472:	460a      	mov	r2, r1
 8005474:	eb42 0303 	adc.w	r3, r2, r3
 8005478:	66fb      	str	r3, [r7, #108]	; 0x6c
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	663b      	str	r3, [r7, #96]	; 0x60
 8005484:	667a      	str	r2, [r7, #100]	; 0x64
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005492:	4649      	mov	r1, r9
 8005494:	008b      	lsls	r3, r1, #2
 8005496:	4645      	mov	r5, r8
 8005498:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800549c:	4641      	mov	r1, r8
 800549e:	008a      	lsls	r2, r1, #2
 80054a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054a4:	f7fa fe98 	bl	80001d8 <__aeabi_uldivmod>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <UART_SetConfig+0x4f4>)
 80054ae:	fba3 1302 	umull	r1, r3, r3, r2
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	2164      	movs	r1, #100	; 0x64
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	3332      	adds	r3, #50	; 0x32
 80054c0:	4a08      	ldr	r2, [pc, #32]	; (80054e4 <UART_SetConfig+0x4f4>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	f003 020f 	and.w	r2, r3, #15
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4422      	add	r2, r4
 80054d4:	609a      	str	r2, [r3, #8]
}
 80054d6:	bf00      	nop
 80054d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054dc:	46bd      	mov	sp, r7
 80054de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e2:	bf00      	nop
 80054e4:	51eb851f 	.word	0x51eb851f

080054e8 <__libc_init_array>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	4d0d      	ldr	r5, [pc, #52]	; (8005520 <__libc_init_array+0x38>)
 80054ec:	4c0d      	ldr	r4, [pc, #52]	; (8005524 <__libc_init_array+0x3c>)
 80054ee:	1b64      	subs	r4, r4, r5
 80054f0:	10a4      	asrs	r4, r4, #2
 80054f2:	2600      	movs	r6, #0
 80054f4:	42a6      	cmp	r6, r4
 80054f6:	d109      	bne.n	800550c <__libc_init_array+0x24>
 80054f8:	4d0b      	ldr	r5, [pc, #44]	; (8005528 <__libc_init_array+0x40>)
 80054fa:	4c0c      	ldr	r4, [pc, #48]	; (800552c <__libc_init_array+0x44>)
 80054fc:	f000 f82e 	bl	800555c <_init>
 8005500:	1b64      	subs	r4, r4, r5
 8005502:	10a4      	asrs	r4, r4, #2
 8005504:	2600      	movs	r6, #0
 8005506:	42a6      	cmp	r6, r4
 8005508:	d105      	bne.n	8005516 <__libc_init_array+0x2e>
 800550a:	bd70      	pop	{r4, r5, r6, pc}
 800550c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005510:	4798      	blx	r3
 8005512:	3601      	adds	r6, #1
 8005514:	e7ee      	b.n	80054f4 <__libc_init_array+0xc>
 8005516:	f855 3b04 	ldr.w	r3, [r5], #4
 800551a:	4798      	blx	r3
 800551c:	3601      	adds	r6, #1
 800551e:	e7f2      	b.n	8005506 <__libc_init_array+0x1e>
 8005520:	0800569c 	.word	0x0800569c
 8005524:	0800569c 	.word	0x0800569c
 8005528:	0800569c 	.word	0x0800569c
 800552c:	080056a0 	.word	0x080056a0

08005530 <memcpy>:
 8005530:	440a      	add	r2, r1
 8005532:	4291      	cmp	r1, r2
 8005534:	f100 33ff 	add.w	r3, r0, #4294967295
 8005538:	d100      	bne.n	800553c <memcpy+0xc>
 800553a:	4770      	bx	lr
 800553c:	b510      	push	{r4, lr}
 800553e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005546:	4291      	cmp	r1, r2
 8005548:	d1f9      	bne.n	800553e <memcpy+0xe>
 800554a:	bd10      	pop	{r4, pc}

0800554c <memset>:
 800554c:	4402      	add	r2, r0
 800554e:	4603      	mov	r3, r0
 8005550:	4293      	cmp	r3, r2
 8005552:	d100      	bne.n	8005556 <memset+0xa>
 8005554:	4770      	bx	lr
 8005556:	f803 1b01 	strb.w	r1, [r3], #1
 800555a:	e7f9      	b.n	8005550 <memset+0x4>

0800555c <_init>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr

08005568 <_fini>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr
