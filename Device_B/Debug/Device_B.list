
Device_B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085a0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d94  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094cc  080094cc  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080094cc  080094cc  000194cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094d4  080094d4  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094d4  080094d4  000194d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080094dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b04  20000034  08009510  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b38  08009510  00021b38  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001299e  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad2  00000000  00000000  000329fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000354d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00036580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d83  00000000  00000000  00037518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e1b  00000000  00000000  0005029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009316e  00000000  00000000  000680b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  000fb224  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004544  00000000  00000000  000fb2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000034 	.word	0x20000034
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008720 	.word	0x08008720

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000038 	.word	0x20000038
 80001d4:	08008720 	.word	0x08008720

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14d      	bne.n	80002b4 <__udivmoddi4+0xac>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d968      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b152      	cbz	r2, 800023a <__udivmoddi4+0x32>
 8000224:	fa01 f302 	lsl.w	r3, r1, r2
 8000228:	f1c2 0120 	rsb	r1, r2, #32
 800022c:	fa20 f101 	lsr.w	r1, r0, r1
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	ea41 0803 	orr.w	r8, r1, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800023e:	0c21      	lsrs	r1, r4, #16
 8000240:	fbb8 fef5 	udiv	lr, r8, r5
 8000244:	fa1f f78c 	uxth.w	r7, ip
 8000248:	fb05 831e 	mls	r3, r5, lr, r8
 800024c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000250:	fb0e f107 	mul.w	r1, lr, r7
 8000254:	4299      	cmp	r1, r3
 8000256:	d90b      	bls.n	8000270 <__udivmoddi4+0x68>
 8000258:	eb1c 0303 	adds.w	r3, ip, r3
 800025c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000260:	f080 811e 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000264:	4299      	cmp	r1, r3
 8000266:	f240 811b 	bls.w	80004a0 <__udivmoddi4+0x298>
 800026a:	f1ae 0e02 	sub.w	lr, lr, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f5 	udiv	r0, r3, r5
 8000278:	fb05 3310 	mls	r3, r5, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x96>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 8108 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8105 	bls.w	80004a4 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa8>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d908      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	f000 80ee 	beq.w	800049a <__udivmoddi4+0x292>
 80002be:	2100      	movs	r1, #0
 80002c0:	e9c6 0500 	strd	r0, r5, [r6]
 80002c4:	4608      	mov	r0, r1
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0303 	sbc.w	r3, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e2      	beq.n	80002b0 <__udivmoddi4+0xa8>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7df      	b.n	80002b0 <__udivmoddi4+0xa8>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8091 	bne.w	8000420 <__udivmoddi4+0x218>
 80002fe:	eba1 050c 	sub.w	r5, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000310:	fb07 5013 	mls	r0, r7, r3, r5
 8000314:	0c25      	lsrs	r5, r4, #16
 8000316:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	42a8      	cmp	r0, r5
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0505 	adds.w	r5, ip, r5
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	42a8      	cmp	r0, r5
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb5 f0f7 	udiv	r0, r5, r7
 800033c:	fb07 5510 	mls	r5, r7, r0, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4628      	mov	r0, r5
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x9e>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa05 f301 	lsl.w	r3, r5, r1
 800037e:	431c      	orrs	r4, r3
 8000380:	40fd      	lsrs	r5, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f301 	lsl.w	r3, r0, r1
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 5518 	mls	r5, r9, r8, r5
 8000398:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	42a8      	cmp	r0, r5
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0505 	adds.w	r5, ip, r5
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4465      	add	r5, ip
 80003c0:	1a2d      	subs	r5, r5, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003c8:	fb09 5510 	mls	r5, r9, r0, r5
 80003cc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45ae      	cmp	lr, r5
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0505 	adds.w	r5, ip, r5
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	45ae      	cmp	lr, r5
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4465      	add	r5, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba5 050e 	sub.w	r5, r5, lr
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15e      	cbz	r6, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb65 050e 	sbc.w	r5, r5, lr
 800040a:	fa05 f707 	lsl.w	r7, r5, r7
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	40cd      	lsrs	r5, r1
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c6 7500 	strd	r7, r5, [r6]
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa25 f303 	lsr.w	r3, r5, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	430d      	orrs	r5, r1
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000440:	fb07 3011 	mls	r0, r7, r1, r3
 8000444:	0c2b      	lsrs	r3, r5, #16
 8000446:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800044a:	fb01 f00e 	mul.w	r0, r1, lr
 800044e:	4298      	cmp	r0, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f101 38ff 	add.w	r8, r1, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	4298      	cmp	r0, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3902      	subs	r1, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a1b      	subs	r3, r3, r0
 800046a:	b2ad      	uxth	r5, r5
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3310 	mls	r3, r7, r0, r3
 8000474:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000478:	fb00 f30e 	mul.w	r3, r0, lr
 800047c:	42ab      	cmp	r3, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 38ff 	add.w	r8, r0, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	42ab      	cmp	r3, r5
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	1aed      	subs	r5, r5, r3
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e707      	b.n	80002b0 <__udivmoddi4+0xa8>
 80004a0:	4686      	mov	lr, r0
 80004a2:	e6e5      	b.n	8000270 <__udivmoddi4+0x68>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fa      	b.n	800029e <__udivmoddi4+0x96>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4641      	mov	r1, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4465      	add	r5, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <calc_pulse>:

static int8_t value;

//Normal NEC protocol
static pulse_t calc_pulse(uint32_t time)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2bf9      	cmp	r3, #249	; 0xf9
 80004e8:	d801      	bhi.n	80004ee <calc_pulse+0x12>
		return PULSE_ERROR;
 80004ea:	2305      	movs	r3, #5
 80004ec:	e021      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 1200)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80004f4:	d201      	bcs.n	80004fa <calc_pulse+0x1e>
		return PULSE_SHORT;
 80004f6:	2304      	movs	r3, #4
 80004f8:	e01b      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 2000)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000500:	d201      	bcs.n	8000506 <calc_pulse+0x2a>
		return PULSE_LONG;
 8000502:	2303      	movs	r3, #3
 8000504:	e015      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 3000)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800050c:	4293      	cmp	r3, r2
 800050e:	d801      	bhi.n	8000514 <calc_pulse+0x38>
		return PULSE_2MS;
 8000510:	2302      	movs	r3, #2
 8000512:	e00e      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 6000)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f241 726f 	movw	r2, #5999	; 0x176f
 800051a:	4293      	cmp	r3, r2
 800051c:	d801      	bhi.n	8000522 <calc_pulse+0x46>
		return PULSE_4MS;
 800051e:	2301      	movs	r3, #1
 8000520:	e007      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 12000)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000528:	4293      	cmp	r3, r2
 800052a:	d801      	bhi.n	8000530 <calc_pulse+0x54>
		return PULSE_9MS;
 800052c:	2300      	movs	r3, #0
 800052e:	e000      	b.n	8000532 <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000530:	2305      	movs	r3, #5
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <ir_tim_interrupt>:
	else
		return PULSE_ERROR;
}

void ir_tim_interrupt(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 8000542:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <ir_tim_interrupt+0xa4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b1f      	cmp	r3, #31
 8000548:	dc43      	bgt.n	80005d2 <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1));
 800054a:	2100      	movs	r1, #0
 800054c:	4825      	ldr	r0, [pc, #148]	; (80005e4 <ir_tim_interrupt+0xa8>)
 800054e:	f004 fc55 	bl	8004dfc <HAL_TIM_ReadCapturedValue>
 8000552:	4603      	mov	r3, r0
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffc1 	bl	80004dc <calc_pulse>
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	3b01      	subs	r3, #1
 8000562:	2b03      	cmp	r3, #3
 8000564:	d831      	bhi.n	80005ca <ir_tim_interrupt+0x8e>
 8000566:	a201      	add	r2, pc, #4	; (adr r2, 800056c <ir_tim_interrupt+0x30>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	080005ad 	.word	0x080005ad
 8000570:	080005bb 	.word	0x080005bb
 8000574:	08000593 	.word	0x08000593
 8000578:	0800057d 	.word	0x0800057d
	case PULSE_SHORT:
		received_value = received_value >> 1;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <ir_tim_interrupt+0xac>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	085b      	lsrs	r3, r3, #1
 8000582:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <ir_tim_interrupt+0xac>)
 8000584:	6013      	str	r3, [r2, #0]
		received_bits++;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <ir_tim_interrupt+0xa4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <ir_tim_interrupt+0xa4>)
 800058e:	6013      	str	r3, [r2, #0]
		break;
 8000590:	e022      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <ir_tim_interrupt+0xac>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	085b      	lsrs	r3, r3, #1
 8000598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <ir_tim_interrupt+0xac>)
 800059e:	6013      	str	r3, [r2, #0]
		received_bits++;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005a8:	6013      	str	r3, [r2, #0]
		break;
 80005aa:	e015      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <ir_tim_interrupt+0xac>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
		break;
 80005b8:	e00e      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if (received_bits == 0)
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d109      	bne.n	80005d6 <ir_tim_interrupt+0x9a>
			received_bits = 32;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005c4:	2220      	movs	r2, #32
 80005c6:	601a      	str	r2, [r3, #0]
		break;
 80005c8:	e005      	b.n	80005d6 <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
		break;
 80005d0:	e002      	b.n	80005d8 <ir_tim_interrupt+0x9c>
		return;
 80005d2:	bf00      	nop
 80005d4:	e000      	b.n	80005d8 <ir_tim_interrupt+0x9c>
		break;
 80005d6:	bf00      	nop
	}
}
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000054 	.word	0x20000054
 80005e4:	2000014c 	.word	0x2000014c
 80005e8:	20000050 	.word	0x20000050

080005ec <ir_receiver_init>:

void ir_receiver_init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim3);
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <ir_receiver_init+0x18>)
 80005f2:	f003 fcb7 	bl	8003f64 <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005f6:	2100      	movs	r1, #0
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <ir_receiver_init+0x18>)
 80005fa:	f003 fec7 	bl	800438c <HAL_TIM_IC_Start_IT>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000014c 	.word	0x2000014c

08000608 <ir_read>:

int ir_read(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <ir_read+0x38>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b20      	cmp	r3, #32
 8000612:	d002      	beq.n	800061a <ir_read+0x12>
		return -1;
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	e00e      	b.n	8000638 <ir_read+0x30>

	value = received_value >> 16;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <ir_read+0x3c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	0c1b      	lsrs	r3, r3, #16
 8000620:	b25a      	sxtb	r2, r3
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <ir_read+0x40>)
 8000624:	701a      	strb	r2, [r3, #0]
	received_value = 0;
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <ir_read+0x3c>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
	received_bits = 0;
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <ir_read+0x38>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
	return value;
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <ir_read+0x40>)
 8000634:	f993 3000 	ldrsb.w	r3, [r3]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	20000054 	.word	0x20000054
 8000644:	20000050 	.word	0x20000050
 8000648:	20000058 	.word	0x20000058

0800064c <ir_disable_interrupt>:

//Interrupt en/d

void ir_disable_interrupt(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000650:	2100      	movs	r1, #0
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <ir_disable_interrupt+0x10>)
 8000654:	f003 ffb4 	bl	80045c0 <HAL_TIM_IC_Stop_IT>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000014c 	.word	0x2000014c

08000660 <ir_enable_interrupt>:

void ir_enable_interrupt(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000664:	2100      	movs	r1, #0
 8000666:	4802      	ldr	r0, [pc, #8]	; (8000670 <ir_enable_interrupt+0x10>)
 8000668:	f003 fe90 	bl	800438c <HAL_TIM_IC_Start_IT>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000014c 	.word	0x2000014c

08000674 <ir_sender_init>:
#include "ir_sender.h"
#include "tim.h"

void ir_sender_init(void){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Nie potrzebne bo start jest przy wysyłaniu komendy
    HAL_TIM_Base_Start(&htim2);
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <ir_sender_init+0x10>)
 800067a:	f003 fc73 	bl	8003f64 <HAL_TIM_Base_Start>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000104 	.word	0x20000104

08000688 <delay_us>:


void delay_us (uint16_t delay){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <delay_us+0x2c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2)<delay);
 800069a:	bf00      	nop
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <delay_us+0x2c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3f9      	bcc.n	800069c <delay_us+0x14>
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000104 	.word	0x20000104

080006b8 <NEC_SendCommand>:


// Funkcja do wysyłania całej komendy NEC
void NEC_SendCommand(uint8_t command) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
    // Wyślij ramkę startową
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Start nośnej
 80006c2:	2100      	movs	r1, #0
 80006c4:	4841      	ldr	r0, [pc, #260]	; (80007cc <NEC_SendCommand+0x114>)
 80006c6:	f003 fcf5 	bl	80040b4 <HAL_TIM_PWM_Start>
    delay_us(NEC_START_PULSE);         // Impuls 9ms
 80006ca:	f242 3028 	movw	r0, #9000	; 0x2328
 80006ce:	f7ff ffdb 	bl	8000688 <delay_us>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Stop nośnej
 80006d2:	2100      	movs	r1, #0
 80006d4:	483d      	ldr	r0, [pc, #244]	; (80007cc <NEC_SendCommand+0x114>)
 80006d6:	f003 fd9d 	bl	8004214 <HAL_TIM_PWM_Stop>
    delay_us(NEC_START_PAUSE);         // Pauza 4.5ms
 80006da:	f241 1094 	movw	r0, #4500	; 0x1194
 80006de:	f7ff ffd3 	bl	8000688 <delay_us>


    //Adres i negacja adresu
    for (int i = 0; i < 8; i++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	e012      	b.n	800070e <NEC_SendCommand+0x56>
    	// Zawsze najpierw krótki impuls 560µs
    	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80006e8:	2100      	movs	r1, #0
 80006ea:	4838      	ldr	r0, [pc, #224]	; (80007cc <NEC_SendCommand+0x114>)
 80006ec:	f003 fce2 	bl	80040b4 <HAL_TIM_PWM_Start>
    	    delay_us(NEC_PULSE);
 80006f0:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006f4:	f7ff ffc8 	bl	8000688 <delay_us>
    	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80006f8:	2100      	movs	r1, #0
 80006fa:	4834      	ldr	r0, [pc, #208]	; (80007cc <NEC_SendCommand+0x114>)
 80006fc:	f003 fd8a 	bl	8004214 <HAL_TIM_PWM_Stop>
    	    delay_us(NEC_PAUSE_0);
 8000700:	f44f 700c 	mov.w	r0, #560	; 0x230
 8000704:	f7ff ffc0 	bl	8000688 <delay_us>
    for (int i = 0; i < 8; i++) {
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	3301      	adds	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b07      	cmp	r3, #7
 8000712:	dde9      	ble.n	80006e8 <NEC_SendCommand+0x30>
    }

    for (int i = 0; i < 8; i++) {
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	e012      	b.n	8000740 <NEC_SendCommand+0x88>
        	// Zawsze najpierw krótki impuls 560µs
        	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 800071a:	2100      	movs	r1, #0
 800071c:	482b      	ldr	r0, [pc, #172]	; (80007cc <NEC_SendCommand+0x114>)
 800071e:	f003 fcc9 	bl	80040b4 <HAL_TIM_PWM_Start>
        	    delay_us(NEC_PULSE);
 8000722:	f44f 700c 	mov.w	r0, #560	; 0x230
 8000726:	f7ff ffaf 	bl	8000688 <delay_us>
        	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 800072a:	2100      	movs	r1, #0
 800072c:	4827      	ldr	r0, [pc, #156]	; (80007cc <NEC_SendCommand+0x114>)
 800072e:	f003 fd71 	bl	8004214 <HAL_TIM_PWM_Stop>
        	    delay_us(NEC_PAUSE_1);
 8000732:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8000736:	f7ff ffa7 	bl	8000688 <delay_us>
    for (int i = 0; i < 8; i++) {
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	3301      	adds	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	2b07      	cmp	r3, #7
 8000744:	dde9      	ble.n	800071a <NEC_SendCommand+0x62>
        }

    // Wyślij bity komendy (zakładamy 8-bitową komendę)
    for (int i = 0; i < 8; i++) {
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	e00d      	b.n	8000768 <NEC_SendCommand+0xb0>
        NEC_SendBit((command >> i) & 0x01);
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	fa42 f303 	asr.w	r3, r2, r3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f837 	bl	80007d0 <NEC_SendBit>
    for (int i = 0; i < 8; i++) {
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b07      	cmp	r3, #7
 800076c:	ddee      	ble.n	800074c <NEC_SendCommand+0x94>
    }

    // Wyślij bity zanegowanej komendy (zakładamy 8-bitową komendę)
        for (int i = 0; i < 8; i++) {
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	e010      	b.n	8000796 <NEC_SendCommand+0xde>
            NEC_SendBit(~(command >> i) & 0x01);
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	fa42 f303 	asr.w	r3, r2, r3
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf0c      	ite	eq
 8000784:	2301      	moveq	r3, #1
 8000786:	2300      	movne	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f820 	bl	80007d0 <NEC_SendBit>
        for (int i = 0; i < 8; i++) {
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	3301      	adds	r3, #1
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	2b07      	cmp	r3, #7
 800079a:	ddeb      	ble.n	8000774 <NEC_SendCommand+0xbc>
        }

        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 800079c:	2100      	movs	r1, #0
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <NEC_SendCommand+0x114>)
 80007a0:	f003 fc88 	bl	80040b4 <HAL_TIM_PWM_Start>
                	    delay_us(NEC_PULSE);
 80007a4:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007a8:	f7ff ff6e 	bl	8000688 <delay_us>
                	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80007ac:	2100      	movs	r1, #0
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <NEC_SendCommand+0x114>)
 80007b0:	f003 fd30 	bl	8004214 <HAL_TIM_PWM_Stop>
                	    delay_us(NEC_PAUSE_1);
 80007b4:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 80007b8:	f7ff ff66 	bl	8000688 <delay_us>

    // Opcjonalnie dodaj pauzę końcową
    delay_us(560);  // Koniec transmisji
 80007bc:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007c0:	f7ff ff62 	bl	8000688 <delay_us>
}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200000bc 	.word	0x200000bc

080007d0 <NEC_SendBit>:

// Funkcja do wysyłania pojedynczego bitu
void NEC_SendBit(uint8_t bit) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
    // Zawsze najpierw krótki impuls 560µs
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80007da:	2100      	movs	r1, #0
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <NEC_SendBit+0x44>)
 80007de:	f003 fc69 	bl	80040b4 <HAL_TIM_PWM_Start>
    delay_us(NEC_PULSE);
 80007e2:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007e6:	f7ff ff4f 	bl	8000688 <delay_us>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80007ea:	2100      	movs	r1, #0
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <NEC_SendBit+0x44>)
 80007ee:	f003 fd11 	bl	8004214 <HAL_TIM_PWM_Stop>

    // Pauza zależna od wartości bitu (bit 0 - 560µs, bit 1 - 1680µs)
    if (bit == 0) {
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d104      	bne.n	8000802 <NEC_SendBit+0x32>
    	delay_us(NEC_PAUSE_0);
 80007f8:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007fc:	f7ff ff44 	bl	8000688 <delay_us>
    } else {
    	delay_us(NEC_PAUSE_1);
    }
}
 8000800:	e003      	b.n	800080a <NEC_SendBit+0x3a>
    	delay_us(NEC_PAUSE_1);
 8000802:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8000806:	f7ff ff3f 	bl	8000688 <delay_us>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000bc 	.word	0x200000bc

08000818 <HAL_TIM_IC_CaptureCallback>:
static void MX_USART1_UART_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a09      	ldr	r2, [pc, #36]	; (8000848 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d108      	bne.n	800083a <HAL_TIM_IC_CaptureCallback+0x22>
  {
    switch (HAL_TIM_GetActiveChannel(&htim3))
 8000828:	4807      	ldr	r0, [pc, #28]	; (8000848 <HAL_TIM_IC_CaptureCallback+0x30>)
 800082a:	f004 fb4f 	bl	8004ecc <HAL_TIM_GetActiveChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d104      	bne.n	800083e <HAL_TIM_IC_CaptureCallback+0x26>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 8000834:	f7ff fe82 	bl	800053c <ir_tim_interrupt>
        break;
 8000838:	e002      	b.n	8000840 <HAL_TIM_IC_CaptureCallback+0x28>
      default:
        break;
    }
  }
 800083a:	bf00      	nop
 800083c:	e000      	b.n	8000840 <HAL_TIM_IC_CaptureCallback+0x28>
        break;
 800083e:	bf00      	nop
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000014c 	.word	0x2000014c

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000852:	f001 fda7 	bl	80023a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000856:	f000 f8fd 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f000 fb33 	bl	8000ec4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800085e:	f000 f9ab 	bl	8000bb8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000862:	f000 fa2d 	bl	8000cc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000866:	f000 fa77 	bl	8000d58 <MX_TIM3_Init>
  MX_SPI2_Init();
 800086a:	f000 f96f 	bl	8000b4c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800086e:	f000 faff 	bl	8000e70 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000872:	f000 f957 	bl	8000b24 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  //nRF Config
  nRF24_Init(&hspi2);
 8000876:	4867      	ldr	r0, [pc, #412]	; (8000a14 <main+0x1c8>)
 8000878:	f000 fff6 	bl	8001868 <nRF24_Init>

  //Random message generation- First message is the same after each reset until additional source of rng will be addded
  RSA_Driver_Get_Random_Message();
 800087c:	f001 fa48 	bl	8001d10 <RSA_Driver_Get_Random_Message>

  __CRC_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b64      	ldr	r3, [pc, #400]	; (8000a18 <main+0x1cc>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	4a63      	ldr	r2, [pc, #396]	; (8000a18 <main+0x1cc>)
 800088a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
 8000890:	4b61      	ldr	r3, [pc, #388]	; (8000a18 <main+0x1cc>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  nRF24_SetRXAddress(0,(uint8_t *)"Nad");
 800089c:	495f      	ldr	r1, [pc, #380]	; (8000a1c <main+0x1d0>)
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 fe8f 	bl	80015c2 <nRF24_SetRXAddress>
  nRF24_SetTXAddress((uint8_t *)"Nad");
 80008a4:	485d      	ldr	r0, [pc, #372]	; (8000a1c <main+0x1d0>)
 80008a6:	f000 fec5 	bl	8001634 <nRF24_SetTXAddress>

  //IR Config
  ir_sender_init();
 80008aa:	f7ff fee3 	bl	8000674 <ir_sender_init>
  ir_receiver_init();
 80008ae:	f7ff fe9d 	bl	80005ec <ir_receiver_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch (transmission_step) {
 80008b2:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <main+0x1d4>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b07      	cmp	r3, #7
 80008b8:	d8fb      	bhi.n	80008b2 <main+0x66>
 80008ba:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <main+0x74>)
 80008bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c0:	080008e1 	.word	0x080008e1
 80008c4:	08000937 	.word	0x08000937
 80008c8:	0800097f 	.word	0x0800097f
 80008cc:	0800099d 	.word	0x0800099d
 80008d0:	080009b9 	.word	0x080009b9
 80008d4:	080009c5 	.word	0x080009c5
 80008d8:	080009df 	.word	0x080009df
 80008dc:	080009ef 	.word	0x080009ef
	    case 0: {
	      value = ir_read();
 80008e0:	f7ff fe92 	bl	8000608 <ir_read>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	4b4e      	ldr	r3, [pc, #312]	; (8000a24 <main+0x1d8>)
 80008ea:	701a      	strb	r2, [r3, #0]
	      if (value != -1) {
 80008ec:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <main+0x1d8>)
 80008ee:	f993 3000 	ldrsb.w	r3, [r3]
 80008f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f6:	f000 8085 	beq.w	8000a04 <main+0x1b8>
	        if (value >= 10 || value <= 255) {
	          ir_disable_interrupt();
 80008fa:	f7ff fea7 	bl	800064c <ir_disable_interrupt>
	          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000902:	4849      	ldr	r0, [pc, #292]	; (8000a28 <main+0x1dc>)
 8000904:	f002 f8a4 	bl	8002a50 <HAL_GPIO_TogglePin>
			    /////////////////////////////////////WIADOMOSC TESTOWA/////////////////////////////////////////
			    HAL_UART_Transmit(&huart1, "Numer pojazdu:\n", 15, 1000);
 8000908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090c:	220f      	movs	r2, #15
 800090e:	4947      	ldr	r1, [pc, #284]	; (8000a2c <main+0x1e0>)
 8000910:	4847      	ldr	r0, [pc, #284]	; (8000a30 <main+0x1e4>)
 8000912:	f005 f86f 	bl	80059f4 <HAL_UART_Transmit>
			    HAL_UART_Transmit(&huart1, value + "\n", 2, 1000);
 8000916:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <main+0x1d8>)
 8000918:	f993 3000 	ldrsb.w	r3, [r3]
 800091c:	461a      	mov	r2, r3
 800091e:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <main+0x1e8>)
 8000920:	18d1      	adds	r1, r2, r3
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	2202      	movs	r2, #2
 8000928:	4841      	ldr	r0, [pc, #260]	; (8000a30 <main+0x1e4>)
 800092a:	f005 f863 	bl	80059f4 <HAL_UART_Transmit>
			    /////////////////////////////////////WIADOMOSC TESTOWA/////////////////////////////////////////
	          transmission_step = 1;
 800092e:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <main+0x1d4>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
	        }
	      }
	      break;
 8000934:	e066      	b.n	8000a04 <main+0x1b8>
	    }

	    case 1: {
	      currentTime = HAL_GetTick();  // Pobranie aktualnego czasu w ms
 8000936:	f001 fd99 	bl	800246c <HAL_GetTick>
 800093a:	4603      	mov	r3, r0
 800093c:	4a3e      	ldr	r2, [pc, #248]	; (8000a38 <main+0x1ec>)
 800093e:	6013      	str	r3, [r2, #0]
	      if ((currentTime - lastCommandTime) >= 1000) {
 8000940:	4b3d      	ldr	r3, [pc, #244]	; (8000a38 <main+0x1ec>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <main+0x1f0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800094e:	d30e      	bcc.n	800096e <main+0x122>
	        NEC_SendCommand(command);       // Wysłanie komendy
 8000950:	4b3b      	ldr	r3, [pc, #236]	; (8000a40 <main+0x1f4>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff feaf 	bl	80006b8 <NEC_SendCommand>
	        lastCommandTime = currentTime;  // Aktualizacja czasu ostatniego wysłania
 800095a:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <main+0x1ec>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a37      	ldr	r2, [pc, #220]	; (8000a3c <main+0x1f0>)
 8000960:	6013      	str	r3, [r2, #0]
	        ir_send_counter += 1;
 8000962:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <main+0x1f8>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <main+0x1f8>)
 800096c:	701a      	strb	r2, [r3, #0]
	      }
	      if (ir_send_counter == 6) {
 800096e:	4b35      	ldr	r3, [pc, #212]	; (8000a44 <main+0x1f8>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b06      	cmp	r3, #6
 8000974:	d148      	bne.n	8000a08 <main+0x1bc>
	        transmission_step = 2;
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <main+0x1d4>)
 8000978:	2202      	movs	r2, #2
 800097a:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 800097c:	e044      	b.n	8000a08 <main+0x1bc>
	    }

	    case 2: {
	    	Encrypt_And_Add_Random_Message(value-10);
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <main+0x1d8>)
 8000980:	f993 3000 	ldrsb.w	r3, [r3]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	3b0a      	subs	r3, #10
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f9de 	bl	8001d4c <Encrypt_And_Add_Random_Message>
	      nRF24_TX_Mode();
 8000990:	f000 fc40 	bl	8001214 <nRF24_TX_Mode>
	      transmission_step = 3;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <main+0x1d4>)
 8000996:	2203      	movs	r2, #3
 8000998:	701a      	strb	r2, [r3, #0]
	      break;
 800099a:	e03a      	b.n	8000a12 <main+0x1c6>
	    }

	    case 3: {
	      sd_status = send_message(50);
 800099c:	2032      	movs	r0, #50	; 0x32
 800099e:	f001 f97d 	bl	8001c9c <send_message>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <main+0x1fc>)
 80009a6:	6013      	str	r3, [r2, #0]
	      if (sd_status == 1) {
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <main+0x1fc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d12d      	bne.n	8000a0c <main+0x1c0>
	        transmission_step = 4;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <main+0x1d4>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 80009b6:	e029      	b.n	8000a0c <main+0x1c0>
	    }

	    case 4: {
	      nRF24_RX_Mode();
 80009b8:	f000 fbf8 	bl	80011ac <nRF24_RX_Mode>

	      transmission_step = 5;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <main+0x1d4>)
 80009be:	2205      	movs	r2, #5
 80009c0:	701a      	strb	r2, [r3, #0]
	      break;
 80009c2:	e026      	b.n	8000a12 <main+0x1c6>
	    }

	    case 5: {
	      rv_status = receive_message();
 80009c4:	f001 f866 	bl	8001a94 <receive_message>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <main+0x200>)
 80009cc:	6013      	str	r3, [r2, #0]
	      if (rv_status == 1) {
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <main+0x200>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d11c      	bne.n	8000a10 <main+0x1c4>
	        transmission_step = 6;
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <main+0x1d4>)
 80009d8:	2206      	movs	r2, #6
 80009da:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 80009dc:	e018      	b.n	8000a10 <main+0x1c4>
	    }
	    case 6: {
	      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009de:	2102      	movs	r1, #2
 80009e0:	481b      	ldr	r0, [pc, #108]	; (8000a50 <main+0x204>)
 80009e2:	f002 f835 	bl	8002a50 <HAL_GPIO_TogglePin>
	      transmission_step = 7;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <main+0x1d4>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	701a      	strb	r2, [r3, #0]
	      break;
 80009ec:	e011      	b.n	8000a12 <main+0x1c6>
	    }

	    case 7: {
	      transmission_step = 0;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <main+0x1d4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
	      //value = -1;
	      ir_enable_interrupt();
 80009f4:	f7ff fe34 	bl	8000660 <ir_enable_interrupt>
	      ir_send_counter = 0;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <main+0x1f8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
	      RSA_Driver_Get_Random_Message();
 80009fe:	f001 f987 	bl	8001d10 <RSA_Driver_Get_Random_Message>
	      break;
 8000a02:	e006      	b.n	8000a12 <main+0x1c6>
	      break;
 8000a04:	bf00      	nop
 8000a06:	e754      	b.n	80008b2 <main+0x66>
	      break;
 8000a08:	bf00      	nop
 8000a0a:	e752      	b.n	80008b2 <main+0x66>
	      break;
 8000a0c:	bf00      	nop
 8000a0e:	e750      	b.n	80008b2 <main+0x66>
	      break;
 8000a10:	bf00      	nop
	  switch (transmission_step) {
 8000a12:	e74e      	b.n	80008b2 <main+0x66>
 8000a14:	20000064 	.word	0x20000064
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	08008738 	.word	0x08008738
 8000a20:	200001e0 	.word	0x200001e0
 8000a24:	200001e2 	.word	0x200001e2
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	0800873c 	.word	0x0800873c
 8000a30:	20000194 	.word	0x20000194
 8000a34:	0800874c 	.word	0x0800874c
 8000a38:	200001e4 	.word	0x200001e4
 8000a3c:	200001dc 	.word	0x200001dc
 8000a40:	20000000 	.word	0x20000000
 8000a44:	200001e1 	.word	0x200001e1
 8000a48:	200001ec 	.word	0x200001ec
 8000a4c:	200001e8 	.word	0x200001e8
 8000a50:	40020000 	.word	0x40020000

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0320 	add.w	r3, r7, #32
 8000a5e:	2230      	movs	r2, #48	; 0x30
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f007 fe54 	bl	8008710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <SystemClock_Config+0xc8>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <SystemClock_Config+0xc8>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <SystemClock_Config+0xc8>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <SystemClock_Config+0xcc>)
 8000a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <SystemClock_Config+0xcc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fff5 	bl	8002ac8 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae4:	f000 fa8e 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2302      	movs	r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2103      	movs	r1, #3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f002 fa57 	bl	8002fb8 <HAL_RCC_ClockConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b10:	f000 fa78 	bl	8001004 <Error_Handler>
  }
}
 8000b14:	bf00      	nop
 8000b16:	3750      	adds	r7, #80	; 0x50
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_CRC_Init+0x20>)
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <MX_CRC_Init+0x24>)
 8000b2c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_CRC_Init+0x20>)
 8000b30:	f001 fdd7 	bl	80026e2 <HAL_CRC_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b3a:	f000 fa63 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000005c 	.word	0x2000005c
 8000b48:	40023000 	.word	0x40023000

08000b4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b52:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <MX_SPI2_Init+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b80:	2210      	movs	r2, #16
 8000b82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_SPI2_Init+0x64>)
 8000b9e:	f002 fbe9 	bl	8003374 <HAL_SPI_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ba8:	f000 fa2c 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000064 	.word	0x20000064
 8000bb4:	40003800 	.word	0x40003800

08000bb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b092      	sub	sp, #72	; 0x48
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]
 8000bda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2220      	movs	r2, #32
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f007 fd94 	bl	8008710 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000bea:	4a34      	ldr	r2, [pc, #208]	; (8000cbc <MX_TIM1_Init+0x104>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2631;
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000bfc:	f640 2247 	movw	r2, #2631	; 0xa47
 8000c00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c08:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c14:	4828      	ldr	r0, [pc, #160]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000c16:	f003 f9fd 	bl	8004014 <HAL_TIM_PWM_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c20:	f000 f9f0 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c30:	4619      	mov	r1, r3
 8000c32:	4821      	ldr	r0, [pc, #132]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000c34:	f004 fdc2 	bl	80057bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c3e:	f000 f9e1 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c42:	2360      	movs	r3, #96	; 0x60
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1315;
 8000c46:	f240 5323 	movw	r3, #1315	; 0x523
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c50:	2300      	movs	r3, #0
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	2200      	movs	r2, #0
 8000c66:	4619      	mov	r1, r3
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000c6a:	f003 fefb 	bl	8004a64 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c74:	f000 f9c6 	bl	8001004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000c9c:	f004 fdfa 	bl	8005894 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000ca6:	f000 f9ad 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000caa:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <MX_TIM1_Init+0x100>)
 8000cac:	f001 fa86 	bl	80021bc <HAL_TIM_MspPostInit>

}
 8000cb0:	bf00      	nop
 8000cb2:	3748      	adds	r7, #72	; 0x48
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000bc 	.word	0x200000bc
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_TIM2_Init+0x94>)
 8000cde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_TIM2_Init+0x94>)
 8000ce6:	2263      	movs	r2, #99	; 0x63
 8000ce8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_TIM2_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_TIM2_Init+0x94>)
 8000cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_TIM2_Init+0x94>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_TIM2_Init+0x94>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d04:	4813      	ldr	r0, [pc, #76]	; (8000d54 <MX_TIM2_Init+0x94>)
 8000d06:	f003 f8dd 	bl	8003ec4 <HAL_TIM_Base_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d10:	f000 f978 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <MX_TIM2_Init+0x94>)
 8000d22:	f003 ff61 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d2c:	f000 f96a 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_TIM2_Init+0x94>)
 8000d3e:	f004 fd3d 	bl	80057bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d48:	f000 f95c 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000104 	.word	0x20000104

08000d58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b090      	sub	sp, #64	; 0x40
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000d94:	4a35      	ldr	r2, [pc, #212]	; (8000e6c <MX_TIM3_Init+0x114>)
 8000d96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000d98:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000d9a:	2263      	movs	r2, #99	; 0x63
 8000d9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9e:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000daa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000db8:	482b      	ldr	r0, [pc, #172]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000dba:	f003 f883 	bl	8003ec4 <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000dc4:	f000 f91e 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4824      	ldr	r0, [pc, #144]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000dd6:	f003 ff07 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000de0:	f000 f910 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000de4:	4820      	ldr	r0, [pc, #128]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000de6:	f003 fa79 	bl	80042dc <HAL_TIM_IC_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000df0:	f000 f908 	bl	8001004 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000df4:	2304      	movs	r3, #4
 8000df6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4817      	ldr	r0, [pc, #92]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000e0c:	f003 ffb3 	bl	8004d76 <HAL_TIM_SlaveConfigSynchro>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000e16:	f000 f8f5 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	480f      	ldr	r0, [pc, #60]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000e2a:	f004 fcc7 	bl	80057bc <HAL_TIMEx_MasterConfigSynchronization>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000e34:	f000 f8e6 	bl	8001004 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_TIM3_Init+0x110>)
 8000e50:	f003 fd6c 	bl	800492c <HAL_TIM_IC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000e5a:	f000 f8d3 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3740      	adds	r7, #64	; 0x40
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000014c 	.word	0x2000014c
 8000e6c:	40000400 	.word	0x40000400

08000e70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_USART1_UART_Init+0x50>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART1_UART_Init+0x4c>)
 8000ea8:	f004 fd57 	bl	800595a <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eb2:	f000 f8a7 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000194 	.word	0x20000194
 8000ec0:	40011000 	.word	0x40011000

08000ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b45      	ldr	r3, [pc, #276]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a44      	ldr	r2, [pc, #272]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a3d      	ldr	r2, [pc, #244]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a36      	ldr	r2, [pc, #216]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a2f      	ldr	r2, [pc, #188]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <MX_GPIO_Init+0x130>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f50:	4829      	ldr	r0, [pc, #164]	; (8000ff8 <MX_GPIO_Init+0x134>)
 8000f52:	f001 fd65 	bl	8002a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4828      	ldr	r0, [pc, #160]	; (8000ffc <MX_GPIO_Init+0x138>)
 8000f5c:	f001 fd60 	bl	8002a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_NRF_Pin|CS_NRF_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2118      	movs	r1, #24
 8000f64:	4826      	ldr	r0, [pc, #152]	; (8001000 <MX_GPIO_Init+0x13c>)
 8000f66:	f001 fd5b 	bl	8002a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	481d      	ldr	r0, [pc, #116]	; (8000ff8 <MX_GPIO_Init+0x134>)
 8000f84:	f001 fbca 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <MX_GPIO_Init+0x138>)
 8000fa0:	f001 fbbc 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_NRF_Pin CS_NRF_Pin */
  GPIO_InitStruct.Pin = CE_NRF_Pin|CS_NRF_Pin;
 8000fa4:	2318      	movs	r3, #24
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4811      	ldr	r0, [pc, #68]	; (8001000 <MX_GPIO_Init+0x13c>)
 8000fbc:	f001 fbae 	bl	800271c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_NRF_Pin */
  GPIO_InitStruct.Pin = IRQ_NRF_Pin;
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fc4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_NRF_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480a      	ldr	r0, [pc, #40]	; (8001000 <MX_GPIO_Init+0x13c>)
 8000fd6:	f001 fba1 	bl	800271c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2017      	movs	r0, #23
 8000fe0:	f001 fb49 	bl	8002676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fe4:	2017      	movs	r0, #23
 8000fe6:	f001 fb62 	bl	80026ae <HAL_NVIC_EnableIRQ>

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>

0800100e <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fa30 	bl	8002480 <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <nRF24_SendSpi+0x28>)
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	b29a      	uxth	r2, r3
 800103c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	f002 fa20 	bl	8003486 <HAL_SPI_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001f0 	.word	0x200001f0

08001054 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <nRF24_ReadSpi+0x28>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	b29a      	uxth	r2, r3
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	f002 fb46 	bl	80036fe <HAL_SPI_Receive>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200001f0 	.word	0x200001f0

08001080 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800108e:	2200      	movs	r2, #0
 8001090:	2110      	movs	r1, #16
 8001092:	480c      	ldr	r0, [pc, #48]	; (80010c4 <nRF24_ReadRegister+0x44>)
 8001094:	f001 fcc4 	bl	8002a20 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	2101      	movs	r1, #1
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ffc3 	bl	8001028 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 80010a2:	f107 030f 	add.w	r3, r7, #15
 80010a6:	2101      	movs	r1, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ffd3 	bl	8001054 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 80010ae:	2201      	movs	r2, #1
 80010b0:	2110      	movs	r1, #16
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <nRF24_ReadRegister+0x44>)
 80010b4:	f001 fcb4 	bl	8002a20 <HAL_GPIO_WritePin>

	return result;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020400 	.word	0x40020400

080010c8 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80010dc:	2200      	movs	r2, #0
 80010de:	2110      	movs	r1, #16
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <nRF24_ReadRegisters+0x44>)
 80010e2:	f001 fc9d 	bl	8002a20 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff9c 	bl	8001028 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f7ff ffad 	bl	8001054 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80010fa:	2201      	movs	r2, #1
 80010fc:	2110      	movs	r1, #16
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <nRF24_ReadRegisters+0x44>)
 8001100:	f001 fc8e 	bl	8002a20 <HAL_GPIO_WritePin>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40020400 	.word	0x40020400

08001110 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f043 0320 	orr.w	r3, r3, #32
 8001126:	b2db      	uxtb	r3, r3
 8001128:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 800112e:	2200      	movs	r2, #0
 8001130:	2110      	movs	r1, #16
 8001132:	4809      	ldr	r0, [pc, #36]	; (8001158 <nRF24_WriteRegister+0x48>)
 8001134:	f001 fc74 	bl	8002a20 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2102      	movs	r1, #2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff72 	bl	8001028 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001144:	2201      	movs	r2, #1
 8001146:	2110      	movs	r1, #16
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <nRF24_WriteRegister+0x48>)
 800114a:	f001 fc69 	bl	8002a20 <HAL_GPIO_WritePin>
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020400 	.word	0x40020400

0800115c <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f043 0320 	orr.w	r3, r3, #32
 8001172:	b2db      	uxtb	r3, r3
 8001174:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001176:	2200      	movs	r2, #0
 8001178:	2110      	movs	r1, #16
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <nRF24_WriteRegisters+0x4c>)
 800117c:	f001 fc50 	bl	8002a20 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff4f 	bl	8001028 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	4619      	mov	r1, r3
 800118e:	6838      	ldr	r0, [r7, #0]
 8001190:	f7ff ff4a 	bl	8001028 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001194:	2201      	movs	r2, #1
 8001196:	2110      	movs	r1, #16
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <nRF24_WriteRegisters+0x4c>)
 800119a:	f001 fc41 	bl	8002a20 <HAL_GPIO_WritePin>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40020400 	.word	0x40020400

080011ac <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 80011b2:	2200      	movs	r2, #0
 80011b4:	2108      	movs	r1, #8
 80011b6:	4815      	ldr	r0, [pc, #84]	; (800120c <nRF24_RX_Mode+0x60>)
 80011b8:	f001 fc32 	bl	8002a20 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 80011bc:	f000 f852 	bl	8001264 <nRF24_ReadConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 80011c4:	4912      	ldr	r1, [pc, #72]	; (8001210 <nRF24_RX_Mode+0x64>)
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f9fb 	bl	80015c2 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f848 	bl	8001274 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80011e4:	2070      	movs	r0, #112	; 0x70
 80011e6:	f000 f8a0 	bl	800132a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80011ea:	f000 f8ad 	bl	8001348 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80011ee:	f000 f8c5 	bl	800137c <nRF24_FlushTX>

	NRF24_CE_HIGH;
 80011f2:	2201      	movs	r2, #1
 80011f4:	2108      	movs	r1, #8
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <nRF24_RX_Mode+0x60>)
 80011f8:	f001 fc12 	bl	8002a20 <HAL_GPIO_WritePin>
	nRF24_Delay(20);
 80011fc:	2014      	movs	r0, #20
 80011fe:	f7ff ff06 	bl	800100e <nRF24_Delay>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020400 	.word	0x40020400
 8001210:	200001f4 	.word	0x200001f4

08001214 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 800121a:	2200      	movs	r2, #0
 800121c:	2108      	movs	r1, #8
 800121e:	4810      	ldr	r0, [pc, #64]	; (8001260 <nRF24_TX_Mode+0x4c>)
 8001220:	f001 fbfe 	bl	8002a20 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001224:	f000 f81e 	bl	8001264 <nRF24_ReadConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f818 	bl	8001274 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001244:	2070      	movs	r0, #112	; 0x70
 8001246:	f000 f870 	bl	800132a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800124a:	f000 f87d 	bl	8001348 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 800124e:	f000 f895 	bl	800137c <nRF24_FlushTX>

	nRF24_Delay(20);
 8001252:	2014      	movs	r0, #20
 8001254:	f7ff fedb 	bl	800100e <nRF24_Delay>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40020400 	.word	0x40020400

08001264 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff ff09 	bl	8001080 <nRF24_ReadRegister>
 800126e:	4603      	mov	r3, r0
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}

08001274 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4619      	mov	r1, r3
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff ff44 	bl	8001110 <nRF24_WriteRegister>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800129a:	2006      	movs	r0, #6
 800129c:	f7ff fef0 	bl	8001080 <nRF24_ReadRegister>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f023 0307 	bic.w	r3, r3, #7
 80012aa:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	b25a      	sxtb	r2, r3
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	4619      	mov	r1, r3
 80012c0:	2006      	movs	r0, #6
 80012c2:	f7ff ff25 	bl	8001110 <nRF24_WriteRegister>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80012d8:	2006      	movs	r0, #6
 80012da:	f7ff fed1 	bl	8001080 <nRF24_ReadRegister>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80012e8:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d104      	bne.n	80012fa <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	f043 0320 	orr.w	r3, r3, #32
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e006      	b.n	8001308 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d103      	bne.n	8001308 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	4619      	mov	r1, r3
 800130c:	2006      	movs	r0, #6
 800130e:	f7ff feff 	bl	8001110 <nRF24_WriteRegister>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800131e:	2007      	movs	r0, #7
 8001320:	f7ff feae 	bl	8001080 <nRF24_ReadRegister>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}

0800132a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4619      	mov	r1, r3
 8001338:	2007      	movs	r0, #7
 800133a:	f7ff fee9 	bl	8001110 <nRF24_WriteRegister>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800134e:	23e2      	movs	r3, #226	; 0xe2
 8001350:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001352:	2200      	movs	r2, #0
 8001354:	2110      	movs	r1, #16
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <nRF24_FlushRX+0x30>)
 8001358:	f001 fb62 	bl	8002a20 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	2101      	movs	r1, #1
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fe61 	bl	8001028 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8001366:	2201      	movs	r2, #1
 8001368:	2110      	movs	r1, #16
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <nRF24_FlushRX+0x30>)
 800136c:	f001 fb58 	bl	8002a20 <HAL_GPIO_WritePin>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020400 	.word	0x40020400

0800137c <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8001382:	23e1      	movs	r3, #225	; 0xe1
 8001384:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001386:	2200      	movs	r2, #0
 8001388:	2110      	movs	r1, #16
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <nRF24_FlushTX+0x30>)
 800138c:	f001 fb48 	bl	8002a20 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	2101      	movs	r1, #1
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe47 	bl	8001028 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800139a:	2201      	movs	r2, #1
 800139c:	2110      	movs	r1, #16
 800139e:	4803      	ldr	r0, [pc, #12]	; (80013ac <nRF24_FlushTX+0x30>)
 80013a0:	f001 fb3e 	bl	8002a20 <HAL_GPIO_WritePin>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40020400 	.word	0x40020400

080013b0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80013ba:	f7ff ff53 	bl	8001264 <nRF24_ReadConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e003      	b.n	80013da <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	f023 0308 	bic.w	r3, r3, #8
 80013d8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff49 	bl	8001274 <nRF24_WriteConfig>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80013f4:	f7ff ff36 	bl	8001264 <nRF24_ReadConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d104      	bne.n	800140c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e003      	b.n	8001414 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	f023 0304 	bic.w	r3, r3, #4
 8001412:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff2c 	bl	8001274 <nRF24_WriteConfig>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	460a      	mov	r2, r1
 800142e:	71fb      	strb	r3, [r7, #7]
 8001430:	4613      	mov	r3, r2
 8001432:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	b25a      	sxtb	r2, r3
 800143a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	b25b      	sxtb	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b25b      	sxtb	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	2004      	movs	r0, #4
 800144e:	f7ff fe5f 	bl	8001110 <nRF24_WriteRegister>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4619      	mov	r1, r3
 800146e:	2005      	movs	r0, #5
 8001470:	f7ff fe4e 	bl	8001110 <nRF24_WriteRegister>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b05      	cmp	r3, #5
 8001490:	d901      	bls.n	8001496 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8001492:	2305      	movs	r3, #5
 8001494:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	3311      	adds	r3, #17
 800149a:	b2da      	uxtb	r2, r3
 800149c:	79bb      	ldrb	r3, [r7, #6]
 800149e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4619      	mov	r1, r3
 80014a6:	4610      	mov	r0, r2
 80014a8:	f7ff fe32 	bl	8001110 <nRF24_WriteRegister>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d901      	bls.n	80014ce <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80014ca:	2305      	movs	r3, #5
 80014cc:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80014ce:	2002      	movs	r0, #2
 80014d0:	f7ff fdd6 	bl	8001080 <nRF24_ReadRegister>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80014d8:	79bb      	ldrb	r3, [r7, #6]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d10a      	bne.n	80014f4 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2201      	movs	r2, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	e00b      	b.n	800150c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2201      	movs	r2, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	b25a      	sxtb	r2, r3
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4013      	ands	r3, r2
 8001508:	b25b      	sxtb	r3, r3
 800150a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	4619      	mov	r1, r3
 8001510:	2002      	movs	r0, #2
 8001512:	f7ff fdfd 	bl	8001110 <nRF24_WriteRegister>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	460a      	mov	r2, r1
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	4613      	mov	r3, r2
 800152c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b05      	cmp	r3, #5
 8001532:	d901      	bls.n	8001538 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8001534:	2305      	movs	r3, #5
 8001536:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff fda1 	bl	8001080 <nRF24_ReadRegister>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d10a      	bne.n	800155e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2201      	movs	r2, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	b25a      	sxtb	r2, r3
 8001552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001556:	4313      	orrs	r3, r2
 8001558:	b25b      	sxtb	r3, r3
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e00b      	b.n	8001576 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2201      	movs	r2, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	b25b      	sxtb	r3, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	b25a      	sxtb	r2, r3
 800156c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001570:	4013      	ands	r3, r2
 8001572:	b25b      	sxtb	r3, r3
 8001574:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	4619      	mov	r1, r3
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff fdc8 	bl	8001110 <nRF24_WriteRegister>
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d901      	bls.n	800159c <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8001598:	2305      	movs	r3, #5
 800159a:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d801      	bhi.n	80015a6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80015a2:	2303      	movs	r3, #3
 80015a4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	3b02      	subs	r3, #2
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	2003      	movs	r0, #3
 80015b6:	f7ff fdab 	bl	8001110 <nRF24_WriteRegister>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	6039      	str	r1, [r7, #0]
 80015cc:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <nRF24_SetRXAddress+0x18>
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d11d      	bne.n	8001616 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e00d      	b.n	80015fc <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	441a      	add	r2, r3
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	f1c3 0302 	rsb	r3, r3, #2
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	3310      	adds	r3, #16
 80015f0:	443b      	add	r3, r7
 80015f2:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	3301      	adds	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d9ee      	bls.n	80015e0 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	330a      	adds	r3, #10
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f107 010c 	add.w	r1, r7, #12
 800160c:	2203      	movs	r2, #3
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fda4 	bl	800115c <nRF24_WriteRegisters>
	{
 8001614:	e00a      	b.n	800162c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	330a      	adds	r3, #10
 800161a:	b2da      	uxtb	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3302      	adds	r3, #2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	4610      	mov	r0, r2
 8001626:	f7ff fd73 	bl	8001110 <nRF24_WriteRegister>
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2203      	movs	r2, #3
 8001642:	4619      	mov	r1, r3
 8001644:	200a      	movs	r0, #10
 8001646:	f7ff fd3f 	bl	80010c8 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	e00c      	b.n	800166a <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	f1c3 0302 	rsb	r3, r3, #2
 8001658:	3210      	adds	r2, #16
 800165a:	443a      	add	r2, r7
 800165c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001660:	4a16      	ldr	r2, [pc, #88]	; (80016bc <nRF24_SetTXAddress+0x88>)
 8001662:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	3301      	adds	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d9ef      	bls.n	8001650 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e00d      	b.n	8001692 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	441a      	add	r2, r3
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	f1c3 0302 	rsb	r3, r3, #2
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	3310      	adds	r3, #16
 8001686:	443b      	add	r3, r7
 8001688:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	3301      	adds	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d9ee      	bls.n	8001676 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2203      	movs	r2, #3
 800169e:	4619      	mov	r1, r3
 80016a0:	200a      	movs	r0, #10
 80016a2:	f7ff fd5b 	bl	800115c <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	2203      	movs	r2, #3
 80016ac:	4619      	mov	r1, r3
 80016ae:	2010      	movs	r0, #16
 80016b0:	f7ff fd54 	bl	800115c <nRF24_WriteRegisters>

}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200001f4 	.word	0x200001f4

080016c0 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80016c6:	f7ff fe28 	bl	800131a <nRF24_ReadStatus>
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80016d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fe26 	bl	800132a <nRF24_WriteStatus>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80016f0:	f7ff fdb8 	bl	8001264 <nRF24_ReadConfig>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d104      	bne.n	8001708 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e003      	b.n	8001710 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800170e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fdae 	bl	8001274 <nRF24_WriteConfig>
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800172a:	f7ff fd9b 	bl	8001264 <nRF24_ReadConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d104      	bne.n	8001742 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	f043 0320 	orr.w	r3, r3, #32
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e003      	b.n	800174a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	f023 0320 	bic.w	r3, r3, #32
 8001748:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fd91 	bl	8001274 <nRF24_WriteConfig>
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001764:	f7ff fd7e 	bl	8001264 <nRF24_ReadConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d104      	bne.n	800177c <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	e003      	b.n	8001784 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	f023 0310 	bic.w	r3, r3, #16
 8001782:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fd74 	bl	8001274 <nRF24_WriteConfig>
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800179c:	2220      	movs	r2, #32
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	20a0      	movs	r0, #160	; 0xa0
 80017a2:	f7ff fcdb 	bl	800115c <nRF24_WriteRegisters>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80017b6:	2201      	movs	r2, #1
 80017b8:	2108      	movs	r1, #8
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <nRF24_WaitTX+0x50>)
 80017bc:	f001 f930 	bl	8002a20 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff fc24 	bl	800100e <nRF24_Delay>
	NRF24_CE_LOW;
 80017c6:	2200      	movs	r2, #0
 80017c8:	2108      	movs	r1, #8
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <nRF24_WaitTX+0x50>)
 80017cc:	f001 f928 	bl	8002a20 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f7ff fc1c 	bl	800100e <nRF24_Delay>
		status = nRF24_ReadStatus();
 80017d6:	f7ff fda0 	bl	800131a <nRF24_ReadStatus>
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d104      	bne.n	80017f2 <nRF24_WaitTX+0x42>
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0ee      	beq.n	80017d0 <nRF24_WaitTX+0x20>

	// Clear the relevant status flags
	    nRF24_WriteStatus((1 << NRF24_MAX_RT) | (1 << NRF24_TX_DS));
 80017f2:	2030      	movs	r0, #48	; 0x30
 80017f4:	f7ff fd99 	bl	800132a <nRF24_WriteStatus>

}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020400 	.word	0x40020400

08001804 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 800180c:	2220      	movs	r2, #32
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	2061      	movs	r0, #97	; 0x61
 8001812:	f7ff fc59 	bl	80010c8 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8001816:	2140      	movs	r1, #64	; 0x40
 8001818:	2007      	movs	r0, #7
 800181a:	f7ff fc79 	bl	8001110 <nRF24_WriteRegister>
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
//	}
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <nRF24_RXAvailible>:
{

}

uint8_t nRF24_RXAvailible(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800182e:	f7ff fd74 	bl	800131a <nRF24_ReadStatus>
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00c      	beq.n	800185a <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <nRF24_RXAvailible+0x3c>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800184c:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fd6a 	bl	800132a <nRF24_WriteStatus>
		return 1;
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <nRF24_RXAvailible+0x34>
	}
	return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200001d8 	.word	0x200001d8

08001868 <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001870:	4a25      	ldr	r2, [pc, #148]	; (8001908 <nRF24_Init+0xa0>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 8001876:	2200      	movs	r2, #0
 8001878:	2108      	movs	r1, #8
 800187a:	4824      	ldr	r0, [pc, #144]	; (800190c <nRF24_Init+0xa4>)
 800187c:	f001 f8d0 	bl	8002a20 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001880:	2201      	movs	r2, #1
 8001882:	2110      	movs	r1, #16
 8001884:	4821      	ldr	r0, [pc, #132]	; (800190c <nRF24_Init+0xa4>)
 8001886:	f001 f8cb 	bl	8002a20 <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 800188a:	2005      	movs	r0, #5
 800188c:	f7ff fbbf 	bl	800100e <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8001890:	2003      	movs	r0, #3
 8001892:	f7ff fcfd 	bl	8001290 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 8001896:	2002      	movs	r0, #2
 8001898:	f7ff fd19 	bl	80012ce <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fd87 	bl	80013b0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fda1 	bl	80013ea <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80018a8:	2107      	movs	r1, #7
 80018aa:	2004      	movs	r0, #4
 80018ac:	f7ff fdba 	bl	8001424 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80018b0:	2100      	movs	r1, #0
 80018b2:	201c      	movs	r0, #28
 80018b4:	f7ff fc2c 	bl	8001110 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 80018b8:	200a      	movs	r0, #10
 80018ba:	f7ff fdce 	bl	800145a <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80018be:	2120      	movs	r1, #32
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff fddb 	bl	800147c <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80018c6:	2101      	movs	r1, #1
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff fdf3 	bl	80014b4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80018ce:	2101      	movs	r1, #1
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff fe24 	bl	800151e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80018d6:	2003      	movs	r0, #3
 80018d8:	f7ff fe56 	bl	8001588 <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 80018dc:	2014      	movs	r0, #20
 80018de:	f7ff fb96 	bl	800100e <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff feff 	bl	80016e6 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff ff19 	bl	8001720 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff ff33 	bl	800175a <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 80018f4:	2014      	movs	r0, #20
 80018f6:	f7ff fb8a 	bl	800100e <nRF24_Delay>

	nRF24_ClearInterrupts();
 80018fa:	f7ff fee1 	bl	80016c0 <nRF24_ClearInterrupts>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200001f0 	.word	0x200001f0
 800190c:	40020400 	.word	0x40020400

08001910 <Random_message_init>:

// Seed for the pseudo-random number generator
static uint32_t pseudoRandomSeed = 0;

// Initialize the timer-based seed
void Random_message_init() {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    // Ensure that the SysTick timer or any other timer is running
    pseudoRandomSeed = HAL_GetTick(); // Use the current millisecond tick as the seed
 8001914:	f000 fdaa 	bl	800246c <HAL_GetTick>
 8001918:	4603      	mov	r3, r0
 800191a:	4a02      	ldr	r2, [pc, #8]	; (8001924 <Random_message_init+0x14>)
 800191c:	6013      	str	r3, [r2, #0]
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200001f8 	.word	0x200001f8

08001928 <RNG_GetRandomByte>:

// Simple Linear Congruential Generator (LCG) for pseudo-random numbers
uint8_t RNG_GetRandomByte(void) {
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
    pseudoRandomSeed = (pseudoRandomSeed * 1664525 + 1013904223) & 0xFFFFFFFF; // LCG formula
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <RNG_GetRandomByte+0x24>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <RNG_GetRandomByte+0x28>)
 8001932:	fb03 f202 	mul.w	r2, r3, r2
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <RNG_GetRandomByte+0x2c>)
 8001938:	4413      	add	r3, r2
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <RNG_GetRandomByte+0x24>)
 800193c:	6013      	str	r3, [r2, #0]
    return (uint8_t)(pseudoRandomSeed & 0xFF); // Return the least significant byte
 800193e:	4b03      	ldr	r3, [pc, #12]	; (800194c <RNG_GetRandomByte+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b2db      	uxtb	r3, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	200001f8 	.word	0x200001f8
 8001950:	0019660d 	.word	0x0019660d
 8001954:	3c6ef35f 	.word	0x3c6ef35f

08001958 <GenerateRandomMessage>:

// Generate a random message of `length` bytes
void GenerateRandomMessage(uint8_t *message, uint8_t length) {
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; i++) {
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e009      	b.n	800197e <GenerateRandomMessage+0x26>
        message[i] = RNG_GetRandomByte();
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	18d4      	adds	r4, r2, r3
 8001970:	f7ff ffda 	bl	8001928 <RNG_GetRandomByte>
 8001974:	4603      	mov	r3, r0
 8001976:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < length; i++) {
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	3301      	adds	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	429a      	cmp	r2, r3
 8001984:	d3f1      	bcc.n	800196a <GenerateRandomMessage+0x12>
    }
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}

08001990 <buffer_add_rx>:
uint8_t chunk[NRF24_PAYLOAD_SIZE];    // Buffer to hold each 32-byte chunk

uint8_t result = 0;

// Add received chunk to the ring buffer
void buffer_add_rx(uint8_t* data, uint16_t length) {
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 800199c:	2300      	movs	r3, #0
 800199e:	81fb      	strh	r3, [r7, #14]
 80019a0:	e01b      	b.n	80019da <buffer_add_rx+0x4a>
        rx_ring_buffer[rx_head] = data[i];
 80019a2:	89fb      	ldrh	r3, [r7, #14]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <buffer_add_rx+0x60>)
 80019aa:	8812      	ldrh	r2, [r2, #0]
 80019ac:	7819      	ldrb	r1, [r3, #0]
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <buffer_add_rx+0x64>)
 80019b0:	5499      	strb	r1, [r3, r2]
        rx_head = (rx_head + 1) % BUFFER_SIZE;
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <buffer_add_rx+0x60>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <buffer_add_rx+0x68>)
 80019ba:	fb82 1203 	smull	r1, r2, r2, r3
 80019be:	1191      	asrs	r1, r2, #6
 80019c0:	17da      	asrs	r2, r3, #31
 80019c2:	1a8a      	subs	r2, r1, r2
 80019c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c8:	fb01 f202 	mul.w	r2, r1, r2
 80019cc:	1a9a      	subs	r2, r3, r2
 80019ce:	b292      	uxth	r2, r2
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <buffer_add_rx+0x60>)
 80019d2:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 80019d4:	89fb      	ldrh	r3, [r7, #14]
 80019d6:	3301      	adds	r3, #1
 80019d8:	81fb      	strh	r3, [r7, #14]
 80019da:	89fa      	ldrh	r2, [r7, #14]
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d3df      	bcc.n	80019a2 <buffer_add_rx+0x12>
    }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200005e4 	.word	0x200005e4
 80019f4:	200001fc 	.word	0x200001fc
 80019f8:	10624dd3 	.word	0x10624dd3

080019fc <buffer_get_full_message>:

// Extract full message from the ring buffer
void buffer_get_full_message(uint8_t* message, uint16_t length) {
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	81fb      	strh	r3, [r7, #14]
 8001a0c:	e01c      	b.n	8001a48 <buffer_get_full_message+0x4c>
        message[i] = rx_ring_buffer[rx_tail];
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <buffer_get_full_message+0x60>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	4619      	mov	r1, r3
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <buffer_get_full_message+0x64>)
 8001a1c:	5c52      	ldrb	r2, [r2, r1]
 8001a1e:	701a      	strb	r2, [r3, #0]
        rx_tail = (rx_tail + 1) % BUFFER_SIZE;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <buffer_get_full_message+0x60>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <buffer_get_full_message+0x68>)
 8001a28:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2c:	1191      	asrs	r1, r2, #6
 8001a2e:	17da      	asrs	r2, r3, #31
 8001a30:	1a8a      	subs	r2, r1, r2
 8001a32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a36:	fb01 f202 	mul.w	r2, r1, r2
 8001a3a:	1a9a      	subs	r2, r3, r2
 8001a3c:	b292      	uxth	r2, r2
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <buffer_get_full_message+0x60>)
 8001a40:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 8001a42:	89fb      	ldrh	r3, [r7, #14]
 8001a44:	3301      	adds	r3, #1
 8001a46:	81fb      	strh	r3, [r7, #14]
 8001a48:	89fa      	ldrh	r2, [r7, #14]
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3de      	bcc.n	8001a0e <buffer_get_full_message+0x12>
    }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	200005e6 	.word	0x200005e6
 8001a60:	200001fc 	.word	0x200001fc
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <flush_rx_buffer>:

// Function to flush the transmission ring buffer
void flush_rx_buffer() {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
    // Reset the head, tail, and size to flush the buffer
    rx_head = 0;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <flush_rx_buffer+0x20>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	801a      	strh	r2, [r3, #0]
    rx_tail = 0;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <flush_rx_buffer+0x24>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	801a      	strh	r2, [r3, #0]
    //rx_size = 0;

    // Optionally clear the buffer content
    memset(rx_ring_buffer, 0, sizeof(rx_ring_buffer));
 8001a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4804      	ldr	r0, [pc, #16]	; (8001a90 <flush_rx_buffer+0x28>)
 8001a80:	f006 fe46 	bl	8008710 <memset>
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200005e4 	.word	0x200005e4
 8001a8c:	200005e6 	.word	0x200005e6
 8001a90:	200001fc 	.word	0x200001fc

08001a94 <receive_message>:

int32_t receive_message(){
 8001a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
	if (nRF24_RXAvailible()) {
 8001a9c:	f7ff fec4 	bl	8001828 <nRF24_RXAvailible>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d065      	beq.n	8001b72 <receive_message+0xde>
		    nRF24_ReadRXPaylaod(chunk);  // Receive 32-byte chunk
 8001aa6:	4836      	ldr	r0, [pc, #216]	; (8001b80 <receive_message+0xec>)
 8001aa8:	f7ff feac 	bl	8001804 <nRF24_ReadRXPaylaod>
		    buffer_add_rx(chunk, NRF24_PAYLOAD_SIZE);  // Store received chunk in the buffer
 8001aac:	2120      	movs	r1, #32
 8001aae:	4834      	ldr	r0, [pc, #208]	; (8001b80 <receive_message+0xec>)
 8001ab0:	f7ff ff6e 	bl	8001990 <buffer_add_rx>
		    //MessageLength = sprintf(Message, "%s\n\r", chunk);
		    //HAL_UART_Transmit(&huart1, Message, MessageLength, 1000);

		    if (rx_head >= expected_message_size) {
 8001ab4:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <receive_message+0xf0>)
 8001ab6:	881a      	ldrh	r2, [r3, #0]
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <receive_message+0xf4>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d353      	bcc.n	8001b68 <receive_message+0xd4>
 8001ac0:	466b      	mov	r3, sp
 8001ac2:	461e      	mov	r6, r3
		    uint8_t received_message[expected_message_size];
 8001ac4:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <receive_message+0xf4>)
 8001ac6:	8819      	ldrh	r1, [r3, #0]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	3b01      	subs	r3, #1
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	b28b      	uxth	r3, r1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4698      	mov	r8, r3
 8001ad4:	4691      	mov	r9, r2
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aea:	b28b      	uxth	r3, r1
 8001aec:	2200      	movs	r2, #0
 8001aee:	461c      	mov	r4, r3
 8001af0:	4615      	mov	r5, r2
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	00eb      	lsls	r3, r5, #3
 8001afc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b00:	00e2      	lsls	r2, r4, #3
 8001b02:	460b      	mov	r3, r1
 8001b04:	3307      	adds	r3, #7
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	ebad 0d03 	sub.w	sp, sp, r3
 8001b0e:	466b      	mov	r3, sp
 8001b10:	3300      	adds	r3, #0
 8001b12:	603b      	str	r3, [r7, #0]
		    buffer_get_full_message(received_message, expected_message_size);  // Extract full message
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <receive_message+0xf4>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6838      	ldr	r0, [r7, #0]
 8001b1c:	f7ff ff6e 	bl	80019fc <buffer_get_full_message>

		    /////////////////////////////////////WIADOMOSC TESTOWA/////////////////////////////////////////
		    HAL_UART_Transmit(&huart1, "Odebrana zaszyfrowana wiadomosc:\n", 33, 1000);
 8001b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b24:	2221      	movs	r2, #33	; 0x21
 8001b26:	4919      	ldr	r1, [pc, #100]	; (8001b8c <receive_message+0xf8>)
 8001b28:	4819      	ldr	r0, [pc, #100]	; (8001b90 <receive_message+0xfc>)
 8001b2a:	f003 ff63 	bl	80059f4 <HAL_UART_Transmit>
		    HAL_UART_Transmit(&huart1, received_message, expected_message_size, 1000);
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <receive_message+0xf4>)
 8001b30:	881a      	ldrh	r2, [r3, #0]
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	4815      	ldr	r0, [pc, #84]	; (8001b90 <receive_message+0xfc>)
 8001b3a:	f003 ff5b 	bl	80059f4 <HAL_UART_Transmit>
		    /////////////////////////////////////WIADOMOSC TESTOWA/////////////////////////////////////////

		    //MSG == MSG???
		    result = Decrypt_And_Check_RSA_Message(0, received_message);
 8001b3e:	6839      	ldr	r1, [r7, #0]
 8001b40:	2000      	movs	r0, #0
 8001b42:	f000 f93d 	bl	8001dc0 <Decrypt_And_Check_RSA_Message>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <receive_message+0x100>)
 8001b4c:	701a      	strb	r2, [r3, #0]
		    if(result==1){
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <receive_message+0x100>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d103      	bne.n	8001b5e <receive_message+0xca>
		    	flush_rx_buffer();
 8001b56:	f7ff ff87 	bl	8001a68 <flush_rx_buffer>
		    	return 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e002      	b.n	8001b64 <receive_message+0xd0>
		    }
		     flush_rx_buffer();
 8001b5e:	f7ff ff83 	bl	8001a68 <flush_rx_buffer>
		     //// Indicate rhat messege is recieved but not equal so it could reset to different step
		     return 2;
 8001b62:	2302      	movs	r3, #2
 8001b64:	46b5      	mov	sp, r6
 8001b66:	e005      	b.n	8001b74 <receive_message+0xe0>
		     }

		     HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate reception
 8001b68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6c:	480a      	ldr	r0, [pc, #40]	; (8001b98 <receive_message+0x104>)
 8001b6e:	f000 ff6f 	bl	8002a50 <HAL_GPIO_TogglePin>
		}
	return 0;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b7e:	bf00      	nop
 8001b80:	200005e8 	.word	0x200005e8
 8001b84:	200005e4 	.word	0x200005e4
 8001b88:	20000002 	.word	0x20000002
 8001b8c:	08008750 	.word	0x08008750
 8001b90:	20000194 	.word	0x20000194
 8001b94:	20000608 	.word	0x20000608
 8001b98:	40020800 	.word	0x40020800

08001b9c <buffer_add>:
uint32_t tx_size = 0;                 // Size of the message to transmit
uint32_t PackageTimer;				//send delay time

//TRANSMISSION
// Add data to the ring buffer
void buffer_add(uint8_t* data, uint16_t length) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 8001ba8:	2300      	movs	r3, #0
 8001baa:	81fb      	strh	r3, [r7, #14]
 8001bac:	e020      	b.n	8001bf0 <buffer_add+0x54>
        tx_ring_buffer[tx_head] = data[i];
 8001bae:	89fb      	ldrh	r3, [r7, #14]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <buffer_add+0x68>)
 8001bb6:	8812      	ldrh	r2, [r2, #0]
 8001bb8:	7819      	ldrb	r1, [r3, #0]
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <buffer_add+0x6c>)
 8001bbc:	5499      	strb	r1, [r3, r2]
        tx_head = (tx_head + 1) % BUFFER_SIZE;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <buffer_add+0x68>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <buffer_add+0x70>)
 8001bc6:	fb82 1203 	smull	r1, r2, r2, r3
 8001bca:	1191      	asrs	r1, r2, #6
 8001bcc:	17da      	asrs	r2, r3, #31
 8001bce:	1a8a      	subs	r2, r1, r2
 8001bd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bd4:	fb01 f202 	mul.w	r2, r1, r2
 8001bd8:	1a9a      	subs	r2, r3, r2
 8001bda:	b292      	uxth	r2, r2
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <buffer_add+0x68>)
 8001bde:	801a      	strh	r2, [r3, #0]
        tx_size++;
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <buffer_add+0x74>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <buffer_add+0x74>)
 8001be8:	6013      	str	r3, [r2, #0]
    for (uint16_t i = 0; i < length; i++) {
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	3301      	adds	r3, #1
 8001bee:	81fb      	strh	r3, [r7, #14]
 8001bf0:	89fa      	ldrh	r2, [r7, #14]
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d3da      	bcc.n	8001bae <buffer_add+0x12>
    }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	200009f4 	.word	0x200009f4
 8001c08:	2000060c 	.word	0x2000060c
 8001c0c:	10624dd3 	.word	0x10624dd3
 8001c10:	200009f8 	.word	0x200009f8

08001c14 <buffer_get_chunk>:

// Get 32-byte chunk from the ring buffer
uint8_t buffer_get_chunk(uint8_t* chunk) {
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
    if (tx_size == 0) return 0;  // No data to send
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <buffer_get_chunk+0x78>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <buffer_get_chunk+0x14>
 8001c24:	2300      	movs	r3, #0
 8001c26:	e02c      	b.n	8001c82 <buffer_get_chunk+0x6e>

    for (uint8_t i = 0; i < NRF24_PAYLOAD_SIZE && tx_size > 0; i++) {
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e021      	b.n	8001c72 <buffer_get_chunk+0x5e>
        chunk[i] = tx_ring_buffer[tx_tail];
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <buffer_get_chunk+0x7c>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <buffer_get_chunk+0x80>)
 8001c3c:	5c52      	ldrb	r2, [r2, r1]
 8001c3e:	701a      	strb	r2, [r3, #0]
        tx_tail = (tx_tail + 1) % BUFFER_SIZE;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <buffer_get_chunk+0x7c>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <buffer_get_chunk+0x84>)
 8001c48:	fb82 1203 	smull	r1, r2, r2, r3
 8001c4c:	1191      	asrs	r1, r2, #6
 8001c4e:	17da      	asrs	r2, r3, #31
 8001c50:	1a8a      	subs	r2, r1, r2
 8001c52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c56:	fb01 f202 	mul.w	r2, r1, r2
 8001c5a:	1a9a      	subs	r2, r3, r2
 8001c5c:	b292      	uxth	r2, r2
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <buffer_get_chunk+0x7c>)
 8001c60:	801a      	strh	r2, [r3, #0]
        tx_size--;
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <buffer_get_chunk+0x78>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <buffer_get_chunk+0x78>)
 8001c6a:	6013      	str	r3, [r2, #0]
    for (uint8_t i = 0; i < NRF24_PAYLOAD_SIZE && tx_size > 0; i++) {
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b1f      	cmp	r3, #31
 8001c76:	d803      	bhi.n	8001c80 <buffer_get_chunk+0x6c>
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <buffer_get_chunk+0x78>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1d6      	bne.n	8001c2e <buffer_get_chunk+0x1a>
    }
    return 1;  // Chunk is ready to send
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	200009f8 	.word	0x200009f8
 8001c90:	200009f6 	.word	0x200009f6
 8001c94:	2000060c 	.word	0x2000060c
 8001c98:	10624dd3 	.word	0x10624dd3

08001c9c <send_message>:

int32_t send_message(uint32_t delay_time){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

	if (tx_size > 0 && HAL_GetTick() - PackageTimer > delay_time) {
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <send_message+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01d      	beq.n	8001ce8 <send_message+0x4c>
 8001cac:	f000 fbde 	bl	800246c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <send_message+0x68>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d214      	bcs.n	8001ce8 <send_message+0x4c>
		if (buffer_get_chunk(chunk)) {
 8001cbe:	4812      	ldr	r0, [pc, #72]	; (8001d08 <send_message+0x6c>)
 8001cc0:	f7ff ffa8 	bl	8001c14 <buffer_get_chunk>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <send_message+0x38>
		    nRF24_WriteTXPayload(chunk);  // Send 32-byte chunk
 8001cca:	480f      	ldr	r0, [pc, #60]	; (8001d08 <send_message+0x6c>)
 8001ccc:	f7ff fd62 	bl	8001794 <nRF24_WriteTXPayload>
		    nRF24_WaitTX();               // Wait until the transmission is completed
 8001cd0:	f7ff fd6e 	bl	80017b0 <nRF24_WaitTX>
		    }
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate transmission
 8001cd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <send_message+0x70>)
 8001cda:	f000 feb9 	bl	8002a50 <HAL_GPIO_TogglePin>
		PackageTimer = HAL_GetTick();
 8001cde:	f000 fbc5 	bl	800246c <HAL_GetTick>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <send_message+0x68>)
 8001ce6:	6013      	str	r3, [r2, #0]
	}

	if(tx_size == 0){
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <send_message+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <send_message+0x58>
			return 1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <send_message+0x5a>
		}
	return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200009f8 	.word	0x200009f8
 8001d04:	200009fc 	.word	0x200009fc
 8001d08:	200005e8 	.word	0x200005e8
 8001d0c:	40020800 	.word	0x40020800

08001d10 <RSA_Driver_Get_Random_Message>:
int32_t status = RSA_ERR_GENERIC;

RSApubKey_stt PubKey_st;
RSAprivKey_stt PrivKey_st;

void RSA_Driver_Get_Random_Message(){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	Random_message_init();
 8001d14:	f7ff fdfc 	bl	8001910 <Random_message_init>
		 GenerateRandomMessage(Message, sizeof(Message));
 8001d18:	2110      	movs	r1, #16
 8001d1a:	4809      	ldr	r0, [pc, #36]	; (8001d40 <RSA_Driver_Get_Random_Message+0x30>)
 8001d1c:	f7ff fe1c 	bl	8001958 <GenerateRandomMessage>

		    /////////////////////////////////////WIADOMOSC TESTOWA/////////////////////////////////////////
		    HAL_UART_Transmit(&huart1, "Losowa wiadomosc:\n", 18, 1000);
 8001d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d24:	2212      	movs	r2, #18
 8001d26:	4907      	ldr	r1, [pc, #28]	; (8001d44 <RSA_Driver_Get_Random_Message+0x34>)
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <RSA_Driver_Get_Random_Message+0x38>)
 8001d2a:	f003 fe63 	bl	80059f4 <HAL_UART_Transmit>
		    HAL_UART_Transmit(&huart1, Message, 17, 1000);
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	2211      	movs	r2, #17
 8001d34:	4902      	ldr	r1, [pc, #8]	; (8001d40 <RSA_Driver_Get_Random_Message+0x30>)
 8001d36:	4804      	ldr	r0, [pc, #16]	; (8001d48 <RSA_Driver_Get_Random_Message+0x38>)
 8001d38:	f003 fe5c 	bl	80059f4 <HAL_UART_Transmit>
		    /////////////////////////////////////WIADOMOSC TESTOWA/////////////////////////////////////////
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000a00 	.word	0x20000a00
 8001d44:	08008774 	.word	0x08008774
 8001d48:	20000194 	.word	0x20000194

08001d4c <Encrypt_And_Add_Random_Message>:
//	        Message[i] = msg[i];
//	    }
//	RSA_Driver_init(0, Message);
//}

void Encrypt_And_Add_Random_Message(uint8_t key_number){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
	const uint8_t* key_data = get_rsa_key_set(key_number);
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f8ff 	bl	8001f5c <get_rsa_key_set>
 8001d5e:	60f8      	str	r0, [r7, #12]
	if (key_data != NULL) {
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <Encrypt_And_Add_Random_Message+0x34>
		PubKey_st.mExponentSize = 3;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <Encrypt_And_Add_Random_Message+0x60>)
 8001d68:	2203      	movs	r2, #3
 8001d6a:	60da      	str	r2, [r3, #12]
		PubKey_st.mModulusSize = 256;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <Encrypt_And_Add_Random_Message+0x60>)
 8001d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d72:	605a      	str	r2, [r3, #4]
		PubKey_st.pmExponent = (uint8_t *) PublicExponent;
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <Encrypt_And_Add_Random_Message+0x60>)
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <Encrypt_And_Add_Random_Message+0x64>)
 8001d78:	609a      	str	r2, [r3, #8]
		PubKey_st.pmModulus = (uint8_t *) key_data;
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <Encrypt_And_Add_Random_Message+0x60>)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6013      	str	r3, [r2, #0]
	}
	status = RSA_Encrypt(&PubKey_st, Message, sizeof(Message), output);
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <Encrypt_And_Add_Random_Message+0x68>)
 8001d82:	2210      	movs	r2, #16
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <Encrypt_And_Add_Random_Message+0x6c>)
 8001d86:	4809      	ldr	r0, [pc, #36]	; (8001dac <Encrypt_And_Add_Random_Message+0x60>)
 8001d88:	f000 f860 	bl	8001e4c <RSA_Encrypt>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <Encrypt_And_Add_Random_Message+0x70>)
 8001d90:	6013      	str	r3, [r2, #0]
	if (status == RSA_SUCCESS){
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <Encrypt_And_Add_Random_Message+0x70>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d104      	bne.n	8001da4 <Encrypt_And_Add_Random_Message+0x58>
		buffer_add(output, sizeof(output));
 8001d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <Encrypt_And_Add_Random_Message+0x68>)
 8001da0:	f7ff fefc 	bl	8001b9c <buffer_add>
	}
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20001b14 	.word	0x20001b14
 8001db0:	08008a84 	.word	0x08008a84
 8001db4:	20001a10 	.word	0x20001a10
 8001db8:	20000a00 	.word	0x20000a00
 8001dbc:	20000024 	.word	0x20000024

08001dc0 <Decrypt_And_Check_RSA_Message>:

uint8_t Decrypt_And_Check_RSA_Message(uint8_t key_number, uint8_t *received_message){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
	const uint8_t* key_data = get_rsa_key_set(key_number);
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f8c4 	bl	8001f5c <get_rsa_key_set>
 8001dd4:	60f8      	str	r0, [r7, #12]
    PrivKey_st.mExponentSize = sizeof(PrivateExponent);
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <Decrypt_And_Check_RSA_Message+0x70>)
 8001dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ddc:	60da      	str	r2, [r3, #12]
    PrivKey_st.mModulusSize = 256;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <Decrypt_And_Check_RSA_Message+0x70>)
 8001de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de4:	605a      	str	r2, [r3, #4]
    PrivKey_st.pmExponent = (uint8_t *) PrivateExponent;
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <Decrypt_And_Check_RSA_Message+0x70>)
 8001de8:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <Decrypt_And_Check_RSA_Message+0x74>)
 8001dea:	609a      	str	r2, [r3, #8]
    PrivKey_st.pmModulus = (uint8_t *) Modulus;
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <Decrypt_And_Check_RSA_Message+0x70>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <Decrypt_And_Check_RSA_Message+0x78>)
 8001df0:	601a      	str	r2, [r3, #0]

    status = RSA_Decrypt(&PrivKey_st, received_message, output, &outputSize);
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <Decrypt_And_Check_RSA_Message+0x7c>)
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <Decrypt_And_Check_RSA_Message+0x80>)
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <Decrypt_And_Check_RSA_Message+0x70>)
 8001dfa:	f000 f865 	bl	8001ec8 <RSA_Decrypt>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <Decrypt_And_Check_RSA_Message+0x84>)
 8001e02:	6013      	str	r3, [r2, #0]
    if (status == RSA_SUCCESS){
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <Decrypt_And_Check_RSA_Message+0x84>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10b      	bne.n	8001e24 <Decrypt_And_Check_RSA_Message+0x64>
    		if(Buffercmp(Message, output, 16)){
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	490c      	ldr	r1, [pc, #48]	; (8001e40 <Decrypt_And_Check_RSA_Message+0x80>)
 8001e10:	480d      	ldr	r0, [pc, #52]	; (8001e48 <Decrypt_And_Check_RSA_Message+0x88>)
 8001e12:	f000 f881 	bl	8001f18 <Buffercmp>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <Decrypt_And_Check_RSA_Message+0x60>
    			return 1;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e002      	b.n	8001e26 <Decrypt_And_Check_RSA_Message+0x66>
    		}
    		return 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <Decrypt_And_Check_RSA_Message+0x66>
    	}
    return 0;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20001b24 	.word	0x20001b24
 8001e34:	08008a88 	.word	0x08008a88
 8001e38:	08008b88 	.word	0x08008b88
 8001e3c:	20001b10 	.word	0x20001b10
 8001e40:	20001a10 	.word	0x20001a10
 8001e44:	20000024 	.word	0x20000024
 8001e48:	20000a00 	.word	0x20000a00

08001e4c <RSA_Encrypt>:

int32_t RSA_Encrypt(RSApubKey_stt *P_pPubKey,
                    const uint8_t *P_pInputMessage,
                    int32_t P_InputSize,
                    uint8_t *P_pOutput)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b09c      	sub	sp, #112	; 0x70
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  int32_t status = RNG_SUCCESS ;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RNGstate_stt RNGstate;
  RNGinitInput_stt RNGinit_st;
  RNGinit_st.pmEntropyData = entropy_data;
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <RSA_Encrypt+0x74>)
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  RNGinit_st.mEntropyDataSize = sizeof(entropy_data);
 8001e62:	2320      	movs	r3, #32
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RNGinit_st.mPersDataSize = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  RNGinit_st.mNonceSize = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34

  status = RNGinit(&RNGinit_st, &RNGstate);
 8001e6e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f006 fbfb 	bl	8008674 <RNGinit>
 8001e7e:	66f8      	str	r0, [r7, #108]	; 0x6c
  if (status == RNG_SUCCESS)
 8001e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d116      	bne.n	8001eb4 <RSA_Encrypt+0x68>
  {
    RSAinOut_stt inOut_st;
    membuf_stt mb;

    mb.mSize = sizeof(preallocated_buffer);
 8001e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8a:	833b      	strh	r3, [r7, #24]
    mb.mUsed = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	837b      	strh	r3, [r7, #26]
    mb.pmBuf = preallocated_buffer;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <RSA_Encrypt+0x78>)
 8001e92:	617b      	str	r3, [r7, #20]

    /* Fill the RSAinOut_stt */
    inOut_st.pmInput = P_pInputMessage;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	61fb      	str	r3, [r7, #28]
    inOut_st.mInputSize = P_InputSize;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	623b      	str	r3, [r7, #32]
    inOut_st.pmOutput = P_pOutput;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Encrypt the message, this function will write sizeof(modulus) data */
    status = RSA_PKCS1v15_Encrypt(P_pPubKey, &inOut_st, &RNGstate, &mb);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ea8:	f107 011c 	add.w	r1, r7, #28
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f006 f983 	bl	80081b8 <RSA_PKCS1v15_Encrypt>
 8001eb2:	66f8      	str	r0, [r7, #108]	; 0x6c
  }
  return(status);
 8001eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3770      	adds	r7, #112	; 0x70
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000004 	.word	0x20000004
 8001ec4:	20000a10 	.word	0x20000a10

08001ec8 <RSA_Decrypt>:
*/
int32_t RSA_Decrypt(RSAprivKey_stt * P_pPrivKey,
                    const uint8_t * P_pInputMessage,
                    uint8_t *P_pOutput,
                    int32_t *P_OutputSize)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
  int32_t status = RSA_SUCCESS ;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RSAinOut_stt inOut_st;
  membuf_stt mb;

  mb.mSize = sizeof(preallocated_buffer);
 8001eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ede:	82bb      	strh	r3, [r7, #20]
  mb.mUsed = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	82fb      	strh	r3, [r7, #22]
  mb.pmBuf = preallocated_buffer;
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <RSA_Decrypt+0x4c>)
 8001ee6:	613b      	str	r3, [r7, #16]

  /* Fill the RSAinOut_stt */
  inOut_st.pmInput = P_pInputMessage;
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
  inOut_st.mInputSize = P_pPrivKey->mModulusSize;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	61fb      	str	r3, [r7, #28]
  inOut_st.pmOutput = P_pOutput;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	623b      	str	r3, [r7, #32]

  /* Encrypt the message, this function will write sizeof(modulus) data */
  status = RSA_PKCS1v15_Decrypt(P_pPrivKey, &inOut_st, P_OutputSize, &mb);
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	f107 0118 	add.w	r1, r7, #24
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f006 fa3d 	bl	8008380 <RSA_PKCS1v15_Decrypt>
 8001f06:	6278      	str	r0, [r7, #36]	; 0x24
  return(status);
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000a10 	.word	0x20000a10

08001f18 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval PASSED: pBuffer identical to pBuffer1
  *         FAILED: pBuffer differs from pBuffer1
  */
TestStatus Buffercmp(const uint8_t* pBuffer, uint8_t* pBuffer1, uint16_t BufferLength)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8001f26:	e00d      	b.n	8001f44 <Buffercmp+0x2c>
  {
    if (*pBuffer != *pBuffer1)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <Buffercmp+0x20>
    {
      return FAILED;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e00b      	b.n	8001f50 <Buffercmp+0x38>
    }

    pBuffer++;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
    pBuffer1++;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3301      	adds	r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	1e5a      	subs	r2, r3, #1
 8001f48:	80fa      	strh	r2, [r7, #6]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1ec      	bne.n	8001f28 <Buffercmp+0x10>
  }

  return PASSED;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
	...

08001f5c <get_rsa_key_set>:
		    0x41, 0xD9, 0x4A, 0x32, 0x3C, 0x75, 0x43, 0x19, 0xA8, 0x1F, 0x41, 0x90, 0x92, 0x1E, 0xF7, 0x18, 0xE8, 0x0C,
		    0x55, 0xC2, 0x98, 0x01
};

// Funkcja do pobrania wskaźnika na wybrany zestaw kluczy w tablicy
const uint8_t* get_rsa_key_set(uint8_t index) {
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
    if (index >= RSA_KEY_SETS_COUNT) {
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b31      	cmp	r3, #49	; 0x31
 8001f6a:	d901      	bls.n	8001f70 <get_rsa_key_set+0x14>
        return 0; // Zwraca 0, jeśli indeks jest poza zakresem
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e003      	b.n	8001f78 <get_rsa_key_set+0x1c>
    }
    return &rsa_keys_bin[index * RSA_KEY_SET_SIZE];
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	4a03      	ldr	r2, [pc, #12]	; (8001f84 <get_rsa_key_set+0x28>)
 8001f76:	4413      	add	r3, r2
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	08008c88 	.word	0x08008c88

08001f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_MspInit+0x48>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_MspInit+0x48>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_MspInit+0x48>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_MspInit+0x48>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_MspInit+0x48>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_MspInit+0x48>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_CRC_MspInit+0x38>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10d      	bne.n	8002002 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_CRC_MspInit+0x3c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_CRC_MspInit+0x3c>)
 8001ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_CRC_MspInit+0x3c>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40023000 	.word	0x40023000
 8002010:	40023800 	.word	0x40023800

08002014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a19      	ldr	r2, [pc, #100]	; (8002098 <HAL_SPI_MspInit+0x84>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d12c      	bne.n	8002090 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_SPI_MspInit+0x88>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_SPI_MspInit+0x88>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_SPI_MspInit+0x88>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_SPI_MspInit+0x88>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a10      	ldr	r2, [pc, #64]	; (800209c <HAL_SPI_MspInit+0x88>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_SPI_MspInit+0x88>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800206e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002080:	2305      	movs	r3, #5
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <HAL_SPI_MspInit+0x8c>)
 800208c:	f000 fb46 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3728      	adds	r7, #40	; 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40003800 	.word	0x40003800
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020400 	.word	0x40020400

080020a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <HAL_TIM_PWM_MspInit+0x38>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d10d      	bne.n	80020d2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002104:	d116      	bne.n	8002134 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_TIM_Base_MspInit+0xcc>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <HAL_TIM_Base_MspInit+0xcc>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_TIM_Base_MspInit+0xcc>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	201c      	movs	r0, #28
 8002128:	f000 faa5 	bl	8002676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800212c:	201c      	movs	r0, #28
 800212e:	f000 fabe 	bl	80026ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002132:	e038      	b.n	80021a6 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_TIM_Base_MspInit+0xd0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d133      	bne.n	80021a6 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_TIM_Base_MspInit+0xcc>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <HAL_TIM_Base_MspInit+0xcc>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_TIM_Base_MspInit+0xcc>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_TIM_Base_MspInit+0xcc>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <HAL_TIM_Base_MspInit+0xcc>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_TIM_Base_MspInit+0xcc>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002176:	2340      	movs	r3, #64	; 0x40
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002186:	2302      	movs	r3, #2
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002192:	f000 fac3 	bl	800271c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	201d      	movs	r0, #29
 800219c:	f000 fa6b 	bl	8002676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021a0:	201d      	movs	r0, #29
 80021a2:	f000 fa84 	bl	80026ae <HAL_NVIC_EnableIRQ>
}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	; 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40020000 	.word	0x40020000

080021bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a12      	ldr	r2, [pc, #72]	; (8002224 <HAL_TIM_MspPostInit+0x68>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d11e      	bne.n	800221c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_TIM_MspPostInit+0x6c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <HAL_TIM_MspPostInit+0x6c>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_TIM_MspPostInit+0x6c>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800220c:	2301      	movs	r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4619      	mov	r1, r3
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <HAL_TIM_MspPostInit+0x70>)
 8002218:	f000 fa80 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800221c:	bf00      	nop
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40010000 	.word	0x40010000
 8002228:	40023800 	.word	0x40023800
 800222c:	40020000 	.word	0x40020000

08002230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_UART_MspInit+0x84>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d12c      	bne.n	80022ac <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_UART_MspInit+0x88>)
 800225c:	f043 0310 	orr.w	r3, r3, #16
 8002260:	6453      	str	r3, [r2, #68]	; 0x44
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_UART_MspInit+0x88>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800228a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800229c:	2307      	movs	r3, #7
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <HAL_UART_MspInit+0x8c>)
 80022a8:	f000 fa38 	bl	800271c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022ac:	bf00      	nop
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40011000 	.word	0x40011000
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020000 	.word	0x40020000

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <NMI_Handler+0x4>

080022c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <MemManage_Handler+0x4>

080022d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <BusFault_Handler+0x4>

080022d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <UsageFault_Handler+0x4>

080022de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002306:	f000 f89f 	bl	8002448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}

0800230e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_NRF_Pin);
 8002312:	2020      	movs	r0, #32
 8002314:	f000 fbb6 	bl	8002a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}

0800231c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <TIM2_IRQHandler+0x10>)
 8002322:	f002 f9fb 	bl	800471c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000104 	.word	0x20000104

08002330 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <TIM3_IRQHandler+0x10>)
 8002336:	f002 f9f1 	bl	800471c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000014c 	.word	0x2000014c

08002344 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002388 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002354:	480d      	ldr	r0, [pc, #52]	; (800238c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002356:	490e      	ldr	r1, [pc, #56]	; (8002390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002358:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800235c:	e002      	b.n	8002364 <LoopCopyDataInit>

0800235e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002362:	3304      	adds	r3, #4

08002364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002368:	d3f9      	bcc.n	800235e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800236c:	4c0b      	ldr	r4, [pc, #44]	; (800239c <LoopFillZerobss+0x26>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002370:	e001      	b.n	8002376 <LoopFillZerobss>

08002372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002374:	3204      	adds	r2, #4

08002376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002378:	d3fb      	bcc.n	8002372 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800237a:	f7ff ffe3 	bl	8002344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237e:	f006 f995 	bl	80086ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002382:	f7fe fa63 	bl	800084c <main>
  bx  lr    
 8002386:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002390:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002394:	080094dc 	.word	0x080094dc
  ldr r2, =_sbss
 8002398:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 800239c:	20001b38 	.word	0x20001b38

080023a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023a0:	e7fe      	b.n	80023a0 <ADC_IRQHandler>
	...

080023a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	; (80023e4 <HAL_Init+0x40>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <HAL_Init+0x40>)
 80023ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_Init+0x40>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 f947 	bl	8002660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d2:	200f      	movs	r0, #15
 80023d4:	f000 f808 	bl	80023e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d8:	f7ff fdd6 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023c00 	.word	0x40023c00

080023e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x54>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x58>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f95f 	bl	80026ca <HAL_SYSTICK_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e00e      	b.n	8002434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0f      	cmp	r3, #15
 800241a:	d80a      	bhi.n	8002432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800241c:	2200      	movs	r2, #0
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f000 f927 	bl	8002676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <HAL_InitTick+0x5c>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000028 	.word	0x20000028
 8002440:	20000030 	.word	0x20000030
 8002444:	2000002c 	.word	0x2000002c

08002448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_IncTick+0x1c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_IncTick+0x20>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4413      	add	r3, r2
 8002458:	4a03      	ldr	r2, [pc, #12]	; (8002468 <HAL_IncTick+0x20>)
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	20000030 	.word	0x20000030
 8002468:	20001b34 	.word	0x20001b34

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b02      	ldr	r3, [pc, #8]	; (800247c <HAL_GetTick+0x10>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	20001b34 	.word	0x20001b34

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff fff0 	bl	800246c <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffe0 	bl	800246c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000030 	.word	0x20000030

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4906      	ldr	r1, [pc, #24]	; (8002560 <__NVIC_EnableIRQ+0x34>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	e000e100 	.word	0xe000e100

08002564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	6039      	str	r1, [r7, #0]
 800256e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	2b00      	cmp	r3, #0
 8002576:	db0a      	blt.n	800258e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	b2da      	uxtb	r2, r3
 800257c:	490c      	ldr	r1, [pc, #48]	; (80025b0 <__NVIC_SetPriority+0x4c>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	440b      	add	r3, r1
 8002588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800258c:	e00a      	b.n	80025a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4908      	ldr	r1, [pc, #32]	; (80025b4 <__NVIC_SetPriority+0x50>)
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	3b04      	subs	r3, #4
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	440b      	add	r3, r1
 80025a2:	761a      	strb	r2, [r3, #24]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f1c3 0307 	rsb	r3, r3, #7
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	bf28      	it	cs
 80025d6:	2304      	movcs	r3, #4
 80025d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3304      	adds	r3, #4
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d902      	bls.n	80025e8 <NVIC_EncodePriority+0x30>
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3b03      	subs	r3, #3
 80025e6:	e000      	b.n	80025ea <NVIC_EncodePriority+0x32>
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43da      	mvns	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	401a      	ands	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002600:	f04f 31ff 	mov.w	r1, #4294967295
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	43d9      	mvns	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	4313      	orrs	r3, r2
         );
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3b01      	subs	r3, #1
 8002628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800262c:	d301      	bcc.n	8002632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262e:	2301      	movs	r3, #1
 8002630:	e00f      	b.n	8002652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <SysTick_Config+0x40>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263a:	210f      	movs	r1, #15
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f7ff ff90 	bl	8002564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <SysTick_Config+0x40>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <SysTick_Config+0x40>)
 800264c:	2207      	movs	r2, #7
 800264e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	e000e010 	.word	0xe000e010

08002660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ff2d 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002688:	f7ff ff42 	bl	8002510 <__NVIC_GetPriorityGrouping>
 800268c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	6978      	ldr	r0, [r7, #20]
 8002694:	f7ff ff90 	bl	80025b8 <NVIC_EncodePriority>
 8002698:	4602      	mov	r2, r0
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff5f 	bl	8002564 <__NVIC_SetPriority>
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff35 	bl	800252c <__NVIC_EnableIRQ>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffa2 	bl	800261c <SysTick_Config>
 80026d8:	4603      	mov	r3, r0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e00e      	b.n	8002712 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	795b      	ldrb	r3, [r3, #5]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff fc65 	bl	8001fd4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e159      	b.n	80029ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 8148 	bne.w	80029e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d005      	beq.n	800276e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276a:	2b02      	cmp	r3, #2
 800276c:	d130      	bne.n	80027d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 0201 	and.w	r2, r3, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d017      	beq.n	800280c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d123      	bne.n	8002860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	69b9      	ldr	r1, [r7, #24]
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80a2 	beq.w	80029e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <HAL_GPIO_Init+0x2e4>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4a55      	ldr	r2, [pc, #340]	; (8002a00 <HAL_GPIO_Init+0x2e4>)
 80028ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b0:	6453      	str	r3, [r2, #68]	; 0x44
 80028b2:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_GPIO_Init+0x2e4>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028be:	4a51      	ldr	r2, [pc, #324]	; (8002a04 <HAL_GPIO_Init+0x2e8>)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	220f      	movs	r2, #15
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a48      	ldr	r2, [pc, #288]	; (8002a08 <HAL_GPIO_Init+0x2ec>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d019      	beq.n	800291e <HAL_GPIO_Init+0x202>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a47      	ldr	r2, [pc, #284]	; (8002a0c <HAL_GPIO_Init+0x2f0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_GPIO_Init+0x1fe>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a46      	ldr	r2, [pc, #280]	; (8002a10 <HAL_GPIO_Init+0x2f4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00d      	beq.n	8002916 <HAL_GPIO_Init+0x1fa>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a45      	ldr	r2, [pc, #276]	; (8002a14 <HAL_GPIO_Init+0x2f8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d007      	beq.n	8002912 <HAL_GPIO_Init+0x1f6>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a44      	ldr	r2, [pc, #272]	; (8002a18 <HAL_GPIO_Init+0x2fc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d101      	bne.n	800290e <HAL_GPIO_Init+0x1f2>
 800290a:	2304      	movs	r3, #4
 800290c:	e008      	b.n	8002920 <HAL_GPIO_Init+0x204>
 800290e:	2307      	movs	r3, #7
 8002910:	e006      	b.n	8002920 <HAL_GPIO_Init+0x204>
 8002912:	2303      	movs	r3, #3
 8002914:	e004      	b.n	8002920 <HAL_GPIO_Init+0x204>
 8002916:	2302      	movs	r3, #2
 8002918:	e002      	b.n	8002920 <HAL_GPIO_Init+0x204>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_GPIO_Init+0x204>
 800291e:	2300      	movs	r3, #0
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	f002 0203 	and.w	r2, r2, #3
 8002926:	0092      	lsls	r2, r2, #2
 8002928:	4093      	lsls	r3, r2
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002930:	4934      	ldr	r1, [pc, #208]	; (8002a04 <HAL_GPIO_Init+0x2e8>)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800293e:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <HAL_GPIO_Init+0x300>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002962:	4a2e      	ldr	r2, [pc, #184]	; (8002a1c <HAL_GPIO_Init+0x300>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002968:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <HAL_GPIO_Init+0x300>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800298c:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <HAL_GPIO_Init+0x300>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002992:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_GPIO_Init+0x300>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_GPIO_Init+0x300>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029bc:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <HAL_GPIO_Init+0x300>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e0:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <HAL_GPIO_Init+0x300>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3301      	adds	r3, #1
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	f67f aea2 	bls.w	8002738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40020c00 	.word	0x40020c00
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40013c00 	.word	0x40013c00

08002a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a30:	787b      	ldrb	r3, [r7, #1]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a3c:	e003      	b.n	8002a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a3e:	887b      	ldrh	r3, [r7, #2]
 8002a40:	041a      	lsls	r2, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	619a      	str	r2, [r3, #24]
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4013      	ands	r3, r2
 8002a68:	041a      	lsls	r2, r3, #16
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43d9      	mvns	r1, r3
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	400b      	ands	r3, r1
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a9a:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f806 	bl	8002ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e267      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d075      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ae6:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d00c      	beq.n	8002b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af2:	4b85      	ldr	r3, [pc, #532]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d112      	bne.n	8002b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afe:	4b82      	ldr	r3, [pc, #520]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b0a:	d10b      	bne.n	8002b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	4b7e      	ldr	r3, [pc, #504]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d05b      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x108>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d157      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e242      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2c:	d106      	bne.n	8002b3c <HAL_RCC_OscConfig+0x74>
 8002b2e:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a75      	ldr	r2, [pc, #468]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e01d      	b.n	8002b78 <HAL_RCC_OscConfig+0xb0>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x98>
 8002b46:	4b70      	ldr	r3, [pc, #448]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a6f      	ldr	r2, [pc, #444]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b6d      	ldr	r3, [pc, #436]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6c      	ldr	r2, [pc, #432]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0xb0>
 8002b60:	4b69      	ldr	r3, [pc, #420]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a68      	ldr	r2, [pc, #416]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b66      	ldr	r3, [pc, #408]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a65      	ldr	r2, [pc, #404]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7ff fc74 	bl	800246c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b88:	f7ff fc70 	bl	800246c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e207      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0xc0>
 8002ba6:	e014      	b.n	8002bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7ff fc60 	bl	800246c <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7ff fc5c 	bl	800246c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1f3      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	4b51      	ldr	r3, [pc, #324]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0xe8>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d063      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bde:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d11c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf6:	4b44      	ldr	r3, [pc, #272]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_RCC_OscConfig+0x152>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e1c7      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4937      	ldr	r1, [pc, #220]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	e03a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c38:	4b34      	ldr	r3, [pc, #208]	; (8002d0c <HAL_RCC_OscConfig+0x244>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3e:	f7ff fc15 	bl	800246c <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c46:	f7ff fc11 	bl	800246c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1a8      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4925      	ldr	r1, [pc, #148]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]
 8002c78:	e015      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_RCC_OscConfig+0x244>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7ff fbf4 	bl	800246c <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c88:	f7ff fbf0 	bl	800246c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e187      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d036      	beq.n	8002d20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d016      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_RCC_OscConfig+0x248>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7ff fbd4 	bl	800246c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7ff fbd0 	bl	800246c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e167      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x200>
 8002ce6:	e01b      	b.n	8002d20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce8:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_RCC_OscConfig+0x248>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cee:	f7ff fbbd 	bl	800246c <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf4:	e00e      	b.n	8002d14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf6:	f7ff fbb9 	bl	800246c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d907      	bls.n	8002d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e150      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	42470000 	.word	0x42470000
 8002d10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d14:	4b88      	ldr	r3, [pc, #544]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1ea      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8097 	beq.w	8002e5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d32:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10f      	bne.n	8002d5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	4b7d      	ldr	r3, [pc, #500]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	4a7c      	ldr	r2, [pc, #496]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4e:	4b7a      	ldr	r3, [pc, #488]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5e:	4b77      	ldr	r3, [pc, #476]	; (8002f3c <HAL_RCC_OscConfig+0x474>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d118      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6a:	4b74      	ldr	r3, [pc, #464]	; (8002f3c <HAL_RCC_OscConfig+0x474>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a73      	ldr	r2, [pc, #460]	; (8002f3c <HAL_RCC_OscConfig+0x474>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d76:	f7ff fb79 	bl	800246c <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7e:	f7ff fb75 	bl	800246c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e10c      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	4b6a      	ldr	r3, [pc, #424]	; (8002f3c <HAL_RCC_OscConfig+0x474>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x2ea>
 8002da4:	4b64      	ldr	r3, [pc, #400]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a63      	ldr	r2, [pc, #396]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	e01c      	b.n	8002dec <HAL_RCC_OscConfig+0x324>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x30c>
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	4a5e      	ldr	r2, [pc, #376]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	f043 0304 	orr.w	r3, r3, #4
 8002dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc6:	4b5c      	ldr	r3, [pc, #368]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a5b      	ldr	r2, [pc, #364]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd2:	e00b      	b.n	8002dec <HAL_RCC_OscConfig+0x324>
 8002dd4:	4b58      	ldr	r3, [pc, #352]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	4a57      	ldr	r2, [pc, #348]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	6713      	str	r3, [r2, #112]	; 0x70
 8002de0:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	4a54      	ldr	r2, [pc, #336]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002de6:	f023 0304 	bic.w	r3, r3, #4
 8002dea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7ff fb3a 	bl	800246c <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfc:	f7ff fb36 	bl	800246c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e0cb      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e12:	4b49      	ldr	r3, [pc, #292]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0ee      	beq.n	8002dfc <HAL_RCC_OscConfig+0x334>
 8002e1e:	e014      	b.n	8002e4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e20:	f7ff fb24 	bl	800246c <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7ff fb20 	bl	800246c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e0b5      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1ee      	bne.n	8002e28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e50:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	4a38      	ldr	r2, [pc, #224]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a1 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e66:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d05c      	beq.n	8002f2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d141      	bne.n	8002efe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCC_OscConfig+0x478>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7ff faf4 	bl	800246c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e88:	f7ff faf0 	bl	800246c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e087      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69da      	ldr	r2, [r3, #28]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	019b      	lsls	r3, r3, #6
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	041b      	lsls	r3, r3, #16
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	491b      	ldr	r1, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed0:	4b1b      	ldr	r3, [pc, #108]	; (8002f40 <HAL_RCC_OscConfig+0x478>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7ff fac9 	bl	800246c <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ede:	f7ff fac5 	bl	800246c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e05c      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x416>
 8002efc:	e054      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <HAL_RCC_OscConfig+0x478>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7ff fab2 	bl	800246c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7ff faae 	bl	800246c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e045      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_RCC_OscConfig+0x470>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x444>
 8002f2a:	e03d      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e038      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40007000 	.word	0x40007000
 8002f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x4ec>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d028      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d121      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d11a      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d111      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0cc      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d90c      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b65      	ldr	r3, [pc, #404]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b63      	ldr	r3, [pc, #396]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0b8      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a58      	ldr	r2, [pc, #352]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a52      	ldr	r2, [pc, #328]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800302e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003030:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	494d      	ldr	r1, [pc, #308]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d044      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d119      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e07f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d003      	beq.n	8003076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	2b03      	cmp	r3, #3
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003076:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003086:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e067      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f023 0203 	bic.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4934      	ldr	r1, [pc, #208]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a8:	f7ff f9e0 	bl	800246c <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b0:	f7ff f9dc 	bl	800246c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e04f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 020c 	and.w	r2, r3, #12
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d1eb      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d20c      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e032      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4916      	ldr	r1, [pc, #88]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	490e      	ldr	r1, [pc, #56]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800313e:	f000 f821 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	490a      	ldr	r1, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	5ccb      	ldrb	r3, [r1, r3]
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	4a09      	ldr	r2, [pc, #36]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f942 	bl	80023e8 <HAL_InitTick>

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023c00 	.word	0x40023c00
 8003174:	40023800 	.word	0x40023800
 8003178:	08008f8c 	.word	0x08008f8c
 800317c:	20000028 	.word	0x20000028
 8003180:	2000002c 	.word	0x2000002c

08003184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003188:	b090      	sub	sp, #64	; 0x40
 800318a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	637b      	str	r3, [r7, #52]	; 0x34
 8003190:	2300      	movs	r3, #0
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003194:	2300      	movs	r3, #0
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800319c:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_RCC_GetSysClockFreq+0x180>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d00d      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x40>
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	f200 80a2 	bhi.w	80032f2 <HAL_RCC_GetSysClockFreq+0x16e>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x34>
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d003      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0x3a>
 80031b6:	e09c      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <HAL_RCC_GetSysClockFreq+0x184>)
 80031ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80031bc:	e09c      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031be:	4b53      	ldr	r3, [pc, #332]	; (800330c <HAL_RCC_GetSysClockFreq+0x188>)
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031c2:	e099      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031c4:	4b4f      	ldr	r3, [pc, #316]	; (8003304 <HAL_RCC_GetSysClockFreq+0x180>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ce:	4b4d      	ldr	r3, [pc, #308]	; (8003304 <HAL_RCC_GetSysClockFreq+0x180>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d027      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031da:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <HAL_RCC_GetSysClockFreq+0x180>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	099b      	lsrs	r3, r3, #6
 80031e0:	2200      	movs	r2, #0
 80031e2:	623b      	str	r3, [r7, #32]
 80031e4:	627a      	str	r2, [r7, #36]	; 0x24
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031ec:	2100      	movs	r1, #0
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCC_GetSysClockFreq+0x188>)
 80031f0:	fb03 f201 	mul.w	r2, r3, r1
 80031f4:	2300      	movs	r3, #0
 80031f6:	fb00 f303 	mul.w	r3, r0, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	4a43      	ldr	r2, [pc, #268]	; (800330c <HAL_RCC_GetSysClockFreq+0x188>)
 80031fe:	fba0 2102 	umull	r2, r1, r0, r2
 8003202:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003204:	62ba      	str	r2, [r7, #40]	; 0x28
 8003206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003208:	4413      	add	r3, r2
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	2200      	movs	r2, #0
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	61fa      	str	r2, [r7, #28]
 8003214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003218:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800321c:	f7fc ffdc 	bl	80001d8 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003228:	e055      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b36      	ldr	r3, [pc, #216]	; (8003304 <HAL_RCC_GetSysClockFreq+0x180>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	2200      	movs	r2, #0
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	617a      	str	r2, [r7, #20]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800323c:	f04f 0b00 	mov.w	fp, #0
 8003240:	4652      	mov	r2, sl
 8003242:	465b      	mov	r3, fp
 8003244:	f04f 0000 	mov.w	r0, #0
 8003248:	f04f 0100 	mov.w	r1, #0
 800324c:	0159      	lsls	r1, r3, #5
 800324e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003252:	0150      	lsls	r0, r2, #5
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	ebb2 080a 	subs.w	r8, r2, sl
 800325c:	eb63 090b 	sbc.w	r9, r3, fp
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800326c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003270:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003274:	ebb2 0408 	subs.w	r4, r2, r8
 8003278:	eb63 0509 	sbc.w	r5, r3, r9
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	00eb      	lsls	r3, r5, #3
 8003286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328a:	00e2      	lsls	r2, r4, #3
 800328c:	4614      	mov	r4, r2
 800328e:	461d      	mov	r5, r3
 8003290:	eb14 030a 	adds.w	r3, r4, sl
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	eb45 030b 	adc.w	r3, r5, fp
 800329a:	607b      	str	r3, [r7, #4]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032a8:	4629      	mov	r1, r5
 80032aa:	028b      	lsls	r3, r1, #10
 80032ac:	4620      	mov	r0, r4
 80032ae:	4629      	mov	r1, r5
 80032b0:	4604      	mov	r4, r0
 80032b2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80032b6:	4601      	mov	r1, r0
 80032b8:	028a      	lsls	r2, r1, #10
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	2200      	movs	r2, #0
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	60fa      	str	r2, [r7, #12]
 80032c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ca:	f7fc ff85 	bl	80001d8 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4613      	mov	r3, r2
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_GetSysClockFreq+0x180>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	0c1b      	lsrs	r3, r3, #16
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	3301      	adds	r3, #1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80032e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032f0:	e002      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetSysClockFreq+0x184>)
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3740      	adds	r7, #64	; 0x40
 80032fe:	46bd      	mov	sp, r7
 8003300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	00f42400 	.word	0x00f42400
 800330c:	017d7840 	.word	0x017d7840

08003310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003314:	4b02      	ldr	r3, [pc, #8]	; (8003320 <HAL_RCC_GetHCLKFreq+0x10>)
 8003316:	681b      	ldr	r3, [r3, #0]
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	20000028 	.word	0x20000028

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003328:	f7ff fff2 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4903      	ldr	r1, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	08008f9c 	.word	0x08008f9c

0800334c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003350:	f7ff ffde 	bl	8003310 <HAL_RCC_GetHCLKFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0b5b      	lsrs	r3, r3, #13
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4903      	ldr	r1, [pc, #12]	; (8003370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	08008f9c 	.word	0x08008f9c

08003374 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e07b      	b.n	800347e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d108      	bne.n	80033a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003396:	d009      	beq.n	80033ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	61da      	str	r2, [r3, #28]
 800339e:	e005      	b.n	80033ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fe fe24 	bl	8002014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	ea42 0103 	orr.w	r1, r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	f003 0104 	and.w	r1, r3, #4
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f003 0210 	and.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b088      	sub	sp, #32
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	603b      	str	r3, [r7, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_SPI_Transmit+0x22>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e126      	b.n	80036f6 <HAL_SPI_Transmit+0x270>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034b0:	f7fe ffdc 	bl	800246c <HAL_GetTick>
 80034b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d002      	beq.n	80034cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034ca:	e10b      	b.n	80036e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_SPI_Transmit+0x52>
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034dc:	e102      	b.n	80036e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2203      	movs	r2, #3
 80034e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003524:	d10f      	bne.n	8003546 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003534:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003544:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d007      	beq.n	8003564 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356c:	d14b      	bne.n	8003606 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_SPI_Transmit+0xf6>
 8003576:	8afb      	ldrh	r3, [r7, #22]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d13e      	bne.n	80035fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	881a      	ldrh	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035a0:	e02b      	b.n	80035fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d112      	bne.n	80035d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	1c9a      	adds	r2, r3, #2
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80035d4:	e011      	b.n	80035fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035d6:	f7fe ff49 	bl	800246c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d803      	bhi.n	80035ee <HAL_SPI_Transmit+0x168>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d102      	bne.n	80035f4 <HAL_SPI_Transmit+0x16e>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035f8:	e074      	b.n	80036e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ce      	bne.n	80035a2 <HAL_SPI_Transmit+0x11c>
 8003604:	e04c      	b.n	80036a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_SPI_Transmit+0x18e>
 800360e:	8afb      	ldrh	r3, [r7, #22]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d140      	bne.n	8003696 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800363a:	e02c      	b.n	8003696 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d113      	bne.n	8003672 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	330c      	adds	r3, #12
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003670:	e011      	b.n	8003696 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003672:	f7fe fefb 	bl	800246c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d803      	bhi.n	800368a <HAL_SPI_Transmit+0x204>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d102      	bne.n	8003690 <HAL_SPI_Transmit+0x20a>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003694:	e026      	b.n	80036e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1cd      	bne.n	800363c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	6839      	ldr	r1, [r7, #0]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fbcb 	bl	8003e40 <SPI_EndRxTxTransaction>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e000      	b.n	80036e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80036e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b088      	sub	sp, #32
 8003702:	af02      	add	r7, sp, #8
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800371a:	d112      	bne.n	8003742 <HAL_SPI_Receive+0x44>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10e      	bne.n	8003742 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2204      	movs	r2, #4
 8003728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800372c:	88fa      	ldrh	r2, [r7, #6]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4613      	mov	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f8f1 	bl	8003920 <HAL_SPI_TransmitReceive>
 800373e:	4603      	mov	r3, r0
 8003740:	e0ea      	b.n	8003918 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_SPI_Receive+0x52>
 800374c:	2302      	movs	r3, #2
 800374e:	e0e3      	b.n	8003918 <HAL_SPI_Receive+0x21a>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003758:	f7fe fe88 	bl	800246c <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d002      	beq.n	8003770 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800376a:	2302      	movs	r3, #2
 800376c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800376e:	e0ca      	b.n	8003906 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_SPI_Receive+0x7e>
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003780:	e0c1      	b.n	8003906 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2204      	movs	r2, #4
 8003786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	88fa      	ldrh	r2, [r7, #6]
 800379a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c8:	d10f      	bne.n	80037ea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d007      	beq.n	8003808 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003806:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d162      	bne.n	80038d6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003810:	e02e      	b.n	8003870 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b01      	cmp	r3, #1
 800381e:	d115      	bne.n	800384c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f103 020c 	add.w	r2, r3, #12
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	87da      	strh	r2, [r3, #62]	; 0x3e
 800384a:	e011      	b.n	8003870 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384c:	f7fe fe0e 	bl	800246c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d803      	bhi.n	8003864 <HAL_SPI_Receive+0x166>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d102      	bne.n	800386a <HAL_SPI_Receive+0x16c>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800386e:	e04a      	b.n	8003906 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1cb      	bne.n	8003812 <HAL_SPI_Receive+0x114>
 800387a:	e031      	b.n	80038e0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d113      	bne.n	80038b2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	b292      	uxth	r2, r2
 8003896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	1c9a      	adds	r2, r3, #2
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038b0:	e011      	b.n	80038d6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b2:	f7fe fddb 	bl	800246c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d803      	bhi.n	80038ca <HAL_SPI_Receive+0x1cc>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d102      	bne.n	80038d0 <HAL_SPI_Receive+0x1d2>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038d4:	e017      	b.n	8003906 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1cd      	bne.n	800387c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	6839      	ldr	r1, [r7, #0]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fa45 	bl	8003d74 <SPI_EndRxTransaction>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
 8003902:	e000      	b.n	8003906 <HAL_SPI_Receive+0x208>
  }

error :
 8003904:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003916:	7dfb      	ldrb	r3, [r7, #23]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800392e:	2301      	movs	r3, #1
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x26>
 8003942:	2302      	movs	r3, #2
 8003944:	e18a      	b.n	8003c5c <HAL_SPI_TransmitReceive+0x33c>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800394e:	f7fe fd8d 	bl	800246c <HAL_GetTick>
 8003952:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800396c:	2b01      	cmp	r3, #1
 800396e:	d00f      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x70>
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003976:	d107      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x68>
 8003980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003984:	2b04      	cmp	r3, #4
 8003986:	d003      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003988:	2302      	movs	r3, #2
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800398e:	e15b      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_SPI_TransmitReceive+0x82>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_SPI_TransmitReceive+0x82>
 800399c:	887b      	ldrh	r3, [r7, #2]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039a8:	e14e      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d003      	beq.n	80039be <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2205      	movs	r2, #5
 80039ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	887a      	ldrh	r2, [r7, #2]
 80039ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	887a      	ldrh	r2, [r7, #2]
 80039e6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d007      	beq.n	8003a12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1a:	d178      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_SPI_TransmitReceive+0x10a>
 8003a24:	8b7b      	ldrh	r3, [r7, #26]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d166      	bne.n	8003af8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	881a      	ldrh	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	1c9a      	adds	r2, r3, #2
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a4e:	e053      	b.n	8003af8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d11b      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x176>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d016      	beq.n	8003a96 <HAL_SPI_TransmitReceive+0x176>
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d113      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	881a      	ldrh	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	1c9a      	adds	r2, r3, #2
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d119      	bne.n	8003ad8 <HAL_SPI_TransmitReceive+0x1b8>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d014      	beq.n	8003ad8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68da      	ldr	r2, [r3, #12]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	1c9a      	adds	r2, r3, #2
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ad8:	f7fe fcc8 	bl	800246c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d807      	bhi.n	8003af8 <HAL_SPI_TransmitReceive+0x1d8>
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d003      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003af6:	e0a7      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1a6      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x130>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1a1      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x130>
 8003b0c:	e07c      	b.n	8003c08 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x1fc>
 8003b16:	8b7b      	ldrh	r3, [r7, #26]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d16b      	bne.n	8003bf4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	7812      	ldrb	r2, [r2, #0]
 8003b28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b42:	e057      	b.n	8003bf4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d11c      	bne.n	8003b8c <HAL_SPI_TransmitReceive+0x26c>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d017      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x26c>
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d114      	bne.n	8003b8c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	330c      	adds	r3, #12
 8003b6c:	7812      	ldrb	r2, [r2, #0]
 8003b6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d119      	bne.n	8003bce <HAL_SPI_TransmitReceive+0x2ae>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d014      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bce:	f7fe fc4d 	bl	800246c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d803      	bhi.n	8003be6 <HAL_SPI_TransmitReceive+0x2c6>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d102      	bne.n	8003bec <HAL_SPI_TransmitReceive+0x2cc>
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d103      	bne.n	8003bf4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bf2:	e029      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1a2      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x224>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d19d      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f917 	bl	8003e40 <SPI_EndRxTxTransaction>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d006      	beq.n	8003c26 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c24:	e010      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	e000      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3730      	adds	r7, #48	; 0x30
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c74:	f7fe fbfa 	bl	800246c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	4413      	add	r3, r2
 8003c82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c84:	f7fe fbf2 	bl	800246c <HAL_GetTick>
 8003c88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	015b      	lsls	r3, r3, #5
 8003c90:	0d1b      	lsrs	r3, r3, #20
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c9a:	e054      	b.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d050      	beq.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ca4:	f7fe fbe2 	bl	800246c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d902      	bls.n	8003cba <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d13d      	bne.n	8003d36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd2:	d111      	bne.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cdc:	d004      	beq.n	8003ce8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce6:	d107      	bne.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d00:	d10f      	bne.n	8003d22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e017      	b.n	8003d66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	bf0c      	ite	eq
 8003d56:	2301      	moveq	r3, #1
 8003d58:	2300      	movne	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d19b      	bne.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000028 	.word	0x20000028

08003d74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d88:	d111      	bne.n	8003dae <SPI_EndRxTransaction+0x3a>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d92:	d004      	beq.n	8003d9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9c:	d107      	bne.n	8003dae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dac:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db6:	d12a      	bne.n	8003e0e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc0:	d012      	beq.n	8003de8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff49 	bl	8003c64 <SPI_WaitFlagStateUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d02d      	beq.n	8003e34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e026      	b.n	8003e36 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2200      	movs	r2, #0
 8003df0:	2101      	movs	r1, #1
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7ff ff36 	bl	8003c64 <SPI_WaitFlagStateUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01a      	beq.n	8003e34 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e013      	b.n	8003e36 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	2101      	movs	r1, #1
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff ff23 	bl	8003c64 <SPI_WaitFlagStateUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e28:	f043 0220 	orr.w	r2, r3, #32
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e000      	b.n	8003e36 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <SPI_EndRxTxTransaction+0x7c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <SPI_EndRxTxTransaction+0x80>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0d5b      	lsrs	r3, r3, #21
 8003e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d112      	bne.n	8003e92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff fef4 	bl	8003c64 <SPI_WaitFlagStateUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e00f      	b.n	8003eb2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea8:	2b80      	cmp	r3, #128	; 0x80
 8003eaa:	d0f2      	beq.n	8003e92 <SPI_EndRxTxTransaction+0x52>
 8003eac:	e000      	b.n	8003eb0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003eae:	bf00      	nop
  }

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000028 	.word	0x20000028
 8003ec0:	165e9f81 	.word	0x165e9f81

08003ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e041      	b.n	8003f5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fe f8fa 	bl	80020e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f000 ffee 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d001      	beq.n	8003f7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e03c      	b.n	8003ff6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <HAL_TIM_Base_Start+0x9c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d018      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x5c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f96:	d013      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x5c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a19      	ldr	r2, [pc, #100]	; (8004004 <HAL_TIM_Base_Start+0xa0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00e      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x5c>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a18      	ldr	r2, [pc, #96]	; (8004008 <HAL_TIM_Base_Start+0xa4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d009      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x5c>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a16      	ldr	r2, [pc, #88]	; (800400c <HAL_TIM_Base_Start+0xa8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_TIM_Base_Start+0x5c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <HAL_TIM_Base_Start+0xac>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d111      	bne.n	8003fe4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b06      	cmp	r3, #6
 8003fd0:	d010      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe2:	e007      	b.n	8003ff4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	40010000 	.word	0x40010000
 8004004:	40000400 	.word	0x40000400
 8004008:	40000800 	.word	0x40000800
 800400c:	40000c00 	.word	0x40000c00
 8004010:	40014000 	.word	0x40014000

08004014 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e041      	b.n	80040aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fe f832 	bl	80020a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f000 ff46 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d109      	bne.n	80040d8 <HAL_TIM_PWM_Start+0x24>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	e022      	b.n	800411e <HAL_TIM_PWM_Start+0x6a>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d109      	bne.n	80040f2 <HAL_TIM_PWM_Start+0x3e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	bf14      	ite	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	2300      	moveq	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	e015      	b.n	800411e <HAL_TIM_PWM_Start+0x6a>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d109      	bne.n	800410c <HAL_TIM_PWM_Start+0x58>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e008      	b.n	800411e <HAL_TIM_PWM_Start+0x6a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e068      	b.n	80041f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d104      	bne.n	8004136 <HAL_TIM_PWM_Start+0x82>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004134:	e013      	b.n	800415e <HAL_TIM_PWM_Start+0xaa>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d104      	bne.n	8004146 <HAL_TIM_PWM_Start+0x92>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004144:	e00b      	b.n	800415e <HAL_TIM_PWM_Start+0xaa>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d104      	bne.n	8004156 <HAL_TIM_PWM_Start+0xa2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004154:	e003      	b.n	800415e <HAL_TIM_PWM_Start+0xaa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2201      	movs	r2, #1
 8004164:	6839      	ldr	r1, [r7, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fb03 	bl	8005772 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a23      	ldr	r2, [pc, #140]	; (8004200 <HAL_TIM_PWM_Start+0x14c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d107      	bne.n	8004186 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <HAL_TIM_PWM_Start+0x14c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d018      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x10e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004198:	d013      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x10e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a19      	ldr	r2, [pc, #100]	; (8004204 <HAL_TIM_PWM_Start+0x150>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x10e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a17      	ldr	r2, [pc, #92]	; (8004208 <HAL_TIM_PWM_Start+0x154>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d009      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x10e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a16      	ldr	r2, [pc, #88]	; (800420c <HAL_TIM_PWM_Start+0x158>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x10e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <HAL_TIM_PWM_Start+0x15c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d111      	bne.n	80041e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b06      	cmp	r3, #6
 80041d2:	d010      	beq.n	80041f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e4:	e007      	b.n	80041f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40010000 	.word	0x40010000
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40014000 	.word	0x40014000

08004214 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f001 faa3 	bl	8005772 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <HAL_TIM_PWM_Stop+0xc4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d117      	bne.n	8004266 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a1a      	ldr	r2, [r3, #32]
 800423c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <HAL_TIM_PWM_Stop+0x52>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a1a      	ldr	r2, [r3, #32]
 800424c:	f240 4344 	movw	r3, #1092	; 0x444
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <HAL_TIM_PWM_Stop+0x52>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6a1a      	ldr	r2, [r3, #32]
 800426c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_TIM_PWM_Stop+0x82>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a1a      	ldr	r2, [r3, #32]
 800427c:	f240 4344 	movw	r3, #1092	; 0x444
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <HAL_TIM_PWM_Stop+0x82>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <HAL_TIM_PWM_Stop+0x92>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a4:	e013      	b.n	80042ce <HAL_TIM_PWM_Stop+0xba>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d104      	bne.n	80042b6 <HAL_TIM_PWM_Stop+0xa2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b4:	e00b      	b.n	80042ce <HAL_TIM_PWM_Stop+0xba>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_PWM_Stop+0xb2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c4:	e003      	b.n	80042ce <HAL_TIM_PWM_Stop+0xba>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40010000 	.word	0x40010000

080042dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e041      	b.n	8004372 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f839 	bl	800437a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 fde2 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <HAL_TIM_IC_Start_IT+0x1e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	e013      	b.n	80043d2 <HAL_TIM_IC_Start_IT+0x46>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d104      	bne.n	80043ba <HAL_TIM_IC_Start_IT+0x2e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	e00b      	b.n	80043d2 <HAL_TIM_IC_Start_IT+0x46>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d104      	bne.n	80043ca <HAL_TIM_IC_Start_IT+0x3e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	e003      	b.n	80043d2 <HAL_TIM_IC_Start_IT+0x46>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <HAL_TIM_IC_Start_IT+0x58>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e013      	b.n	800440c <HAL_TIM_IC_Start_IT+0x80>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d104      	bne.n	80043f4 <HAL_TIM_IC_Start_IT+0x68>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e00b      	b.n	800440c <HAL_TIM_IC_Start_IT+0x80>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d104      	bne.n	8004404 <HAL_TIM_IC_Start_IT+0x78>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e003      	b.n	800440c <HAL_TIM_IC_Start_IT+0x80>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800440a:	b2db      	uxtb	r3, r3
 800440c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800440e:	7bbb      	ldrb	r3, [r7, #14]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d102      	bne.n	800441a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004414:	7b7b      	ldrb	r3, [r7, #13]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d001      	beq.n	800441e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e0c2      	b.n	80045a4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <HAL_TIM_IC_Start_IT+0xa2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800442c:	e013      	b.n	8004456 <HAL_TIM_IC_Start_IT+0xca>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b04      	cmp	r3, #4
 8004432:	d104      	bne.n	800443e <HAL_TIM_IC_Start_IT+0xb2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800443c:	e00b      	b.n	8004456 <HAL_TIM_IC_Start_IT+0xca>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d104      	bne.n	800444e <HAL_TIM_IC_Start_IT+0xc2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800444c:	e003      	b.n	8004456 <HAL_TIM_IC_Start_IT+0xca>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <HAL_TIM_IC_Start_IT+0xda>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004464:	e013      	b.n	800448e <HAL_TIM_IC_Start_IT+0x102>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b04      	cmp	r3, #4
 800446a:	d104      	bne.n	8004476 <HAL_TIM_IC_Start_IT+0xea>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004474:	e00b      	b.n	800448e <HAL_TIM_IC_Start_IT+0x102>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d104      	bne.n	8004486 <HAL_TIM_IC_Start_IT+0xfa>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004484:	e003      	b.n	800448e <HAL_TIM_IC_Start_IT+0x102>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d841      	bhi.n	8004518 <HAL_TIM_IC_Start_IT+0x18c>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <HAL_TIM_IC_Start_IT+0x110>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044d1 	.word	0x080044d1
 80044a0:	08004519 	.word	0x08004519
 80044a4:	08004519 	.word	0x08004519
 80044a8:	08004519 	.word	0x08004519
 80044ac:	080044e3 	.word	0x080044e3
 80044b0:	08004519 	.word	0x08004519
 80044b4:	08004519 	.word	0x08004519
 80044b8:	08004519 	.word	0x08004519
 80044bc:	080044f5 	.word	0x080044f5
 80044c0:	08004519 	.word	0x08004519
 80044c4:	08004519 	.word	0x08004519
 80044c8:	08004519 	.word	0x08004519
 80044cc:	08004507 	.word	0x08004507
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0202 	orr.w	r2, r2, #2
 80044de:	60da      	str	r2, [r3, #12]
      break;
 80044e0:	e01d      	b.n	800451e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0204 	orr.w	r2, r2, #4
 80044f0:	60da      	str	r2, [r3, #12]
      break;
 80044f2:	e014      	b.n	800451e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0208 	orr.w	r2, r2, #8
 8004502:	60da      	str	r2, [r3, #12]
      break;
 8004504:	e00b      	b.n	800451e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0210 	orr.w	r2, r2, #16
 8004514:	60da      	str	r2, [r3, #12]
      break;
 8004516:	e002      	b.n	800451e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      break;
 800451c:	bf00      	nop
  }

  if (status == HAL_OK)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d13e      	bne.n	80045a2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2201      	movs	r2, #1
 800452a:	6839      	ldr	r1, [r7, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f001 f920 	bl	8005772 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <HAL_TIM_IC_Start_IT+0x220>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d018      	beq.n	800456e <HAL_TIM_IC_Start_IT+0x1e2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004544:	d013      	beq.n	800456e <HAL_TIM_IC_Start_IT+0x1e2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <HAL_TIM_IC_Start_IT+0x224>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_TIM_IC_Start_IT+0x1e2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <HAL_TIM_IC_Start_IT+0x228>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d009      	beq.n	800456e <HAL_TIM_IC_Start_IT+0x1e2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <HAL_TIM_IC_Start_IT+0x22c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d004      	beq.n	800456e <HAL_TIM_IC_Start_IT+0x1e2>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a14      	ldr	r2, [pc, #80]	; (80045bc <HAL_TIM_IC_Start_IT+0x230>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d111      	bne.n	8004592 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b06      	cmp	r3, #6
 800457e:	d010      	beq.n	80045a2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004590:	e007      	b.n	80045a2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40010000 	.word	0x40010000
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800
 80045b8:	40000c00 	.word	0x40000c00
 80045bc:	40014000 	.word	0x40014000

080045c0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ca:	2300      	movs	r3, #0
 80045cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b0c      	cmp	r3, #12
 80045d2:	d841      	bhi.n	8004658 <HAL_TIM_IC_Stop_IT+0x98>
 80045d4:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <HAL_TIM_IC_Stop_IT+0x1c>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	08004611 	.word	0x08004611
 80045e0:	08004659 	.word	0x08004659
 80045e4:	08004659 	.word	0x08004659
 80045e8:	08004659 	.word	0x08004659
 80045ec:	08004623 	.word	0x08004623
 80045f0:	08004659 	.word	0x08004659
 80045f4:	08004659 	.word	0x08004659
 80045f8:	08004659 	.word	0x08004659
 80045fc:	08004635 	.word	0x08004635
 8004600:	08004659 	.word	0x08004659
 8004604:	08004659 	.word	0x08004659
 8004608:	08004659 	.word	0x08004659
 800460c:	08004647 	.word	0x08004647
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0202 	bic.w	r2, r2, #2
 800461e:	60da      	str	r2, [r3, #12]
      break;
 8004620:	e01d      	b.n	800465e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0204 	bic.w	r2, r2, #4
 8004630:	60da      	str	r2, [r3, #12]
      break;
 8004632:	e014      	b.n	800465e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0208 	bic.w	r2, r2, #8
 8004642:	60da      	str	r2, [r3, #12]
      break;
 8004644:	e00b      	b.n	800465e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0210 	bic.w	r2, r2, #16
 8004654:	60da      	str	r2, [r3, #12]
      break;
 8004656:	e002      	b.n	800465e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      break;
 800465c:	bf00      	nop
  }

  if (status == HAL_OK)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d156      	bne.n	8004712 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2200      	movs	r2, #0
 800466a:	6839      	ldr	r1, [r7, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f001 f880 	bl	8005772 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6a1a      	ldr	r2, [r3, #32]
 8004678:	f241 1311 	movw	r3, #4369	; 0x1111
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10f      	bne.n	80046a2 <HAL_TIM_IC_Stop_IT+0xe2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	f240 4344 	movw	r3, #1092	; 0x444
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d107      	bne.n	80046a2 <HAL_TIM_IC_Stop_IT+0xe2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_IC_Stop_IT+0xf2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b0:	e013      	b.n	80046da <HAL_TIM_IC_Stop_IT+0x11a>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_IC_Stop_IT+0x102>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c0:	e00b      	b.n	80046da <HAL_TIM_IC_Stop_IT+0x11a>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d104      	bne.n	80046d2 <HAL_TIM_IC_Stop_IT+0x112>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d0:	e003      	b.n	80046da <HAL_TIM_IC_Stop_IT+0x11a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_TIM_IC_Stop_IT+0x12a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e8:	e013      	b.n	8004712 <HAL_TIM_IC_Stop_IT+0x152>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d104      	bne.n	80046fa <HAL_TIM_IC_Stop_IT+0x13a>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046f8:	e00b      	b.n	8004712 <HAL_TIM_IC_Stop_IT+0x152>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d104      	bne.n	800470a <HAL_TIM_IC_Stop_IT+0x14a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004708:	e003      	b.n	8004712 <HAL_TIM_IC_Stop_IT+0x152>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8004712:	7bfb      	ldrb	r3, [r7, #15]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b02      	cmp	r3, #2
 8004730:	d122      	bne.n	8004778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b02      	cmp	r3, #2
 800473e:	d11b      	bne.n	8004778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0202 	mvn.w	r2, #2
 8004748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fc f85a 	bl	8000818 <HAL_TIM_IC_CaptureCallback>
 8004764:	e005      	b.n	8004772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fb95 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fb9b 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b04      	cmp	r3, #4
 8004784:	d122      	bne.n	80047cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b04      	cmp	r3, #4
 8004792:	d11b      	bne.n	80047cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0204 	mvn.w	r2, #4
 800479c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc f830 	bl	8000818 <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fb6b 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fb71 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0208 	mvn.w	r2, #8
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2204      	movs	r2, #4
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fc f806 	bl	8000818 <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fb41 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fb47 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	2b10      	cmp	r3, #16
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b10      	cmp	r3, #16
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0210 	mvn.w	r2, #16
 8004844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2208      	movs	r2, #8
 800484a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fb ffdc 	bl	8000818 <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fb17 	bl	8004e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fb1d 	bl	8004ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d10e      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d107      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0201 	mvn.w	r2, #1
 8004898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 faf2 	bl	8004e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d10e      	bne.n	80048cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b8:	2b80      	cmp	r3, #128	; 0x80
 80048ba:	d107      	bne.n	80048cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f001 f83e 	bl	8005948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d10e      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d107      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fae1 	bl	8004eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b20      	cmp	r3, #32
 8004904:	d10e      	bne.n	8004924 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b20      	cmp	r3, #32
 8004912:	d107      	bne.n	8004924 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0220 	mvn.w	r2, #32
 800491c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f001 f809 	bl	8005936 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004924:	bf00      	nop
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004946:	2302      	movs	r3, #2
 8004948:	e088      	b.n	8004a5c <HAL_TIM_IC_ConfigChannel+0x130>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f000 fd54 	bl	8005414 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 020c 	bic.w	r2, r2, #12
 800497a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6999      	ldr	r1, [r3, #24]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	619a      	str	r2, [r3, #24]
 800498e:	e060      	b.n	8004a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b04      	cmp	r3, #4
 8004994:	d11c      	bne.n	80049d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6819      	ldr	r1, [r3, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f000 fdc9 	bl	800553c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699a      	ldr	r2, [r3, #24]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6999      	ldr	r1, [r3, #24]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	021a      	lsls	r2, r3, #8
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	619a      	str	r2, [r3, #24]
 80049ce:	e040      	b.n	8004a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d11b      	bne.n	8004a0e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f000 fe14 	bl	8005612 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 020c 	bic.w	r2, r2, #12
 80049f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69d9      	ldr	r1, [r3, #28]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	61da      	str	r2, [r3, #28]
 8004a0c:	e021      	b.n	8004a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b0c      	cmp	r3, #12
 8004a12:	d11c      	bne.n	8004a4e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f000 fe30 	bl	8005688 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a36:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69d9      	ldr	r1, [r3, #28]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	61da      	str	r2, [r3, #28]
 8004a4c:	e001      	b.n	8004a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0ae      	b.n	8004be0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	f200 809f 	bhi.w	8004bd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004acd 	.word	0x08004acd
 8004a9c:	08004bd1 	.word	0x08004bd1
 8004aa0:	08004bd1 	.word	0x08004bd1
 8004aa4:	08004bd1 	.word	0x08004bd1
 8004aa8:	08004b0d 	.word	0x08004b0d
 8004aac:	08004bd1 	.word	0x08004bd1
 8004ab0:	08004bd1 	.word	0x08004bd1
 8004ab4:	08004bd1 	.word	0x08004bd1
 8004ab8:	08004b4f 	.word	0x08004b4f
 8004abc:	08004bd1 	.word	0x08004bd1
 8004ac0:	08004bd1 	.word	0x08004bd1
 8004ac4:	08004bd1 	.word	0x08004bd1
 8004ac8:	08004b8f 	.word	0x08004b8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fa84 	bl	8004fe0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0208 	orr.w	r2, r2, #8
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0204 	bic.w	r2, r2, #4
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	619a      	str	r2, [r3, #24]
      break;
 8004b0a:	e064      	b.n	8004bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 faca 	bl	80050ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6999      	ldr	r1, [r3, #24]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	021a      	lsls	r2, r3, #8
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	619a      	str	r2, [r3, #24]
      break;
 8004b4c:	e043      	b.n	8004bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fb13 	bl	8005180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0208 	orr.w	r2, r2, #8
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0204 	bic.w	r2, r2, #4
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	61da      	str	r2, [r3, #28]
      break;
 8004b8c:	e023      	b.n	8004bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fb5d 	bl	8005254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69d9      	ldr	r1, [r3, #28]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	021a      	lsls	r2, r3, #8
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	61da      	str	r2, [r3, #28]
      break;
 8004bce:	e002      	b.n	8004bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e0b4      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x186>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3c:	d03e      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0xd4>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	f200 8087 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	f000 8086 	beq.w	8004d5a <HAL_TIM_ConfigClockSource+0x172>
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d87f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b70      	cmp	r3, #112	; 0x70
 8004c56:	d01a      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xa6>
 8004c58:	2b70      	cmp	r3, #112	; 0x70
 8004c5a:	d87b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b60      	cmp	r3, #96	; 0x60
 8004c5e:	d050      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x11a>
 8004c60:	2b60      	cmp	r3, #96	; 0x60
 8004c62:	d877      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b50      	cmp	r3, #80	; 0x50
 8004c66:	d03c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c68:	2b50      	cmp	r3, #80	; 0x50
 8004c6a:	d873      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d058      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x13a>
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d86f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	d064      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b30      	cmp	r3, #48	; 0x30
 8004c7a:	d86b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d060      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d867      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05c      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d05a      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	e062      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f000 fd49 	bl	8005734 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	609a      	str	r2, [r3, #8]
      break;
 8004cba:	e04f      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6899      	ldr	r1, [r3, #8]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f000 fd32 	bl	8005734 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cde:	609a      	str	r2, [r3, #8]
      break;
 8004ce0:	e03c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 fbf6 	bl	80054e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2150      	movs	r1, #80	; 0x50
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fd00 	bl	8005700 <TIM_ITRx_SetConfig>
      break;
 8004d00:	e02c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 fc50 	bl	80055b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2160      	movs	r1, #96	; 0x60
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fcf0 	bl	8005700 <TIM_ITRx_SetConfig>
      break;
 8004d20:	e01c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 fbd6 	bl	80054e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2140      	movs	r1, #64	; 0x40
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fce0 	bl	8005700 <TIM_ITRx_SetConfig>
      break;
 8004d40:	e00c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f000 fcd7 	bl	8005700 <TIM_ITRx_SetConfig>
      break;
 8004d52:	e003      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e000      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e031      	b.n	8004df2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004d9e:	6839      	ldr	r1, [r7, #0]
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 faa5 	bl	80052f0 <TIM_SlaveTimer_SetConfig>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d009      	beq.n	8004dc0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e018      	b.n	8004df2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dce:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dde:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b0c      	cmp	r3, #12
 8004e0e:	d831      	bhi.n	8004e74 <HAL_TIM_ReadCapturedValue+0x78>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e4d 	.word	0x08004e4d
 8004e1c:	08004e75 	.word	0x08004e75
 8004e20:	08004e75 	.word	0x08004e75
 8004e24:	08004e75 	.word	0x08004e75
 8004e28:	08004e57 	.word	0x08004e57
 8004e2c:	08004e75 	.word	0x08004e75
 8004e30:	08004e75 	.word	0x08004e75
 8004e34:	08004e75 	.word	0x08004e75
 8004e38:	08004e61 	.word	0x08004e61
 8004e3c:	08004e75 	.word	0x08004e75
 8004e40:	08004e75 	.word	0x08004e75
 8004e44:	08004e75 	.word	0x08004e75
 8004e48:	08004e6b 	.word	0x08004e6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e52:	60fb      	str	r3, [r7, #12]

      break;
 8004e54:	e00f      	b.n	8004e76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	60fb      	str	r3, [r7, #12]

      break;
 8004e5e:	e00a      	b.n	8004e76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	60fb      	str	r3, [r7, #12]

      break;
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	60fb      	str	r3, [r7, #12]

      break;
 8004e72:	e000      	b.n	8004e76 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e74:	bf00      	nop
  }

  return tmpreg;
 8004e76:	68fb      	ldr	r3, [r7, #12]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop

08004e84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr

08004e96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	7f1b      	ldrb	r3, [r3, #28]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr
	...

08004ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a33      	ldr	r2, [pc, #204]	; (8004fc4 <TIM_Base_SetConfig+0xe0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00f      	beq.n	8004f1c <TIM_Base_SetConfig+0x38>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f02:	d00b      	beq.n	8004f1c <TIM_Base_SetConfig+0x38>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a30      	ldr	r2, [pc, #192]	; (8004fc8 <TIM_Base_SetConfig+0xe4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0x38>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a2f      	ldr	r2, [pc, #188]	; (8004fcc <TIM_Base_SetConfig+0xe8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0x38>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a2e      	ldr	r2, [pc, #184]	; (8004fd0 <TIM_Base_SetConfig+0xec>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a24      	ldr	r2, [pc, #144]	; (8004fc4 <TIM_Base_SetConfig+0xe0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01b      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3c:	d017      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a21      	ldr	r2, [pc, #132]	; (8004fc8 <TIM_Base_SetConfig+0xe4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d013      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a20      	ldr	r2, [pc, #128]	; (8004fcc <TIM_Base_SetConfig+0xe8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00f      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a1f      	ldr	r2, [pc, #124]	; (8004fd0 <TIM_Base_SetConfig+0xec>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00b      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <TIM_Base_SetConfig+0xf0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d007      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1d      	ldr	r2, [pc, #116]	; (8004fd8 <TIM_Base_SetConfig+0xf4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d003      	beq.n	8004f6e <TIM_Base_SetConfig+0x8a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <TIM_Base_SetConfig+0xf8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d108      	bne.n	8004f80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a07      	ldr	r2, [pc, #28]	; (8004fc4 <TIM_Base_SetConfig+0xe0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d103      	bne.n	8004fb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	615a      	str	r2, [r3, #20]
}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	40010000 	.word	0x40010000
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800
 8004fd0:	40000c00 	.word	0x40000c00
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40014400 	.word	0x40014400
 8004fdc:	40014800 	.word	0x40014800

08004fe0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f023 0201 	bic.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 0302 	bic.w	r3, r3, #2
 8005028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <TIM_OC1_SetConfig+0xc8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d10c      	bne.n	8005056 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f023 0308 	bic.w	r3, r3, #8
 8005042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f023 0304 	bic.w	r3, r3, #4
 8005054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <TIM_OC1_SetConfig+0xc8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d111      	bne.n	8005082 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800506c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000

080050ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f023 0210 	bic.w	r2, r3, #16
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f023 0320 	bic.w	r3, r3, #32
 80050f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1d      	ldr	r2, [pc, #116]	; (800517c <TIM_OC2_SetConfig+0xd0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10d      	bne.n	8005128 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a14      	ldr	r2, [pc, #80]	; (800517c <TIM_OC2_SetConfig+0xd0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d113      	bne.n	8005158 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	40010000 	.word	0x40010000

08005180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1d      	ldr	r2, [pc, #116]	; (8005250 <TIM_OC3_SetConfig+0xd0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10d      	bne.n	80051fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a14      	ldr	r2, [pc, #80]	; (8005250 <TIM_OC3_SetConfig+0xd0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d113      	bne.n	800522a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	621a      	str	r2, [r3, #32]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000

08005254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	031b      	lsls	r3, r3, #12
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a0f      	ldr	r2, [pc, #60]	; (80052ec <TIM_OC4_SetConfig+0x98>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d109      	bne.n	80052c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	019b      	lsls	r3, r3, #6
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	40010000 	.word	0x40010000

080052f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b70      	cmp	r3, #112	; 0x70
 8005338:	d01a      	beq.n	8005370 <TIM_SlaveTimer_SetConfig+0x80>
 800533a:	2b70      	cmp	r3, #112	; 0x70
 800533c:	d860      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x110>
 800533e:	2b60      	cmp	r3, #96	; 0x60
 8005340:	d054      	beq.n	80053ec <TIM_SlaveTimer_SetConfig+0xfc>
 8005342:	2b60      	cmp	r3, #96	; 0x60
 8005344:	d85c      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x110>
 8005346:	2b50      	cmp	r3, #80	; 0x50
 8005348:	d046      	beq.n	80053d8 <TIM_SlaveTimer_SetConfig+0xe8>
 800534a:	2b50      	cmp	r3, #80	; 0x50
 800534c:	d858      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x110>
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d019      	beq.n	8005386 <TIM_SlaveTimer_SetConfig+0x96>
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d854      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x110>
 8005356:	2b30      	cmp	r3, #48	; 0x30
 8005358:	d055      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x116>
 800535a:	2b30      	cmp	r3, #48	; 0x30
 800535c:	d850      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x110>
 800535e:	2b20      	cmp	r3, #32
 8005360:	d051      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x116>
 8005362:	2b20      	cmp	r3, #32
 8005364:	d84c      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x110>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d04d      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x116>
 800536a:	2b10      	cmp	r3, #16
 800536c:	d04b      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x116>
 800536e:	e047      	b.n	8005400 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68d9      	ldr	r1, [r3, #12]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f000 f9d8 	bl	8005734 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005384:	e040      	b.n	8005408 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b05      	cmp	r3, #5
 800538c:	d101      	bne.n	8005392 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e03b      	b.n	800540a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6a1a      	ldr	r2, [r3, #32]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	621a      	str	r2, [r3, #32]
      break;
 80053d6:	e017      	b.n	8005408 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6899      	ldr	r1, [r3, #8]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	461a      	mov	r2, r3
 80053e6:	f000 f87b 	bl	80054e0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80053ea:	e00d      	b.n	8005408 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6899      	ldr	r1, [r3, #8]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	461a      	mov	r2, r3
 80053fa:	f000 f8db 	bl	80055b4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80053fe:	e003      	b.n	8005408 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	75fb      	strb	r3, [r7, #23]
      break;
 8005404:	e000      	b.n	8005408 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005406:	bf00      	nop
  }

  return status;
 8005408:	7dfb      	ldrb	r3, [r7, #23]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4a23      	ldr	r2, [pc, #140]	; (80054cc <TIM_TI1_SetConfig+0xb8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d013      	beq.n	800546a <TIM_TI1_SetConfig+0x56>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005448:	d00f      	beq.n	800546a <TIM_TI1_SetConfig+0x56>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <TIM_TI1_SetConfig+0xbc>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00b      	beq.n	800546a <TIM_TI1_SetConfig+0x56>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <TIM_TI1_SetConfig+0xc0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d007      	beq.n	800546a <TIM_TI1_SetConfig+0x56>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <TIM_TI1_SetConfig+0xc4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <TIM_TI1_SetConfig+0x56>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <TIM_TI1_SetConfig+0xc8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d101      	bne.n	800546e <TIM_TI1_SetConfig+0x5a>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <TIM_TI1_SetConfig+0x5c>
 800546e:	2300      	movs	r3, #0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0303 	bic.w	r3, r3, #3
 800547a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e003      	b.n	800548e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	b2db      	uxtb	r3, r3
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f023 030a 	bic.w	r3, r3, #10
 80054a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f003 030a 	and.w	r3, r3, #10
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	40014000 	.word	0x40014000

080054e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0201 	bic.w	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f023 030a 	bic.w	r3, r3, #10
 800551c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0210 	bic.w	r2, r3, #16
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005568:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800557a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	031b      	lsls	r3, r3, #12
 8005580:	b29b      	uxth	r3, r3
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800558e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f023 0210 	bic.w	r2, r3, #16
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	031b      	lsls	r3, r3, #12
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr

08005612 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005612:	b480      	push	{r7}
 8005614:	b087      	sub	sp, #28
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0303 	bic.w	r3, r3, #3
 800563e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800564e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	b2db      	uxtb	r3, r3
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005662:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	021b      	lsls	r3, r3, #8
 8005668:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	021b      	lsls	r3, r3, #8
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	031b      	lsls	r3, r3, #12
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80056da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	031b      	lsls	r3, r3, #12
 80056e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	f043 0307 	orr.w	r3, r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	609a      	str	r2, [r3, #8]
}
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800574e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	021a      	lsls	r2, r3, #8
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	431a      	orrs	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	609a      	str	r2, [r3, #8]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr

08005772 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005772:	b480      	push	{r7}
 8005774:	b087      	sub	sp, #28
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	2201      	movs	r2, #1
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1a      	ldr	r2, [r3, #32]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	43db      	mvns	r3, r3
 8005794:	401a      	ands	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	fa01 f303 	lsl.w	r3, r1, r3
 80057aa:	431a      	orrs	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	621a      	str	r2, [r3, #32]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e050      	b.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d018      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d013      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a17      	ldr	r2, [pc, #92]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00e      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a15      	ldr	r2, [pc, #84]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d009      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a14      	ldr	r2, [pc, #80]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d004      	beq.n	800584a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a12      	ldr	r2, [pc, #72]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d10c      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	4313      	orrs	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr
 8005880:	40010000 	.word	0x40010000
 8005884:	40000400 	.word	0x40000400
 8005888:	40000800 	.word	0x40000800
 800588c:	40000c00 	.word	0x40000c00
 8005890:	40014000 	.word	0x40014000

08005894 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e03d      	b.n	800592c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr

08005936 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e03f      	b.n	80059ec <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d106      	bne.n	8005986 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7fc fc55 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2224      	movs	r2, #36	; 0x24
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800599c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f928 	bl	8005bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	; 0x28
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	4613      	mov	r3, r2
 8005a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d17c      	bne.n	8005b0e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_UART_Transmit+0x2c>
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e075      	b.n	8005b10 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Transmit+0x3e>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e06e      	b.n	8005b10 <HAL_UART_Transmit+0x11c>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2221      	movs	r2, #33	; 0x21
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a48:	f7fc fd10 	bl	800246c <HAL_GetTick>
 8005a4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	88fa      	ldrh	r2, [r7, #6]
 8005a58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a62:	d108      	bne.n	8005a76 <HAL_UART_Transmit+0x82>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	e003      	b.n	8005a7e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a86:	e02a      	b.n	8005ade <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 f840 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e036      	b.n	8005b10 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10b      	bne.n	8005ac0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ab6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	3302      	adds	r3, #2
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e007      	b.n	8005ad0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	781a      	ldrb	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	3301      	adds	r3, #1
 8005ace:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1cf      	bne.n	8005a88 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2200      	movs	r2, #0
 8005af0:	2140      	movs	r1, #64	; 0x40
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 f810 	bl	8005b18 <UART_WaitOnFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e006      	b.n	8005b10 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b090      	sub	sp, #64	; 0x40
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	e050      	b.n	8005bcc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d04c      	beq.n	8005bcc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b38:	f7fc fc98 	bl	800246c <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d241      	bcs.n	8005bcc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b68:	637a      	str	r2, [r7, #52]	; 0x34
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e5      	bne.n	8005b48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f023 0301 	bic.w	r3, r3, #1
 8005b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3314      	adds	r3, #20
 8005b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b9c:	623a      	str	r2, [r7, #32]
 8005b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	69f9      	ldr	r1, [r7, #28]
 8005ba2:	6a3a      	ldr	r2, [r7, #32]
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e5      	bne.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e00f      	b.n	8005bec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d09f      	beq.n	8005b2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3740      	adds	r7, #64	; 0x40
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf8:	b0c0      	sub	sp, #256	; 0x100
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c10:	68d9      	ldr	r1, [r3, #12]
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	ea40 0301 	orr.w	r3, r0, r1
 8005c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c4c:	f021 010c 	bic.w	r1, r1, #12
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6e:	6999      	ldr	r1, [r3, #24]
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	ea40 0301 	orr.w	r3, r0, r1
 8005c7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b91      	ldr	r3, [pc, #580]	; (8005ec8 <UART_SetConfig+0x2d4>)
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d005      	beq.n	8005c94 <UART_SetConfig+0xa0>
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b8f      	ldr	r3, [pc, #572]	; (8005ecc <UART_SetConfig+0x2d8>)
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d104      	bne.n	8005c9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c94:	f7fd fb5a 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8005c98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c9c:	e003      	b.n	8005ca6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c9e:	f7fd fb41 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8005ca2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb0:	f040 8110 	bne.w	8005ed4 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	462b      	mov	r3, r5
 8005cca:	1891      	adds	r1, r2, r2
 8005ccc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cce:	415b      	adcs	r3, r3
 8005cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4604      	mov	r4, r0
 8005cdc:	eb12 0804 	adds.w	r8, r2, r4
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	eb43 0904 	adc.w	r9, r3, r4
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cfa:	4690      	mov	r8, r2
 8005cfc:	4699      	mov	r9, r3
 8005cfe:	4603      	mov	r3, r0
 8005d00:	eb18 0303 	adds.w	r3, r8, r3
 8005d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	eb49 0303 	adc.w	r3, r9, r3
 8005d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d26:	460b      	mov	r3, r1
 8005d28:	18db      	adds	r3, r3, r3
 8005d2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	eb42 0303 	adc.w	r3, r2, r3
 8005d32:	657b      	str	r3, [r7, #84]	; 0x54
 8005d34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d3c:	f7fa fa4c 	bl	80001d8 <__aeabi_uldivmod>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4b62      	ldr	r3, [pc, #392]	; (8005ed0 <UART_SetConfig+0x2dc>)
 8005d46:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	011c      	lsls	r4, r3, #4
 8005d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d70:	4645      	mov	r5, r8
 8005d72:	eb12 0a05 	adds.w	sl, r2, r5
 8005d76:	4640      	mov	r0, r8
 8005d78:	4649      	mov	r1, r9
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	eb43 0b05 	adc.w	fp, r3, r5
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d94:	4692      	mov	sl, r2
 8005d96:	469b      	mov	fp, r3
 8005d98:	4603      	mov	r3, r0
 8005d9a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005da2:	460b      	mov	r3, r1
 8005da4:	eb4b 0303 	adc.w	r3, fp, r3
 8005da8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005db8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005dbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	18db      	adds	r3, r3, r3
 8005dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	eb42 0303 	adc.w	r3, r2, r3
 8005dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005dd6:	f7fa f9ff 	bl	80001d8 <__aeabi_uldivmod>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	4b3b      	ldr	r3, [pc, #236]	; (8005ed0 <UART_SetConfig+0x2dc>)
 8005de2:	fba3 2301 	umull	r2, r3, r3, r1
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	2264      	movs	r2, #100	; 0x64
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
 8005dee:	1acb      	subs	r3, r1, r3
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005df6:	4b36      	ldr	r3, [pc, #216]	; (8005ed0 <UART_SetConfig+0x2dc>)
 8005df8:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e04:	441c      	add	r4, r3
 8005e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	1891      	adds	r1, r2, r2
 8005e1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e20:	415b      	adcs	r3, r3
 8005e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e28:	4641      	mov	r1, r8
 8005e2a:	1851      	adds	r1, r2, r1
 8005e2c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e2e:	4649      	mov	r1, r9
 8005e30:	414b      	adcs	r3, r1
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e40:	4659      	mov	r1, fp
 8005e42:	00cb      	lsls	r3, r1, #3
 8005e44:	4655      	mov	r5, sl
 8005e46:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005e4a:	4651      	mov	r1, sl
 8005e4c:	00ca      	lsls	r2, r1, #3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	4619      	mov	r1, r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	4642      	mov	r2, r8
 8005e56:	189b      	adds	r3, r3, r2
 8005e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	460a      	mov	r2, r1
 8005e60:	eb42 0303 	adc.w	r3, r2, r3
 8005e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	18db      	adds	r3, r3, r3
 8005e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e82:	4613      	mov	r3, r2
 8005e84:	eb42 0303 	adc.w	r3, r2, r3
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e92:	f7fa f9a1 	bl	80001d8 <__aeabi_uldivmod>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <UART_SetConfig+0x2dc>)
 8005e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	2164      	movs	r1, #100	; 0x64
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	3332      	adds	r3, #50	; 0x32
 8005eae:	4a08      	ldr	r2, [pc, #32]	; (8005ed0 <UART_SetConfig+0x2dc>)
 8005eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	f003 0207 	and.w	r2, r3, #7
 8005eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4422      	add	r2, r4
 8005ec2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ec4:	e109      	b.n	80060da <UART_SetConfig+0x4e6>
 8005ec6:	bf00      	nop
 8005ec8:	40011000 	.word	0x40011000
 8005ecc:	40011400 	.word	0x40011400
 8005ed0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ede:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ee2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ee6:	4642      	mov	r2, r8
 8005ee8:	464b      	mov	r3, r9
 8005eea:	1891      	adds	r1, r2, r2
 8005eec:	6239      	str	r1, [r7, #32]
 8005eee:	415b      	adcs	r3, r3
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	1854      	adds	r4, r2, r1
 8005efa:	46cc      	mov	ip, r9
 8005efc:	eb43 050c 	adc.w	r5, r3, ip
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	00eb      	lsls	r3, r5, #3
 8005f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f0e:	00e2      	lsls	r2, r4, #3
 8005f10:	4614      	mov	r4, r2
 8005f12:	461d      	mov	r5, r3
 8005f14:	4640      	mov	r0, r8
 8005f16:	4649      	mov	r1, r9
 8005f18:	4603      	mov	r3, r0
 8005f1a:	18e3      	adds	r3, r4, r3
 8005f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f20:	460b      	mov	r3, r1
 8005f22:	eb45 0303 	adc.w	r3, r5, r3
 8005f26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f46:	4629      	mov	r1, r5
 8005f48:	008b      	lsls	r3, r1, #2
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4604      	mov	r4, r0
 8005f50:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005f54:	4601      	mov	r1, r0
 8005f56:	008a      	lsls	r2, r1, #2
 8005f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f5c:	f7fa f93c 	bl	80001d8 <__aeabi_uldivmod>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4b60      	ldr	r3, [pc, #384]	; (80060e8 <UART_SetConfig+0x4f4>)
 8005f66:	fba3 2302 	umull	r2, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	011c      	lsls	r4, r3, #4
 8005f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	1891      	adds	r1, r2, r2
 8005f86:	61b9      	str	r1, [r7, #24]
 8005f88:	415b      	adcs	r3, r3
 8005f8a:	61fb      	str	r3, [r7, #28]
 8005f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f90:	4641      	mov	r1, r8
 8005f92:	1851      	adds	r1, r2, r1
 8005f94:	6139      	str	r1, [r7, #16]
 8005f96:	4649      	mov	r1, r9
 8005f98:	414b      	adcs	r3, r1
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fa8:	4659      	mov	r1, fp
 8005faa:	00cb      	lsls	r3, r1, #3
 8005fac:	4655      	mov	r5, sl
 8005fae:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005fb2:	4651      	mov	r1, sl
 8005fb4:	00ca      	lsls	r2, r1, #3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	460a      	mov	r2, r1
 8005fc8:	eb42 0303 	adc.w	r3, r2, r3
 8005fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fe8:	4649      	mov	r1, r9
 8005fea:	008b      	lsls	r3, r1, #2
 8005fec:	4645      	mov	r5, r8
 8005fee:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	008a      	lsls	r2, r1, #2
 8005ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ffa:	f7fa f8ed 	bl	80001d8 <__aeabi_uldivmod>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <UART_SetConfig+0x4f4>)
 8006004:	fba3 1302 	umull	r1, r3, r3, r2
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	2164      	movs	r1, #100	; 0x64
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	3332      	adds	r3, #50	; 0x32
 8006016:	4a34      	ldr	r2, [pc, #208]	; (80060e8 <UART_SetConfig+0x4f4>)
 8006018:	fba2 2303 	umull	r2, r3, r2, r3
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006022:	441c      	add	r4, r3
 8006024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006028:	2200      	movs	r2, #0
 800602a:	673b      	str	r3, [r7, #112]	; 0x70
 800602c:	677a      	str	r2, [r7, #116]	; 0x74
 800602e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006032:	4642      	mov	r2, r8
 8006034:	464b      	mov	r3, r9
 8006036:	1891      	adds	r1, r2, r2
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	415b      	adcs	r3, r3
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006042:	4641      	mov	r1, r8
 8006044:	1851      	adds	r1, r2, r1
 8006046:	6039      	str	r1, [r7, #0]
 8006048:	4649      	mov	r1, r9
 800604a:	414b      	adcs	r3, r1
 800604c:	607b      	str	r3, [r7, #4]
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800605a:	4659      	mov	r1, fp
 800605c:	00cb      	lsls	r3, r1, #3
 800605e:	4655      	mov	r5, sl
 8006060:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006064:	4651      	mov	r1, sl
 8006066:	00ca      	lsls	r2, r1, #3
 8006068:	4610      	mov	r0, r2
 800606a:	4619      	mov	r1, r3
 800606c:	4603      	mov	r3, r0
 800606e:	4642      	mov	r2, r8
 8006070:	189b      	adds	r3, r3, r2
 8006072:	66bb      	str	r3, [r7, #104]	; 0x68
 8006074:	464b      	mov	r3, r9
 8006076:	460a      	mov	r2, r1
 8006078:	eb42 0303 	adc.w	r3, r2, r3
 800607c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	663b      	str	r3, [r7, #96]	; 0x60
 8006088:	667a      	str	r2, [r7, #100]	; 0x64
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006096:	4649      	mov	r1, r9
 8006098:	008b      	lsls	r3, r1, #2
 800609a:	4645      	mov	r5, r8
 800609c:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80060a0:	4641      	mov	r1, r8
 80060a2:	008a      	lsls	r2, r1, #2
 80060a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060a8:	f7fa f896 	bl	80001d8 <__aeabi_uldivmod>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4b0d      	ldr	r3, [pc, #52]	; (80060e8 <UART_SetConfig+0x4f4>)
 80060b2:	fba3 1302 	umull	r1, r3, r3, r2
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	2164      	movs	r1, #100	; 0x64
 80060ba:	fb01 f303 	mul.w	r3, r1, r3
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	3332      	adds	r3, #50	; 0x32
 80060c4:	4a08      	ldr	r2, [pc, #32]	; (80060e8 <UART_SetConfig+0x4f4>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f003 020f 	and.w	r2, r3, #15
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4422      	add	r2, r4
 80060d8:	609a      	str	r2, [r3, #8]
}
 80060da:	bf00      	nop
 80060dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060e0:	46bd      	mov	sp, r7
 80060e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060e6:	bf00      	nop
 80060e8:	51eb851f 	.word	0x51eb851f

080060ec <AES_keyschedule_enc_LL>:
 80060ec:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060f0:	1092      	asrs	r2, r2, #2
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	b084      	sub	sp, #16
 80060f6:	dd06      	ble.n	8006106 <AES_keyschedule_enc_LL+0x1a>
 80060f8:	0095      	lsls	r5, r2, #2
 80060fa:	2300      	movs	r3, #0
 80060fc:	58c4      	ldr	r4, [r0, r3]
 80060fe:	50cc      	str	r4, [r1, r3]
 8006100:	3304      	adds	r3, #4
 8006102:	42ab      	cmp	r3, r5
 8006104:	d1fa      	bne.n	80060fc <AES_keyschedule_enc_LL+0x10>
 8006106:	2a06      	cmp	r2, #6
 8006108:	d007      	beq.n	800611a <AES_keyschedule_enc_LL+0x2e>
 800610a:	2a08      	cmp	r2, #8
 800610c:	d06c      	beq.n	80061e8 <AES_keyschedule_enc_LL+0xfc>
 800610e:	2a04      	cmp	r2, #4
 8006110:	d03a      	beq.n	8006188 <AES_keyschedule_enc_LL+0x9c>
 8006112:	b004      	add	sp, #16
 8006114:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006118:	4770      	bx	lr
 800611a:	f8df c190 	ldr.w	ip, [pc, #400]	; 80062ac <AES_keyschedule_enc_LL+0x1c0>
 800611e:	684c      	ldr	r4, [r1, #4]
 8006120:	688d      	ldr	r5, [r1, #8]
 8006122:	68c8      	ldr	r0, [r1, #12]
 8006124:	680e      	ldr	r6, [r1, #0]
 8006126:	4b60      	ldr	r3, [pc, #384]	; (80062a8 <AES_keyschedule_enc_LL+0x1bc>)
 8006128:	f101 08a8 	add.w	r8, r1, #168	; 0xa8
 800612c:	e005      	b.n	800613a <AES_keyschedule_enc_LL+0x4e>
 800612e:	690f      	ldr	r7, [r1, #16]
 8006130:	4047      	eors	r7, r0
 8006132:	407a      	eors	r2, r7
 8006134:	62ca      	str	r2, [r1, #44]	; 0x2c
 8006136:	628f      	str	r7, [r1, #40]	; 0x28
 8006138:	3118      	adds	r1, #24
 800613a:	694a      	ldr	r2, [r1, #20]
 800613c:	f85c af04 	ldr.w	sl, [ip, #4]!
 8006140:	fa5f f982 	uxtb.w	r9, r2
 8006144:	0e17      	lsrs	r7, r2, #24
 8006146:	f813 9009 	ldrb.w	r9, [r3, r9]
 800614a:	5ddf      	ldrb	r7, [r3, r7]
 800614c:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 8006150:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8006154:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8006158:	f813 b00b 	ldrb.w	fp, [r3, fp]
 800615c:	f813 9009 	ldrb.w	r9, [r3, r9]
 8006160:	ea47 670b 	orr.w	r7, r7, fp, lsl #24
 8006164:	ea86 060a 	eor.w	r6, r6, sl
 8006168:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 800616c:	407e      	eors	r6, r7
 800616e:	4074      	eors	r4, r6
 8006170:	4065      	eors	r5, r4
 8006172:	4068      	eors	r0, r5
 8006174:	4541      	cmp	r1, r8
 8006176:	6248      	str	r0, [r1, #36]	; 0x24
 8006178:	620d      	str	r5, [r1, #32]
 800617a:	61cc      	str	r4, [r1, #28]
 800617c:	618e      	str	r6, [r1, #24]
 800617e:	d1d6      	bne.n	800612e <AES_keyschedule_enc_LL+0x42>
 8006180:	b004      	add	sp, #16
 8006182:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006186:	4770      	bx	lr
 8006188:	4608      	mov	r0, r1
 800618a:	4f48      	ldr	r7, [pc, #288]	; (80062ac <AES_keyschedule_enc_LL+0x1c0>)
 800618c:	f850 4b90 	ldr.w	r4, [r0], #144
 8006190:	68ca      	ldr	r2, [r1, #12]
 8006192:	684d      	ldr	r5, [r1, #4]
 8006194:	688e      	ldr	r6, [r1, #8]
 8006196:	4b44      	ldr	r3, [pc, #272]	; (80062a8 <AES_keyschedule_enc_LL+0x1bc>)
 8006198:	e000      	b.n	800619c <AES_keyschedule_enc_LL+0xb0>
 800619a:	3110      	adds	r1, #16
 800619c:	fa5f f982 	uxtb.w	r9, r2
 80061a0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80061a4:	f3c2 4807 	ubfx	r8, r2, #16, #8
 80061a8:	f813 b009 	ldrb.w	fp, [r3, r9]
 80061ac:	f813 c00c 	ldrb.w	ip, [r3, ip]
 80061b0:	f813 a008 	ldrb.w	sl, [r3, r8]
 80061b4:	f857 8f04 	ldr.w	r8, [r7, #4]!
 80061b8:	f3c2 2907 	ubfx	r9, r2, #8, #8
 80061bc:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
 80061c0:	f813 9009 	ldrb.w	r9, [r3, r9]
 80061c4:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 80061c8:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 80061cc:	ea84 0408 	eor.w	r4, r4, r8
 80061d0:	ea84 040c 	eor.w	r4, r4, ip
 80061d4:	4065      	eors	r5, r4
 80061d6:	406e      	eors	r6, r5
 80061d8:	4072      	eors	r2, r6
 80061da:	4281      	cmp	r1, r0
 80061dc:	61ca      	str	r2, [r1, #28]
 80061de:	618e      	str	r6, [r1, #24]
 80061e0:	614d      	str	r5, [r1, #20]
 80061e2:	610c      	str	r4, [r1, #16]
 80061e4:	d1d9      	bne.n	800619a <AES_keyschedule_enc_LL+0xae>
 80061e6:	e794      	b.n	8006112 <AES_keyschedule_enc_LL+0x26>
 80061e8:	4b2f      	ldr	r3, [pc, #188]	; (80062a8 <AES_keyschedule_enc_LL+0x1bc>)
 80061ea:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80062ac <AES_keyschedule_enc_LL+0x1c0>
 80061ee:	68ca      	ldr	r2, [r1, #12]
 80061f0:	688c      	ldr	r4, [r1, #8]
 80061f2:	684d      	ldr	r5, [r1, #4]
 80061f4:	f8d1 c000 	ldr.w	ip, [r1]
 80061f8:	f101 00c0 	add.w	r0, r1, #192	; 0xc0
 80061fc:	4699      	mov	r9, r3
 80061fe:	9003      	str	r0, [sp, #12]
 8006200:	e023      	b.n	800624a <AES_keyschedule_enc_LL+0x15e>
 8006202:	f819 b00b 	ldrb.w	fp, [r9, fp]
 8006206:	f819 7007 	ldrb.w	r7, [r9, r7]
 800620a:	f819 8008 	ldrb.w	r8, [r9, r8]
 800620e:	9702      	str	r7, [sp, #8]
 8006210:	9f01      	ldr	r7, [sp, #4]
 8006212:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 8006216:	f8dd b008 	ldr.w	fp, [sp, #8]
 800621a:	f819 6007 	ldrb.w	r6, [r9, r7]
 800621e:	ea48 470b 	orr.w	r7, r8, fp, lsl #16
 8006222:	ea47 2806 	orr.w	r8, r7, r6, lsl #8
 8006226:	690e      	ldr	r6, [r1, #16]
 8006228:	694f      	ldr	r7, [r1, #20]
 800622a:	ea88 0806 	eor.w	r8, r8, r6
 800622e:	698e      	ldr	r6, [r1, #24]
 8006230:	f8c1 8030 	str.w	r8, [r1, #48]	; 0x30
 8006234:	ea88 0707 	eor.w	r7, r8, r7
 8006238:	ea87 0b06 	eor.w	fp, r7, r6
 800623c:	ea8b 0000 	eor.w	r0, fp, r0
 8006240:	634f      	str	r7, [r1, #52]	; 0x34
 8006242:	63c8      	str	r0, [r1, #60]	; 0x3c
 8006244:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
 8006248:	3120      	adds	r1, #32
 800624a:	69c8      	ldr	r0, [r1, #28]
 800624c:	f85a 8f04 	ldr.w	r8, [sl, #4]!
 8006250:	b2c7      	uxtb	r7, r0
 8006252:	0e06      	lsrs	r6, r0, #24
 8006254:	f813 b007 	ldrb.w	fp, [r3, r7]
 8006258:	5d9e      	ldrb	r6, [r3, r6]
 800625a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800625e:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 8006262:	f813 b007 	ldrb.w	fp, [r3, r7]
 8006266:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800626a:	ea46 660b 	orr.w	r6, r6, fp, lsl #24
 800626e:	5ddf      	ldrb	r7, [r3, r7]
 8006270:	ea8c 0c08 	eor.w	ip, ip, r8
 8006274:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8006278:	ea8c 0c06 	eor.w	ip, ip, r6
 800627c:	ea8c 0505 	eor.w	r5, ip, r5
 8006280:	406c      	eors	r4, r5
 8006282:	4062      	eors	r2, r4
 8006284:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8006288:	9601      	str	r6, [sp, #4]
 800628a:	9e03      	ldr	r6, [sp, #12]
 800628c:	62ca      	str	r2, [r1, #44]	; 0x2c
 800628e:	42b1      	cmp	r1, r6
 8006290:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8006294:	fa5f f882 	uxtb.w	r8, r2
 8006298:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800629c:	628c      	str	r4, [r1, #40]	; 0x28
 800629e:	624d      	str	r5, [r1, #36]	; 0x24
 80062a0:	f8c1 c020 	str.w	ip, [r1, #32]
 80062a4:	d1ad      	bne.n	8006202 <AES_keyschedule_enc_LL+0x116>
 80062a6:	e734      	b.n	8006112 <AES_keyschedule_enc_LL+0x26>
 80062a8:	080093cc 	.word	0x080093cc
 80062ac:	08008fa0 	.word	0x08008fa0

080062b0 <AES_general_SW_enc>:
 80062b0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062b4:	4cbe      	ldr	r4, [pc, #760]	; (80065b0 <AES_general_SW_enc+0x300>)
 80062b6:	4dbf      	ldr	r5, [pc, #764]	; (80065b4 <AES_general_SW_enc+0x304>)
 80062b8:	b08a      	sub	sp, #40	; 0x28
 80062ba:	2700      	movs	r7, #0
 80062bc:	2601      	movs	r6, #1
 80062be:	9709      	str	r7, [sp, #36]	; 0x24
 80062c0:	6026      	str	r6, [r4, #0]
 80062c2:	6824      	ldr	r4, [r4, #0]
 80062c4:	9409      	str	r4, [sp, #36]	; 0x24
 80062c6:	682c      	ldr	r4, [r5, #0]
 80062c8:	9409      	str	r4, [sp, #36]	; 0x24
 80062ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80062cc:	9107      	str	r1, [sp, #28]
 80062ce:	10db      	asrs	r3, r3, #3
 80062d0:	3303      	adds	r3, #3
 80062d2:	3401      	adds	r4, #1
 80062d4:	9306      	str	r3, [sp, #24]
 80062d6:	f000 8151 	beq.w	800657c <AES_general_SW_enc+0x2cc>
 80062da:	6804      	ldr	r4, [r0, #0]
 80062dc:	6811      	ldr	r1, [r2, #0]
 80062de:	6840      	ldr	r0, [r0, #4]
 80062e0:	6853      	ldr	r3, [r2, #4]
 80062e2:	ea81 0b04 	eor.w	fp, r1, r4
 80062e6:	4058      	eors	r0, r3
 80062e8:	9003      	str	r0, [sp, #12]
 80062ea:	46d9      	mov	r9, fp
 80062ec:	46dc      	mov	ip, fp
 80062ee:	4bb2      	ldr	r3, [pc, #712]	; (80065b8 <AES_general_SW_enc+0x308>)
 80062f0:	9c03      	ldr	r4, [sp, #12]
 80062f2:	4698      	mov	r8, r3
 80062f4:	e067      	b.n	80063c6 <AES_general_SW_enc+0x116>
 80062f6:	ea4f 611b 	mov.w	r1, fp, lsr #24
 80062fa:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 80062fe:	0e07      	lsrs	r7, r0, #24
 8006300:	ea4f 651a 	mov.w	r5, sl, lsr #24
 8006304:	f858 902c 	ldr.w	r9, [r8, ip, lsl #2]
 8006308:	f858 6021 	ldr.w	r6, [r8, r1, lsl #2]
 800630c:	f858 c027 	ldr.w	ip, [r8, r7, lsl #2]
 8006310:	f858 7025 	ldr.w	r7, [r8, r5, lsl #2]
 8006314:	e892 0022 	ldmia.w	r2, {r1, r5}
 8006318:	404e      	eors	r6, r1
 800631a:	fa5f f18a 	uxtb.w	r1, sl
 800631e:	ea89 0505 	eor.w	r5, r9, r5
 8006322:	f858 9021 	ldr.w	r9, [r8, r1, lsl #2]
 8006326:	6891      	ldr	r1, [r2, #8]
 8006328:	ea8c 0c01 	eor.w	ip, ip, r1
 800632c:	68d1      	ldr	r1, [r2, #12]
 800632e:	404f      	eors	r7, r1
 8006330:	9704      	str	r7, [sp, #16]
 8006332:	fa5f f78b 	uxtb.w	r7, fp
 8006336:	ea86 6939 	eor.w	r9, r6, r9, ror #24
 800633a:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 800633e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8006342:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 8006346:	b2e5      	uxtb	r5, r4
 8006348:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800634c:	b2c1      	uxtb	r1, r0
 800634e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8006352:	9405      	str	r4, [sp, #20]
 8006354:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8006358:	9c04      	ldr	r4, [sp, #16]
 800635a:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800635e:	9703      	str	r7, [sp, #12]
 8006360:	ea84 6131 	eor.w	r1, r4, r1, ror #24
 8006364:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8006368:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800636c:	ea8c 6535 	eor.w	r5, ip, r5, ror #24
 8006370:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8006374:	f858 c024 	ldr.w	ip, [r8, r4, lsl #2]
 8006378:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 800637c:	f3ca 2007 	ubfx	r0, sl, #8, #8
 8006380:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8006384:	ea89 2636 	eor.w	r6, r9, r6, ror #8
 8006388:	f858 a024 	ldr.w	sl, [r8, r4, lsl #2]
 800638c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8006390:	f3cb 4007 	ubfx	r0, fp, #16, #8
 8006394:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8006398:	f858 9020 	ldr.w	r9, [r8, r0, lsl #2]
 800639c:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 80063a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80063a4:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 80063a8:	ea8b 2c3c 	eor.w	ip, fp, ip, ror #8
 80063ac:	ea85 4b30 	eor.w	fp, r5, r0, ror #16
 80063b0:	9805      	ldr	r0, [sp, #20]
 80063b2:	ea86 4737 	eor.w	r7, r6, r7, ror #16
 80063b6:	ea81 2939 	eor.w	r9, r1, r9, ror #8
 80063ba:	ea8c 4c34 	eor.w	ip, ip, r4, ror #16
 80063be:	9703      	str	r7, [sp, #12]
 80063c0:	ea89 4930 	eor.w	r9, r9, r0, ror #16
 80063c4:	463c      	mov	r4, r7
 80063c6:	0e21      	lsrs	r1, r4, #24
 80063c8:	ea4f 661c 	mov.w	r6, ip, lsr #24
 80063cc:	ea4f 6419 	mov.w	r4, r9, lsr #24
 80063d0:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80063d4:	6911      	ldr	r1, [r2, #16]
 80063d6:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80063da:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 80063de:	6954      	ldr	r4, [r2, #20]
 80063e0:	404d      	eors	r5, r1
 80063e2:	ea4f 601b 	mov.w	r0, fp, lsr #24
 80063e6:	fa5f f189 	uxtb.w	r1, r9
 80063ea:	407c      	eors	r4, r7
 80063ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80063f0:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 80063f4:	6991      	ldr	r1, [r2, #24]
 80063f6:	4048      	eors	r0, r1
 80063f8:	69d1      	ldr	r1, [r2, #28]
 80063fa:	404e      	eors	r6, r1
 80063fc:	9604      	str	r6, [sp, #16]
 80063fe:	9e03      	ldr	r6, [sp, #12]
 8006400:	9904      	ldr	r1, [sp, #16]
 8006402:	fa5f fa86 	uxtb.w	sl, r6
 8006406:	fa5f f68b 	uxtb.w	r6, fp
 800640a:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 800640e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8006412:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 8006416:	ea84 6a3a 	eor.w	sl, r4, sl, ror #24
 800641a:	f3cc 4507 	ubfx	r5, ip, #16, #8
 800641e:	fa5f f48c 	uxtb.w	r4, ip
 8006422:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8006426:	9702      	str	r7, [sp, #8]
 8006428:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800642c:	9705      	str	r7, [sp, #20]
 800642e:	ea81 6c36 	eor.w	ip, r1, r6, ror #24
 8006432:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8006436:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800643a:	9f06      	ldr	r7, [sp, #24]
 800643c:	f853 602b 	ldr.w	r6, [r3, fp, lsl #2]
 8006440:	9601      	str	r6, [sp, #4]
 8006442:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8006446:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800644a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800644e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006452:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8006456:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800645a:	9604      	str	r6, [sp, #16]
 800645c:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 8006460:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006464:	3f01      	subs	r7, #1
 8006466:	ea80 6034 	eor.w	r0, r0, r4, ror #24
 800646a:	9706      	str	r7, [sp, #24]
 800646c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8006470:	9904      	ldr	r1, [sp, #16]
 8006472:	ea89 2735 	eor.w	r7, r9, r5, ror #8
 8006476:	f3cb 4507 	ubfx	r5, fp, #16, #8
 800647a:	f3cb 2907 	ubfx	r9, fp, #8, #8
 800647e:	ea80 2031 	eor.w	r0, r0, r1, ror #8
 8006482:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
 8006486:	9901      	ldr	r1, [sp, #4]
 8006488:	f853 5029 	ldr.w	r5, [r3, r9, lsl #2]
 800648c:	ea8a 2434 	eor.w	r4, sl, r4, ror #8
 8006490:	ea8c 2a3b 	eor.w	sl, ip, fp, ror #8
 8006494:	ea87 4b31 	eor.w	fp, r7, r1, ror #16
 8006498:	9f06      	ldr	r7, [sp, #24]
 800649a:	ea84 4436 	eor.w	r4, r4, r6, ror #16
 800649e:	9e05      	ldr	r6, [sp, #20]
 80064a0:	2f00      	cmp	r7, #0
 80064a2:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 80064a6:	ea8a 4a36 	eor.w	sl, sl, r6, ror #16
 80064aa:	f102 0220 	add.w	r2, r2, #32
 80064ae:	f73f af22 	bgt.w	80062f6 <AES_general_SW_enc+0x46>
 80064b2:	4b42      	ldr	r3, [pc, #264]	; (80065bc <AES_general_SW_enc+0x30c>)
 80064b4:	6811      	ldr	r1, [r2, #0]
 80064b6:	ea4f 671b 	mov.w	r7, fp, lsr #24
 80064ba:	fa5f f68a 	uxtb.w	r6, sl
 80064be:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80064c2:	f813 8007 	ldrb.w	r8, [r3, r7]
 80064c6:	5d9f      	ldrb	r7, [r3, r6]
 80064c8:	5d5d      	ldrb	r5, [r3, r5]
 80064ca:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80064ce:	ea47 6808 	orr.w	r8, r7, r8, lsl #24
 80064d2:	f813 c006 	ldrb.w	ip, [r3, r6]
 80064d6:	0e27      	lsrs	r7, r4, #24
 80064d8:	fa5f f68b 	uxtb.w	r6, fp
 80064dc:	ea48 4805 	orr.w	r8, r8, r5, lsl #16
 80064e0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80064e4:	ea48 280c 	orr.w	r8, r8, ip, lsl #8
 80064e8:	ea88 0101 	eor.w	r1, r8, r1
 80064ec:	f813 c007 	ldrb.w	ip, [r3, r7]
 80064f0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80064f4:	5d9f      	ldrb	r7, [r3, r6]
 80064f6:	5d5e      	ldrb	r6, [r3, r5]
 80064f8:	f8c8 1000 	str.w	r1, [r8]
 80064fc:	f3ca 2507 	ubfx	r5, sl, #8, #8
 8006500:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 8006504:	f813 8005 	ldrb.w	r8, [r3, r5]
 8006508:	6851      	ldr	r1, [r2, #4]
 800650a:	0e07      	lsrs	r7, r0, #24
 800650c:	b2e5      	uxtb	r5, r4
 800650e:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 8006512:	f3ca 4607 	ubfx	r6, sl, #16, #8
 8006516:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 800651a:	5ddf      	ldrb	r7, [r3, r7]
 800651c:	f813 9006 	ldrb.w	r9, [r3, r6]
 8006520:	5d5d      	ldrb	r5, [r3, r5]
 8006522:	ea8c 0101 	eor.w	r1, ip, r1
 8006526:	f3cb 2607 	ubfx	r6, fp, #8, #8
 800652a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800652e:	5d9e      	ldrb	r6, [r3, r6]
 8006530:	f8cc 1004 	str.w	r1, [ip, #4]
 8006534:	b2c0      	uxtb	r0, r0
 8006536:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 800653a:	ea4f 671a 	mov.w	r7, sl, lsr #24
 800653e:	f813 8000 	ldrb.w	r8, [r3, r0]
 8006542:	6890      	ldr	r0, [r2, #8]
 8006544:	5ddf      	ldrb	r7, [r3, r7]
 8006546:	f3cb 4107 	ubfx	r1, fp, #16, #8
 800654a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 800654e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006552:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8006556:	4045      	eors	r5, r0
 8006558:	5c58      	ldrb	r0, [r3, r1]
 800655a:	f8cc 5008 	str.w	r5, [ip, #8]
 800655e:	5d19      	ldrb	r1, [r3, r4]
 8006560:	68d2      	ldr	r2, [r2, #12]
 8006562:	ea48 6307 	orr.w	r3, r8, r7, lsl #24
 8006566:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800656a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800656e:	4053      	eors	r3, r2
 8006570:	f8cc 300c 	str.w	r3, [ip, #12]
 8006574:	b00a      	add	sp, #40	; 0x28
 8006576:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800657a:	4770      	bx	lr
 800657c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800657e:	602b      	str	r3, [r5, #0]
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	9309      	str	r3, [sp, #36]	; 0x24
 8006584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006586:	2b00      	cmp	r3, #0
 8006588:	f47f aea7 	bne.w	80062da <AES_general_SW_enc+0x2a>
 800658c:	6803      	ldr	r3, [r0, #0]
 800658e:	6815      	ldr	r5, [r2, #0]
 8006590:	6847      	ldr	r7, [r0, #4]
 8006592:	6886      	ldr	r6, [r0, #8]
 8006594:	6854      	ldr	r4, [r2, #4]
 8006596:	68c0      	ldr	r0, [r0, #12]
 8006598:	6891      	ldr	r1, [r2, #8]
 800659a:	406b      	eors	r3, r5
 800659c:	9303      	str	r3, [sp, #12]
 800659e:	68d3      	ldr	r3, [r2, #12]
 80065a0:	ea84 0c07 	eor.w	ip, r4, r7
 80065a4:	ea81 0b06 	eor.w	fp, r1, r6
 80065a8:	ea83 0900 	eor.w	r9, r3, r0
 80065ac:	e69f      	b.n	80062ee <AES_general_SW_enc+0x3e>
 80065ae:	bf00      	nop
 80065b0:	40023008 	.word	0x40023008
 80065b4:	40023000 	.word	0x40023000
 80065b8:	08008fcc 	.word	0x08008fcc
 80065bc:	080093cc 	.word	0x080093cc

080065c0 <DRBG_AES128_Block_cipher_df.constprop.37>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	b0ff      	sub	sp, #508	; 0x1fc
 80065c6:	460c      	mov	r4, r1
 80065c8:	f101 0519 	add.w	r5, r1, #25
 80065cc:	4606      	mov	r6, r0
 80065ce:	9201      	str	r2, [sp, #4]
 80065d0:	499c      	ldr	r1, [pc, #624]	; (8006844 <DRBG_AES128_Block_cipher_df.constprop.37+0x284>)
 80065d2:	22b0      	movs	r2, #176	; 0xb0
 80065d4:	a852      	add	r0, sp, #328	; 0x148
 80065d6:	f002 f88d 	bl	80086f4 <memcpy>
 80065da:	f015 080f 	ands.w	r8, r5, #15
 80065de:	ea4f 2214 	mov.w	r2, r4, lsr #8
 80065e2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80065e6:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80065ea:	f04f 0320 	mov.w	r3, #32
 80065ee:	bf18      	it	ne
 80065f0:	f1c8 0810 	rsbne	r8, r8, #16
 80065f4:	4631      	mov	r1, r6
 80065f6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80065fa:	f04f 0600 	mov.w	r6, #0
 80065fe:	4622      	mov	r2, r4
 8006600:	a810      	add	r0, sp, #64	; 0x40
 8006602:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
 8006606:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800660a:	462f      	mov	r7, r5
 800660c:	f88d c039 	strb.w	ip, [sp, #57]	; 0x39
 8006610:	bf18      	it	ne
 8006612:	eb05 0708 	addne.w	r7, r5, r8
 8006616:	f88d e038 	strb.w	lr, [sp, #56]	; 0x38
 800661a:	f88d 603e 	strb.w	r6, [sp, #62]	; 0x3e
 800661e:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
 8006622:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8006626:	f002 f865 	bl	80086f4 <memcpy>
 800662a:	ab0a      	add	r3, sp, #40	; 0x28
 800662c:	441c      	add	r4, r3
 800662e:	2380      	movs	r3, #128	; 0x80
 8006630:	7623      	strb	r3, [r4, #24]
 8006632:	f1b8 0f00 	cmp.w	r8, #0
 8006636:	d005      	beq.n	8006644 <DRBG_AES128_Block_cipher_df.constprop.37+0x84>
 8006638:	a80a      	add	r0, sp, #40	; 0x28
 800663a:	4428      	add	r0, r5
 800663c:	4631      	mov	r1, r6
 800663e:	4642      	mov	r2, r8
 8006640:	f002 f866 	bl	8008710 <memset>
 8006644:	2300      	movs	r3, #0
 8006646:	093f      	lsrs	r7, r7, #4
 8006648:	930a      	str	r3, [sp, #40]	; 0x28
 800664a:	930b      	str	r3, [sp, #44]	; 0x2c
 800664c:	930c      	str	r3, [sp, #48]	; 0x30
 800664e:	9302      	str	r3, [sp, #8]
 8006650:	930d      	str	r3, [sp, #52]	; 0x34
 8006652:	9303      	str	r3, [sp, #12]
 8006654:	9304      	str	r3, [sp, #16]
 8006656:	9305      	str	r3, [sp, #20]
 8006658:	f000 80ec 	beq.w	8006834 <DRBG_AES128_Block_cipher_df.constprop.37+0x274>
 800665c:	46b8      	mov	r8, r7
 800665e:	4618      	mov	r0, r3
 8006660:	4619      	mov	r1, r3
 8006662:	461a      	mov	r2, r3
 8006664:	461e      	mov	r6, r3
 8006666:	ac0a      	add	r4, sp, #40	; 0x28
 8006668:	ad26      	add	r5, sp, #152	; 0x98
 800666a:	461f      	mov	r7, r3
 800666c:	e003      	b.n	8006676 <DRBG_AES128_Block_cipher_df.constprop.37+0xb6>
 800666e:	9a02      	ldr	r2, [sp, #8]
 8006670:	9903      	ldr	r1, [sp, #12]
 8006672:	9804      	ldr	r0, [sp, #16]
 8006674:	9f05      	ldr	r7, [sp, #20]
 8006676:	7863      	ldrb	r3, [r4, #1]
 8006678:	f894 e000 	ldrb.w	lr, [r4]
 800667c:	f894 a009 	ldrb.w	sl, [r4, #9]
 8006680:	f894 900d 	ldrb.w	r9, [r4, #13]
 8006684:	f894 c005 	ldrb.w	ip, [r4, #5]
 8006688:	f894 b004 	ldrb.w	fp, [r4, #4]
 800668c:	041b      	lsls	r3, r3, #16
 800668e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8006692:	f894 e003 	ldrb.w	lr, [r4, #3]
 8006696:	ea43 030e 	orr.w	r3, r3, lr
 800669a:	f894 e008 	ldrb.w	lr, [r4, #8]
 800669e:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 80066a2:	ea4a 6a0e 	orr.w	sl, sl, lr, lsl #24
 80066a6:	f894 e00c 	ldrb.w	lr, [r4, #12]
 80066aa:	ea4f 4909 	mov.w	r9, r9, lsl #16
 80066ae:	ea49 690e 	orr.w	r9, r9, lr, lsl #24
 80066b2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80066b6:	f894 e007 	ldrb.w	lr, [r4, #7]
 80066ba:	ea4c 6c0b 	orr.w	ip, ip, fp, lsl #24
 80066be:	ea4c 0c0e 	orr.w	ip, ip, lr
 80066c2:	f894 b002 	ldrb.w	fp, [r4, #2]
 80066c6:	f894 e00b 	ldrb.w	lr, [r4, #11]
 80066ca:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
 80066ce:	ea4a 0a0e 	orr.w	sl, sl, lr
 80066d2:	f894 e00f 	ldrb.w	lr, [r4, #15]
 80066d6:	405a      	eors	r2, r3
 80066d8:	ea49 090e 	orr.w	r9, r9, lr
 80066dc:	79a3      	ldrb	r3, [r4, #6]
 80066de:	f894 e00a 	ldrb.w	lr, [r4, #10]
 80066e2:	602a      	str	r2, [r5, #0]
 80066e4:	7ba2      	ldrb	r2, [r4, #14]
 80066e6:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
 80066ea:	ea49 2202 	orr.w	r2, r9, r2, lsl #8
 80066ee:	ea4a 2e0e 	orr.w	lr, sl, lr, lsl #8
 80066f2:	ea81 0c0c 	eor.w	ip, r1, ip
 80066f6:	ea80 0e0e 	eor.w	lr, r0, lr
 80066fa:	4057      	eors	r7, r2
 80066fc:	2310      	movs	r3, #16
 80066fe:	3601      	adds	r6, #1
 8006700:	4628      	mov	r0, r5
 8006702:	a902      	add	r1, sp, #8
 8006704:	aa52      	add	r2, sp, #328	; 0x148
 8006706:	f8c5 c004 	str.w	ip, [r5, #4]
 800670a:	f8c5 e008 	str.w	lr, [r5, #8]
 800670e:	60ef      	str	r7, [r5, #12]
 8006710:	441c      	add	r4, r3
 8006712:	f7ff fdcd 	bl	80062b0 <AES_general_SW_enc>
 8006716:	4546      	cmp	r6, r8
 8006718:	d1a9      	bne.n	800666e <DRBG_AES128_Block_cipher_df.constprop.37+0xae>
 800671a:	2200      	movs	r2, #0
 800671c:	2401      	movs	r4, #1
 800671e:	f10d 0e18 	add.w	lr, sp, #24
 8006722:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
 8006726:	4647      	mov	r7, r8
 8006728:	4613      	mov	r3, r2
 800672a:	9206      	str	r2, [sp, #24]
 800672c:	9207      	str	r2, [sp, #28]
 800672e:	9208      	str	r2, [sp, #32]
 8006730:	9209      	str	r2, [sp, #36]	; 0x24
 8006732:	4610      	mov	r0, r2
 8006734:	4611      	mov	r1, r2
 8006736:	4616      	mov	r6, r2
 8006738:	ac0a      	add	r4, sp, #40	; 0x28
 800673a:	f8cd e000 	str.w	lr, [sp]
 800673e:	e003      	b.n	8006748 <DRBG_AES128_Block_cipher_df.constprop.37+0x188>
 8006740:	9a06      	ldr	r2, [sp, #24]
 8006742:	9907      	ldr	r1, [sp, #28]
 8006744:	9808      	ldr	r0, [sp, #32]
 8006746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006748:	f894 8001 	ldrb.w	r8, [r4, #1]
 800674c:	f894 9000 	ldrb.w	r9, [r4]
 8006750:	f894 c00d 	ldrb.w	ip, [r4, #13]
 8006754:	f894 e005 	ldrb.w	lr, [r4, #5]
 8006758:	f894 b004 	ldrb.w	fp, [r4, #4]
 800675c:	f894 a009 	ldrb.w	sl, [r4, #9]
 8006760:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8006764:	ea48 6809 	orr.w	r8, r8, r9, lsl #24
 8006768:	f894 9003 	ldrb.w	r9, [r4, #3]
 800676c:	ea48 0809 	orr.w	r8, r8, r9
 8006770:	f894 9002 	ldrb.w	r9, [r4, #2]
 8006774:	ea48 2909 	orr.w	r9, r8, r9, lsl #8
 8006778:	f894 800c 	ldrb.w	r8, [r4, #12]
 800677c:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8006780:	ea4c 6c08 	orr.w	ip, ip, r8, lsl #24
 8006784:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8006788:	f894 8007 	ldrb.w	r8, [r4, #7]
 800678c:	ea4e 6e0b 	orr.w	lr, lr, fp, lsl #24
 8006790:	f894 b008 	ldrb.w	fp, [r4, #8]
 8006794:	ea4e 0e08 	orr.w	lr, lr, r8
 8006798:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 800679c:	f894 800b 	ldrb.w	r8, [r4, #11]
 80067a0:	ea4a 6a0b 	orr.w	sl, sl, fp, lsl #24
 80067a4:	ea4a 0a08 	orr.w	sl, sl, r8
 80067a8:	f894 800f 	ldrb.w	r8, [r4, #15]
 80067ac:	f894 b006 	ldrb.w	fp, [r4, #6]
 80067b0:	ea82 0209 	eor.w	r2, r2, r9
 80067b4:	ea4c 0c08 	orr.w	ip, ip, r8
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	f894 800a 	ldrb.w	r8, [r4, #10]
 80067be:	7ba2      	ldrb	r2, [r4, #14]
 80067c0:	ea4e 2e0b 	orr.w	lr, lr, fp, lsl #8
 80067c4:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 80067c8:	ea4a 2808 	orr.w	r8, sl, r8, lsl #8
 80067cc:	ea81 0e0e 	eor.w	lr, r1, lr
 80067d0:	ea83 0c0c 	eor.w	ip, r3, ip
 80067d4:	ea80 0808 	eor.w	r8, r0, r8
 80067d8:	2310      	movs	r3, #16
 80067da:	3601      	adds	r6, #1
 80067dc:	4628      	mov	r0, r5
 80067de:	9900      	ldr	r1, [sp, #0]
 80067e0:	f8c5 e004 	str.w	lr, [r5, #4]
 80067e4:	aa52      	add	r2, sp, #328	; 0x148
 80067e6:	f8c5 8008 	str.w	r8, [r5, #8]
 80067ea:	f8c5 c00c 	str.w	ip, [r5, #12]
 80067ee:	441c      	add	r4, r3
 80067f0:	f7ff fd5e 	bl	80062b0 <AES_general_SW_enc>
 80067f4:	42be      	cmp	r6, r7
 80067f6:	d1a3      	bne.n	8006740 <DRBG_AES128_Block_cipher_df.constprop.37+0x180>
 80067f8:	a802      	add	r0, sp, #8
 80067fa:	4629      	mov	r1, r5
 80067fc:	2210      	movs	r2, #16
 80067fe:	f7ff fc75 	bl	80060ec <AES_keyschedule_enc_LL>
 8006802:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8006806:	462a      	mov	r2, r5
 8006808:	2310      	movs	r3, #16
 800680a:	f7ff fd51 	bl	80062b0 <AES_general_SW_enc>
 800680e:	9c01      	ldr	r4, [sp, #4]
 8006810:	6820      	ldr	r0, [r4, #0]
 8006812:	6861      	ldr	r1, [r4, #4]
 8006814:	68a2      	ldr	r2, [r4, #8]
 8006816:	68e3      	ldr	r3, [r4, #12]
 8006818:	9c00      	ldr	r4, [sp, #0]
 800681a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800681c:	e89d 0011 	ldmia.w	sp, {r0, r4}
 8006820:	462a      	mov	r2, r5
 8006822:	f104 0110 	add.w	r1, r4, #16
 8006826:	2310      	movs	r3, #16
 8006828:	f7ff fd42 	bl	80062b0 <AES_general_SW_enc>
 800682c:	2000      	movs	r0, #0
 800682e:	b07f      	add	sp, #508	; 0x1fc
 8006830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006834:	ac06      	add	r4, sp, #24
 8006836:	9706      	str	r7, [sp, #24]
 8006838:	9707      	str	r7, [sp, #28]
 800683a:	9708      	str	r7, [sp, #32]
 800683c:	9709      	str	r7, [sp, #36]	; 0x24
 800683e:	ad26      	add	r5, sp, #152	; 0x98
 8006840:	9400      	str	r4, [sp, #0]
 8006842:	e7d9      	b.n	80067f8 <DRBG_AES128_Block_cipher_df.constprop.37+0x238>
 8006844:	08008870 	.word	0x08008870

08006848 <crl_DRBG_AES128_Generate.part.25.constprop.36>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	460d      	mov	r5, r1
 800684e:	1e19      	subs	r1, r3, #0
 8006850:	b0c1      	sub	sp, #260	; 0x104
 8006852:	4680      	mov	r8, r0
 8006854:	f340 810d 	ble.w	8006a72 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x22a>
 8006858:	4610      	mov	r0, r2
 800685a:	aa04      	add	r2, sp, #16
 800685c:	f7ff feb0 	bl	80065c0 <DRBG_AES128_Block_cipher_df.constprop.37>
 8006860:	b110      	cbz	r0, 8006868 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x20>
 8006862:	b041      	add	sp, #260	; 0x104
 8006864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006868:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 800686c:	f108 0a10 	add.w	sl, r8, #16
 8006870:	4650      	mov	r0, sl
 8006872:	4649      	mov	r1, r9
 8006874:	2210      	movs	r2, #16
 8006876:	f7ff fc39 	bl	80060ec <AES_keyschedule_enc_LL>
 800687a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800687e:	464c      	mov	r4, r9
 8006880:	465f      	mov	r7, fp
 8006882:	462e      	mov	r6, r5
 8006884:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8006888:	2310      	movs	r3, #16
 800688a:	3501      	adds	r5, #1
 800688c:	4639      	mov	r1, r7
 800688e:	4640      	mov	r0, r8
 8006890:	464a      	mov	r2, r9
 8006892:	441f      	add	r7, r3
 8006894:	f8c8 500c 	str.w	r5, [r8, #12]
 8006898:	b985      	cbnz	r5, 80068bc <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 800689a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800689e:	3501      	adds	r5, #1
 80068a0:	f8c8 5008 	str.w	r5, [r8, #8]
 80068a4:	b955      	cbnz	r5, 80068bc <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 80068a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80068aa:	3501      	adds	r5, #1
 80068ac:	f8c8 5004 	str.w	r5, [r8, #4]
 80068b0:	b925      	cbnz	r5, 80068bc <crl_DRBG_AES128_Generate.part.25.constprop.36+0x74>
 80068b2:	f8d8 5000 	ldr.w	r5, [r8]
 80068b6:	3501      	adds	r5, #1
 80068b8:	f8c8 5000 	str.w	r5, [r8]
 80068bc:	f7ff fcf8 	bl	80062b0 <AES_general_SW_enc>
 80068c0:	454f      	cmp	r7, r9
 80068c2:	d1df      	bne.n	8006884 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x3c>
 80068c4:	9a06      	ldr	r2, [sp, #24]
 80068c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80068c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ca:	9804      	ldr	r0, [sp, #16]
 80068cc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80068ce:	4635      	mov	r5, r6
 80068d0:	9e05      	ldr	r6, [sp, #20]
 80068d2:	4053      	eors	r3, r2
 80068d4:	4071      	eors	r1, r6
 80068d6:	9a07      	ldr	r2, [sp, #28]
 80068d8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80068da:	f8c8 3018 	str.w	r3, [r8, #24]
 80068de:	4047      	eors	r7, r0
 80068e0:	ea82 0e06 	eor.w	lr, r2, r6
 80068e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80068e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ea:	f8c8 7010 	str.w	r7, [r8, #16]
 80068ee:	9f08      	ldr	r7, [sp, #32]
 80068f0:	f8c8 1014 	str.w	r1, [r8, #20]
 80068f4:	ea83 0600 	eor.w	r6, r3, r0
 80068f8:	ea87 0102 	eor.w	r1, r7, r2
 80068fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006902:	f8c8 e01c 	str.w	lr, [r8, #28]
 8006906:	ea80 0702 	eor.w	r7, r0, r2
 800690a:	e888 00c2 	stmia.w	r8, {r1, r6, r7}
 800690e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006910:	ea83 0200 	eor.w	r2, r3, r0
 8006914:	f8c8 200c 	str.w	r2, [r8, #12]
 8006918:	4650      	mov	r0, sl
 800691a:	4621      	mov	r1, r4
 800691c:	2210      	movs	r2, #16
 800691e:	f7ff fbe5 	bl	80060ec <AES_keyschedule_enc_LL>
 8006922:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 8006926:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800692a:	3601      	adds	r6, #1
 800692c:	4640      	mov	r0, r8
 800692e:	4669      	mov	r1, sp
 8006930:	4622      	mov	r2, r4
 8006932:	2310      	movs	r3, #16
 8006934:	f8c8 600c 	str.w	r6, [r8, #12]
 8006938:	b986      	cbnz	r6, 800695c <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 800693a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 800693e:	3601      	adds	r6, #1
 8006940:	f8c8 6008 	str.w	r6, [r8, #8]
 8006944:	b956      	cbnz	r6, 800695c <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8006946:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800694a:	3601      	adds	r6, #1
 800694c:	f8c8 6004 	str.w	r6, [r8, #4]
 8006950:	b926      	cbnz	r6, 800695c <crl_DRBG_AES128_Generate.part.25.constprop.36+0x114>
 8006952:	f8d8 6000 	ldr.w	r6, [r8]
 8006956:	3601      	adds	r6, #1
 8006958:	f8c8 6000 	str.w	r6, [r8]
 800695c:	f7ff fca8 	bl	80062b0 <AES_general_SW_enc>
 8006960:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
 8006964:	70e8      	strb	r0, [r5, #3]
 8006966:	ea4f 2910 	mov.w	r9, r0, lsr #8
 800696a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800696e:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 8006972:	0a0e      	lsrs	r6, r1, #8
 8006974:	0c08      	lsrs	r0, r1, #16
 8006976:	f885 9002 	strb.w	r9, [r5, #2]
 800697a:	f885 c001 	strb.w	ip, [r5, #1]
 800697e:	f885 e000 	strb.w	lr, [r5]
 8006982:	71e9      	strb	r1, [r5, #7]
 8006984:	71ae      	strb	r6, [r5, #6]
 8006986:	7168      	strb	r0, [r5, #5]
 8006988:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 800698c:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8006990:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006994:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8006998:	0a1e      	lsrs	r6, r3, #8
 800699a:	0c18      	lsrs	r0, r3, #16
 800699c:	0e19      	lsrs	r1, r3, #24
 800699e:	f885 a004 	strb.w	sl, [r5, #4]
 80069a2:	72ea      	strb	r2, [r5, #11]
 80069a4:	f885 900a 	strb.w	r9, [r5, #10]
 80069a8:	f885 c009 	strb.w	ip, [r5, #9]
 80069ac:	f885 e008 	strb.w	lr, [r5, #8]
 80069b0:	73eb      	strb	r3, [r5, #15]
 80069b2:	73ae      	strb	r6, [r5, #14]
 80069b4:	7368      	strb	r0, [r5, #13]
 80069b6:	7329      	strb	r1, [r5, #12]
 80069b8:	3510      	adds	r5, #16
 80069ba:	42bd      	cmp	r5, r7
 80069bc:	d1b3      	bne.n	8006926 <crl_DRBG_AES128_Generate.part.25.constprop.36+0xde>
 80069be:	f8d8 500c 	ldr.w	r5, [r8, #12]
 80069c2:	2310      	movs	r3, #16
 80069c4:	3501      	adds	r5, #1
 80069c6:	4659      	mov	r1, fp
 80069c8:	4640      	mov	r0, r8
 80069ca:	4622      	mov	r2, r4
 80069cc:	449b      	add	fp, r3
 80069ce:	f8c8 500c 	str.w	r5, [r8, #12]
 80069d2:	b985      	cbnz	r5, 80069f6 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 80069d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80069d8:	3501      	adds	r5, #1
 80069da:	f8c8 5008 	str.w	r5, [r8, #8]
 80069de:	b955      	cbnz	r5, 80069f6 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 80069e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80069e4:	3501      	adds	r5, #1
 80069e6:	f8c8 5004 	str.w	r5, [r8, #4]
 80069ea:	b925      	cbnz	r5, 80069f6 <crl_DRBG_AES128_Generate.part.25.constprop.36+0x1ae>
 80069ec:	f8d8 5000 	ldr.w	r5, [r8]
 80069f0:	3501      	adds	r5, #1
 80069f2:	f8c8 5000 	str.w	r5, [r8]
 80069f6:	f7ff fc5b 	bl	80062b0 <AES_general_SW_enc>
 80069fa:	45a3      	cmp	fp, r4
 80069fc:	d1df      	bne.n	80069be <crl_DRBG_AES128_Generate.part.25.constprop.36+0x176>
 80069fe:	9906      	ldr	r1, [sp, #24]
 8006a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a02:	9c05      	ldr	r4, [sp, #20]
 8006a04:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006a06:	9e04      	ldr	r6, [sp, #16]
 8006a08:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006a0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a0c:	ea81 0c02 	eor.w	ip, r1, r2
 8006a10:	9a07      	ldr	r2, [sp, #28]
 8006a12:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8006a16:	f8c8 c018 	str.w	ip, [r8, #24]
 8006a1a:	4060      	eors	r0, r4
 8006a1c:	ea82 0307 	eor.w	r3, r2, r7
 8006a20:	4075      	eors	r5, r6
 8006a22:	9c08      	ldr	r4, [sp, #32]
 8006a24:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006a26:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a28:	f8c8 0014 	str.w	r0, [r8, #20]
 8006a2c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a30:	f8c8 5010 	str.w	r5, [r8, #16]
 8006a34:	ea84 0506 	eor.w	r5, r4, r6
 8006a38:	ea87 0600 	eor.w	r6, r7, r0
 8006a3c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006a3e:	f8c8 301c 	str.w	r3, [r8, #28]
 8006a42:	ea82 0407 	eor.w	r4, r2, r7
 8006a46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a48:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8006a4a:	f8c8 4008 	str.w	r4, [r8, #8]
 8006a4e:	ea82 0007 	eor.w	r0, r2, r7
 8006a52:	1c4b      	adds	r3, r1, #1
 8006a54:	f8c8 000c 	str.w	r0, [r8, #12]
 8006a58:	bf1a      	itte	ne
 8006a5a:	3101      	addne	r1, #1
 8006a5c:	2000      	movne	r0, #0
 8006a5e:	f241 7073 	movweq	r0, #6003	; 0x1773
 8006a62:	e888 0060 	stmia.w	r8, {r5, r6}
 8006a66:	bf18      	it	ne
 8006a68:	f8c8 1020 	strne.w	r1, [r8, #32]
 8006a6c:	b041      	add	sp, #260	; 0x104
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a72:	2300      	movs	r3, #0
 8006a74:	9304      	str	r3, [sp, #16]
 8006a76:	9305      	str	r3, [sp, #20]
 8006a78:	9306      	str	r3, [sp, #24]
 8006a7a:	9307      	str	r3, [sp, #28]
 8006a7c:	9308      	str	r3, [sp, #32]
 8006a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a80:	930a      	str	r3, [sp, #40]	; 0x28
 8006a82:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a84:	f100 0a10 	add.w	sl, r0, #16
 8006a88:	ac14      	add	r4, sp, #80	; 0x50
 8006a8a:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006a8e:	e743      	b.n	8006918 <crl_DRBG_AES128_Generate.part.25.constprop.36+0xd0>

08006a90 <crl_DRBG_AES128_Generate.part.25>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	b0c3      	sub	sp, #268	; 0x10c
 8006a96:	4605      	mov	r5, r0
 8006a98:	9100      	str	r1, [sp, #0]
 8006a9a:	1e19      	subs	r1, r3, #0
 8006a9c:	f8dd b130 	ldr.w	fp, [sp, #304]	; 0x130
 8006aa0:	f340 80f4 	ble.w	8006c8c <crl_DRBG_AES128_Generate.part.25+0x1fc>
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	aa06      	add	r2, sp, #24
 8006aa8:	f7ff fd8a 	bl	80065c0 <DRBG_AES128_Block_cipher_df.constprop.37>
 8006aac:	b110      	cbz	r0, 8006ab4 <crl_DRBG_AES128_Generate.part.25+0x24>
 8006aae:	b043      	add	sp, #268	; 0x10c
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	af16      	add	r7, sp, #88	; 0x58
 8006ab6:	f105 0910 	add.w	r9, r5, #16
 8006aba:	ac0e      	add	r4, sp, #56	; 0x38
 8006abc:	4648      	mov	r0, r9
 8006abe:	4639      	mov	r1, r7
 8006ac0:	2210      	movs	r2, #16
 8006ac2:	f7ff fb13 	bl	80060ec <AES_keyschedule_enc_LL>
 8006ac6:	46ba      	mov	sl, r7
 8006ac8:	9401      	str	r4, [sp, #4]
 8006aca:	4626      	mov	r6, r4
 8006acc:	68ec      	ldr	r4, [r5, #12]
 8006ace:	2310      	movs	r3, #16
 8006ad0:	3401      	adds	r4, #1
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	463a      	mov	r2, r7
 8006ad8:	441e      	add	r6, r3
 8006ada:	60ec      	str	r4, [r5, #12]
 8006adc:	b954      	cbnz	r4, 8006af4 <crl_DRBG_AES128_Generate.part.25+0x64>
 8006ade:	68ac      	ldr	r4, [r5, #8]
 8006ae0:	3401      	adds	r4, #1
 8006ae2:	60ac      	str	r4, [r5, #8]
 8006ae4:	b934      	cbnz	r4, 8006af4 <crl_DRBG_AES128_Generate.part.25+0x64>
 8006ae6:	686c      	ldr	r4, [r5, #4]
 8006ae8:	3401      	adds	r4, #1
 8006aea:	606c      	str	r4, [r5, #4]
 8006aec:	b914      	cbnz	r4, 8006af4 <crl_DRBG_AES128_Generate.part.25+0x64>
 8006aee:	682c      	ldr	r4, [r5, #0]
 8006af0:	3401      	adds	r4, #1
 8006af2:	602c      	str	r4, [r5, #0]
 8006af4:	f7ff fbdc 	bl	80062b0 <AES_general_SW_enc>
 8006af8:	42be      	cmp	r6, r7
 8006afa:	d1e7      	bne.n	8006acc <crl_DRBG_AES128_Generate.part.25+0x3c>
 8006afc:	9807      	ldr	r0, [sp, #28]
 8006afe:	9a08      	ldr	r2, [sp, #32]
 8006b00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b04:	9e06      	ldr	r6, [sp, #24]
 8006b06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006b08:	4041      	eors	r1, r0
 8006b0a:	4053      	eors	r3, r2
 8006b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006b10:	61ab      	str	r3, [r5, #24]
 8006b12:	4074      	eors	r4, r6
 8006b14:	ea80 0702 	eor.w	r7, r0, r2
 8006b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b1e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006b20:	612c      	str	r4, [r5, #16]
 8006b22:	6169      	str	r1, [r5, #20]
 8006b24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006b26:	61ef      	str	r7, [r5, #28]
 8006b28:	ea80 0102 	eor.w	r1, r0, r2
 8006b2c:	ea83 0006 	eor.w	r0, r3, r6
 8006b30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b34:	6029      	str	r1, [r5, #0]
 8006b36:	405c      	eors	r4, r3
 8006b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b3a:	6068      	str	r0, [r5, #4]
 8006b3c:	405a      	eors	r2, r3
 8006b3e:	60ac      	str	r4, [r5, #8]
 8006b40:	60ea      	str	r2, [r5, #12]
 8006b42:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8006dc8 <crl_DRBG_AES128_Generate.part.25+0x338>
 8006b46:	4648      	mov	r0, r9
 8006b48:	4651      	mov	r1, sl
 8006b4a:	2210      	movs	r2, #16
 8006b4c:	ea0b 0808 	and.w	r8, fp, r8
 8006b50:	f7ff facc 	bl	80060ec <AES_keyschedule_enc_LL>
 8006b54:	f1b8 0f00 	cmp.w	r8, #0
 8006b58:	f2c0 811e 	blt.w	8006d98 <crl_DRBG_AES128_Generate.part.25+0x308>
 8006b5c:	f1bb 0f0f 	cmp.w	fp, #15
 8006b60:	f340 8121 	ble.w	8006da6 <crl_DRBG_AES128_Generate.part.25+0x316>
 8006b64:	9f00      	ldr	r7, [sp, #0]
 8006b66:	f04f 0910 	mov.w	r9, #16
 8006b6a:	1cfc      	adds	r4, r7, #3
 8006b6c:	ae02      	add	r6, sp, #8
 8006b6e:	68ef      	ldr	r7, [r5, #12]
 8006b70:	2310      	movs	r3, #16
 8006b72:	3701      	adds	r7, #1
 8006b74:	4628      	mov	r0, r5
 8006b76:	4631      	mov	r1, r6
 8006b78:	4652      	mov	r2, sl
 8006b7a:	4499      	add	r9, r3
 8006b7c:	60ef      	str	r7, [r5, #12]
 8006b7e:	b957      	cbnz	r7, 8006b96 <crl_DRBG_AES128_Generate.part.25+0x106>
 8006b80:	68af      	ldr	r7, [r5, #8]
 8006b82:	3701      	adds	r7, #1
 8006b84:	60af      	str	r7, [r5, #8]
 8006b86:	b937      	cbnz	r7, 8006b96 <crl_DRBG_AES128_Generate.part.25+0x106>
 8006b88:	686f      	ldr	r7, [r5, #4]
 8006b8a:	3701      	adds	r7, #1
 8006b8c:	606f      	str	r7, [r5, #4]
 8006b8e:	b917      	cbnz	r7, 8006b96 <crl_DRBG_AES128_Generate.part.25+0x106>
 8006b90:	682f      	ldr	r7, [r5, #0]
 8006b92:	3701      	adds	r7, #1
 8006b94:	602f      	str	r7, [r5, #0]
 8006b96:	f7ff fb8b 	bl	80062b0 <AES_general_SW_enc>
 8006b9a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006b9e:	0a07      	lsrs	r7, r0, #8
 8006ba0:	7020      	strb	r0, [r4, #0]
 8006ba2:	f804 7c01 	strb.w	r7, [r4, #-1]
 8006ba6:	0c07      	lsrs	r7, r0, #16
 8006ba8:	0e00      	lsrs	r0, r0, #24
 8006baa:	f804 7c02 	strb.w	r7, [r4, #-2]
 8006bae:	f804 0c03 	strb.w	r0, [r4, #-3]
 8006bb2:	0a0f      	lsrs	r7, r1, #8
 8006bb4:	0c08      	lsrs	r0, r1, #16
 8006bb6:	7121      	strb	r1, [r4, #4]
 8006bb8:	0e09      	lsrs	r1, r1, #24
 8006bba:	70e7      	strb	r7, [r4, #3]
 8006bbc:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8006bc0:	70a0      	strb	r0, [r4, #2]
 8006bc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006bc6:	7061      	strb	r1, [r4, #1]
 8006bc8:	0e17      	lsrs	r7, r2, #24
 8006bca:	7222      	strb	r2, [r4, #8]
 8006bcc:	0a18      	lsrs	r0, r3, #8
 8006bce:	0c19      	lsrs	r1, r3, #16
 8006bd0:	0e1a      	lsrs	r2, r3, #24
 8006bd2:	45cb      	cmp	fp, r9
 8006bd4:	f884 c007 	strb.w	ip, [r4, #7]
 8006bd8:	f884 e006 	strb.w	lr, [r4, #6]
 8006bdc:	7167      	strb	r7, [r4, #5]
 8006bde:	7323      	strb	r3, [r4, #12]
 8006be0:	72e0      	strb	r0, [r4, #11]
 8006be2:	72a1      	strb	r1, [r4, #10]
 8006be4:	7262      	strb	r2, [r4, #9]
 8006be6:	f104 0410 	add.w	r4, r4, #16
 8006bea:	dac0      	bge.n	8006b6e <crl_DRBG_AES128_Generate.part.25+0xde>
 8006bec:	f1b8 0f00 	cmp.w	r8, #0
 8006bf0:	d15c      	bne.n	8006cac <crl_DRBG_AES128_Generate.part.25+0x21c>
 8006bf2:	9c01      	ldr	r4, [sp, #4]
 8006bf4:	68ee      	ldr	r6, [r5, #12]
 8006bf6:	2310      	movs	r3, #16
 8006bf8:	3601      	adds	r6, #1
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	4652      	mov	r2, sl
 8006c00:	441c      	add	r4, r3
 8006c02:	60ee      	str	r6, [r5, #12]
 8006c04:	b956      	cbnz	r6, 8006c1c <crl_DRBG_AES128_Generate.part.25+0x18c>
 8006c06:	68ae      	ldr	r6, [r5, #8]
 8006c08:	3601      	adds	r6, #1
 8006c0a:	60ae      	str	r6, [r5, #8]
 8006c0c:	b936      	cbnz	r6, 8006c1c <crl_DRBG_AES128_Generate.part.25+0x18c>
 8006c0e:	686e      	ldr	r6, [r5, #4]
 8006c10:	3601      	adds	r6, #1
 8006c12:	606e      	str	r6, [r5, #4]
 8006c14:	b916      	cbnz	r6, 8006c1c <crl_DRBG_AES128_Generate.part.25+0x18c>
 8006c16:	682e      	ldr	r6, [r5, #0]
 8006c18:	3601      	adds	r6, #1
 8006c1a:	602e      	str	r6, [r5, #0]
 8006c1c:	f7ff fb48 	bl	80062b0 <AES_general_SW_enc>
 8006c20:	4554      	cmp	r4, sl
 8006c22:	d1e7      	bne.n	8006bf4 <crl_DRBG_AES128_Generate.part.25+0x164>
 8006c24:	9c07      	ldr	r4, [sp, #28]
 8006c26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006c28:	9f06      	ldr	r7, [sp, #24]
 8006c2a:	9908      	ldr	r1, [sp, #32]
 8006c2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c2e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c32:	4060      	eors	r0, r4
 8006c34:	ea81 0c02 	eor.w	ip, r1, r2
 8006c38:	407e      	eors	r6, r7
 8006c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c3c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006c3e:	6168      	str	r0, [r5, #20]
 8006c40:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006c42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006c44:	612e      	str	r6, [r5, #16]
 8006c46:	ea87 0800 	eor.w	r8, r7, r0
 8006c4a:	ea82 0603 	eor.w	r6, r2, r3
 8006c4e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006c50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c54:	6a29      	ldr	r1, [r5, #32]
 8006c56:	f8c5 c018 	str.w	ip, [r5, #24]
 8006c5a:	ea84 0700 	eor.w	r7, r4, r0
 8006c5e:	ea82 0403 	eor.w	r4, r2, r3
 8006c62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c66:	f8c5 801c 	str.w	r8, [r5, #28]
 8006c6a:	ea82 0003 	eor.w	r0, r2, r3
 8006c6e:	1c4b      	adds	r3, r1, #1
 8006c70:	60e8      	str	r0, [r5, #12]
 8006c72:	bf1a      	itte	ne
 8006c74:	3101      	addne	r1, #1
 8006c76:	2000      	movne	r0, #0
 8006c78:	f241 7073 	movweq	r0, #6003	; 0x1773
 8006c7c:	e885 00c0 	stmia.w	r5, {r6, r7}
 8006c80:	60ac      	str	r4, [r5, #8]
 8006c82:	bf18      	it	ne
 8006c84:	6229      	strne	r1, [r5, #32]
 8006c86:	b043      	add	sp, #268	; 0x10c
 8006c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	ac0e      	add	r4, sp, #56	; 0x38
 8006c90:	9306      	str	r3, [sp, #24]
 8006c92:	9307      	str	r3, [sp, #28]
 8006c94:	9308      	str	r3, [sp, #32]
 8006c96:	9309      	str	r3, [sp, #36]	; 0x24
 8006c98:	930a      	str	r3, [sp, #40]	; 0x28
 8006c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c9c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8006ca0:	f100 0910 	add.w	r9, r0, #16
 8006ca4:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
 8006ca8:	9401      	str	r4, [sp, #4]
 8006caa:	e74a      	b.n	8006b42 <crl_DRBG_AES128_Generate.part.25+0xb2>
 8006cac:	68eb      	ldr	r3, [r5, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60eb      	str	r3, [r5, #12]
 8006cb2:	b953      	cbnz	r3, 8006cca <crl_DRBG_AES128_Generate.part.25+0x23a>
 8006cb4:	68ab      	ldr	r3, [r5, #8]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60ab      	str	r3, [r5, #8]
 8006cba:	b933      	cbnz	r3, 8006cca <crl_DRBG_AES128_Generate.part.25+0x23a>
 8006cbc:	686b      	ldr	r3, [r5, #4]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	606b      	str	r3, [r5, #4]
 8006cc2:	b913      	cbnz	r3, 8006cca <crl_DRBG_AES128_Generate.part.25+0x23a>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	ae02      	add	r6, sp, #8
 8006ccc:	4652      	mov	r2, sl
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	2310      	movs	r3, #16
 8006cd4:	f7ff faec 	bl	80062b0 <AES_general_SW_enc>
 8006cd8:	f1b8 0f00 	cmp.w	r8, #0
 8006cdc:	4642      	mov	r2, r8
 8006cde:	bfb8      	it	lt
 8006ce0:	f108 0203 	addlt.w	r2, r8, #3
 8006ce4:	1092      	asrs	r2, r2, #2
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	dd60      	ble.n	8006dac <crl_DRBG_AES128_Generate.part.25+0x31c>
 8006cea:	9900      	ldr	r1, [sp, #0]
 8006cec:	6833      	ldr	r3, [r6, #0]
 8006cee:	f1a9 0010 	sub.w	r0, r9, #16
 8006cf2:	4401      	add	r1, r0
 8006cf4:	0c1f      	lsrs	r7, r3, #16
 8006cf6:	704f      	strb	r7, [r1, #1]
 8006cf8:	9f00      	ldr	r7, [sp, #0]
 8006cfa:	70cb      	strb	r3, [r1, #3]
 8006cfc:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8006d00:	0e1c      	lsrs	r4, r3, #24
 8006d02:	2a01      	cmp	r2, #1
 8006d04:	f881 e002 	strb.w	lr, [r1, #2]
 8006d08:	543c      	strb	r4, [r7, r0]
 8006d0a:	dd51      	ble.n	8006db0 <crl_DRBG_AES128_Generate.part.25+0x320>
 8006d0c:	6873      	ldr	r3, [r6, #4]
 8006d0e:	f1a9 000c 	sub.w	r0, r9, #12
 8006d12:	4639      	mov	r1, r7
 8006d14:	4401      	add	r1, r0
 8006d16:	0c1f      	lsrs	r7, r3, #16
 8006d18:	704f      	strb	r7, [r1, #1]
 8006d1a:	9f00      	ldr	r7, [sp, #0]
 8006d1c:	70cb      	strb	r3, [r1, #3]
 8006d1e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
 8006d22:	0e1c      	lsrs	r4, r3, #24
 8006d24:	2a02      	cmp	r2, #2
 8006d26:	f881 e002 	strb.w	lr, [r1, #2]
 8006d2a:	543c      	strb	r4, [r7, r0]
 8006d2c:	dd42      	ble.n	8006db4 <crl_DRBG_AES128_Generate.part.25+0x324>
 8006d2e:	68b3      	ldr	r3, [r6, #8]
 8006d30:	f1a9 0108 	sub.w	r1, r9, #8
 8006d34:	463a      	mov	r2, r7
 8006d36:	440a      	add	r2, r1
 8006d38:	0a1f      	lsrs	r7, r3, #8
 8006d3a:	7097      	strb	r7, [r2, #2]
 8006d3c:	9f00      	ldr	r7, [sp, #0]
 8006d3e:	70d3      	strb	r3, [r2, #3]
 8006d40:	0c18      	lsrs	r0, r3, #16
 8006d42:	0e1c      	lsrs	r4, r3, #24
 8006d44:	7050      	strb	r0, [r2, #1]
 8006d46:	547c      	strb	r4, [r7, r1]
 8006d48:	2003      	movs	r0, #3
 8006d4a:	f018 0f03 	tst.w	r8, #3
 8006d4e:	f43f af50 	beq.w	8006bf2 <crl_DRBG_AES128_Generate.part.25+0x162>
 8006d52:	4b1c      	ldr	r3, [pc, #112]	; (8006dc4 <crl_DRBG_AES128_Generate.part.25+0x334>)
 8006d54:	ea08 0303 	and.w	r3, r8, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	db2d      	blt.n	8006db8 <crl_DRBG_AES128_Generate.part.25+0x328>
 8006d5c:	9c00      	ldr	r4, [sp, #0]
 8006d5e:	f856 2020 	ldr.w	r2, [r6, r0, lsl #2]
 8006d62:	f1a9 0110 	sub.w	r1, r9, #16
 8006d66:	441c      	add	r4, r3
 8006d68:	f1c3 0704 	rsb	r7, r3, #4
 8006d6c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8006d70:	440c      	add	r4, r1
 8006d72:	00ff      	lsls	r7, r7, #3
 8006d74:	40fa      	lsrs	r2, r7
 8006d76:	3b02      	subs	r3, #2
 8006d78:	f804 2c01 	strb.w	r2, [r4, #-1]
 8006d7c:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 8006d80:	f53f af37 	bmi.w	8006bf2 <crl_DRBG_AES128_Generate.part.25+0x162>
 8006d84:	9c00      	ldr	r4, [sp, #0]
 8006d86:	4421      	add	r1, r4
 8006d88:	0a12      	lsrs	r2, r2, #8
 8006d8a:	54ca      	strb	r2, [r1, r3]
 8006d8c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006d90:	d2fa      	bcs.n	8006d88 <crl_DRBG_AES128_Generate.part.25+0x2f8>
 8006d92:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 8006d96:	e72c      	b.n	8006bf2 <crl_DRBG_AES128_Generate.part.25+0x162>
 8006d98:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d9c:	f068 080f 	orn	r8, r8, #15
 8006da0:	f108 0801 	add.w	r8, r8, #1
 8006da4:	e6da      	b.n	8006b5c <crl_DRBG_AES128_Generate.part.25+0xcc>
 8006da6:	f04f 0910 	mov.w	r9, #16
 8006daa:	e71f      	b.n	8006bec <crl_DRBG_AES128_Generate.part.25+0x15c>
 8006dac:	2000      	movs	r0, #0
 8006dae:	e7cc      	b.n	8006d4a <crl_DRBG_AES128_Generate.part.25+0x2ba>
 8006db0:	2001      	movs	r0, #1
 8006db2:	e7ca      	b.n	8006d4a <crl_DRBG_AES128_Generate.part.25+0x2ba>
 8006db4:	2002      	movs	r0, #2
 8006db6:	e7c8      	b.n	8006d4a <crl_DRBG_AES128_Generate.part.25+0x2ba>
 8006db8:	3b01      	subs	r3, #1
 8006dba:	f063 0303 	orn	r3, r3, #3
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	e7cc      	b.n	8006d5c <crl_DRBG_AES128_Generate.part.25+0x2cc>
 8006dc2:	bf00      	nop
 8006dc4:	80000003 	.word	0x80000003
 8006dc8:	8000000f 	.word	0x8000000f

08006dcc <StAllocBig>:
 8006dcc:	88d3      	ldrh	r3, [r2, #6]
 8006dce:	b4f0      	push	{r4, r5, r6, r7}
 8006dd0:	1c4c      	adds	r4, r1, #1
 8006dd2:	8896      	ldrh	r6, [r2, #4]
 8006dd4:	f103 0508 	add.w	r5, r3, #8
 8006dd8:	00a4      	lsls	r4, r4, #2
 8006dda:	1967      	adds	r7, r4, r5
 8006ddc:	42b7      	cmp	r7, r6
 8006dde:	d903      	bls.n	8006de8 <StAllocBig+0x1c>
 8006de0:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8006de4:	bcf0      	pop	{r4, r5, r6, r7}
 8006de6:	4770      	bx	lr
 8006de8:	6816      	ldr	r6, [r2, #0]
 8006dea:	18f7      	adds	r7, r6, r3
 8006dec:	6007      	str	r7, [r0, #0]
 8006dee:	6817      	ldr	r7, [r2, #0]
 8006df0:	443d      	add	r5, r7
 8006df2:	50f5      	str	r5, [r6, r3]
 8006df4:	6803      	ldr	r3, [r0, #0]
 8006df6:	7199      	strb	r1, [r3, #6]
 8006df8:	88d3      	ldrh	r3, [r2, #6]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	441c      	add	r4, r3
 8006dfe:	80d4      	strh	r4, [r2, #6]
 8006e00:	2000      	movs	r0, #0
 8006e02:	bcf0      	pop	{r4, r5, r6, r7}
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop

08006e08 <StFreeBig>:
 8006e08:	6803      	ldr	r3, [r0, #0]
 8006e0a:	b14b      	cbz	r3, 8006e20 <StFreeBig+0x18>
 8006e0c:	b141      	cbz	r1, 8006e20 <StFreeBig+0x18>
 8006e0e:	799a      	ldrb	r2, [r3, #6]
 8006e10:	88cb      	ldrh	r3, [r1, #6]
 8006e12:	43d2      	mvns	r2, r2
 8006e14:	3b08      	subs	r3, #8
 8006e16:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	80ca      	strh	r2, [r1, #6]
 8006e1e:	6003      	str	r3, [r0, #0]
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop

08006e24 <InitBig>:
 8006e24:	7983      	ldrb	r3, [r0, #6]
 8006e26:	b470      	push	{r4, r5, r6}
 8006e28:	b1b3      	cbz	r3, 8006e58 <InitBig+0x34>
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	6805      	ldr	r5, [r0, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	2600      	movs	r6, #0
 8006e32:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
 8006e36:	7984      	ldrb	r4, [r0, #6]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3401      	adds	r4, #1
 8006e3e:	42a3      	cmp	r3, r4
 8006e40:	461a      	mov	r2, r3
 8006e42:	d3f6      	bcc.n	8006e32 <InitBig+0xe>
 8006e44:	2301      	movs	r3, #1
 8006e46:	2900      	cmp	r1, #0
 8006e48:	8083      	strh	r3, [r0, #4]
 8006e4a:	bfb4      	ite	lt
 8006e4c:	4249      	neglt	r1, r1
 8006e4e:	2300      	movge	r3, #0
 8006e50:	71c3      	strb	r3, [r0, #7]
 8006e52:	6029      	str	r1, [r5, #0]
 8006e54:	bc70      	pop	{r4, r5, r6}
 8006e56:	4770      	bx	lr
 8006e58:	6805      	ldr	r5, [r0, #0]
 8006e5a:	e7f3      	b.n	8006e44 <InitBig+0x20>

08006e5c <CopyBig>:
 8006e5c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8006e60:	798b      	ldrb	r3, [r1, #6]
 8006e62:	8884      	ldrh	r4, [r0, #4]
 8006e64:	429c      	cmp	r4, r3
 8006e66:	d907      	bls.n	8006e78 <CopyBig+0x1c>
 8006e68:	3301      	adds	r3, #1
 8006e6a:	42a3      	cmp	r3, r4
 8006e6c:	d227      	bcs.n	8006ebe <CopyBig+0x62>
 8006e6e:	f241 40b5 	movw	r0, #5301	; 0x14b5
 8006e72:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8006e76:	4770      	bx	lr
 8006e78:	f04f 0800 	mov.w	r8, #0
 8006e7c:	79c3      	ldrb	r3, [r0, #7]
 8006e7e:	71cb      	strb	r3, [r1, #7]
 8006e80:	808c      	strh	r4, [r1, #4]
 8006e82:	4622      	mov	r2, r4
 8006e84:	b1f4      	cbz	r4, 8006ec4 <CopyBig+0x68>
 8006e86:	6807      	ldr	r7, [r0, #0]
 8006e88:	680d      	ldr	r5, [r1, #0]
 8006e8a:	00a6      	lsls	r6, r4, #2
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	58f8      	ldr	r0, [r7, r3]
 8006e90:	50e8      	str	r0, [r5, r3]
 8006e92:	3304      	adds	r3, #4
 8006e94:	42b3      	cmp	r3, r6
 8006e96:	d1fa      	bne.n	8006e8e <CopyBig+0x32>
 8006e98:	798b      	ldrb	r3, [r1, #6]
 8006e9a:	42a3      	cmp	r3, r4
 8006e9c:	db0b      	blt.n	8006eb6 <CopyBig+0x5a>
 8006e9e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	f843 5f04 	str.w	r5, [r3, #4]!
 8006eae:	798c      	ldrb	r4, [r1, #6]
 8006eb0:	3201      	adds	r2, #1
 8006eb2:	4294      	cmp	r4, r2
 8006eb4:	daf9      	bge.n	8006eaa <CopyBig+0x4e>
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8006ebc:	4770      	bx	lr
 8006ebe:	f241 48b5 	movw	r8, #5301	; 0x14b5
 8006ec2:	e7db      	b.n	8006e7c <CopyBig+0x20>
 8006ec4:	680d      	ldr	r5, [r1, #0]
 8006ec6:	e7ea      	b.n	8006e9e <CopyBig+0x42>

08006ec8 <Add_Moduli_Big>:
 8006ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	7983      	ldrb	r3, [r0, #6]
 8006ece:	8884      	ldrh	r4, [r0, #4]
 8006ed0:	888f      	ldrh	r7, [r1, #4]
 8006ed2:	6805      	ldr	r5, [r0, #0]
 8006ed4:	680e      	ldr	r6, [r1, #0]
 8006ed6:	4692      	mov	sl, r2
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	42a7      	cmp	r7, r4
 8006edc:	bf34      	ite	cc
 8006ede:	46bb      	movcc	fp, r7
 8006ee0:	46a3      	movcs	fp, r4
 8006ee2:	4294      	cmp	r4, r2
 8006ee4:	4623      	mov	r3, r4
 8006ee6:	f8da 8000 	ldr.w	r8, [sl]
 8006eea:	d20f      	bcs.n	8006f0c <Add_Moduli_Big+0x44>
 8006eec:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8006ef0:	3a01      	subs	r2, #1
 8006ef2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8006ef6:	f04f 0c00 	mov.w	ip, #0
 8006efa:	f842 cf04 	str.w	ip, [r2, #4]!
 8006efe:	f890 e006 	ldrb.w	lr, [r0, #6]
 8006f02:	3301      	adds	r3, #1
 8006f04:	f10e 0e01 	add.w	lr, lr, #1
 8006f08:	459e      	cmp	lr, r3
 8006f0a:	d8f6      	bhi.n	8006efa <Add_Moduli_Big+0x32>
 8006f0c:	798a      	ldrb	r2, [r1, #6]
 8006f0e:	3201      	adds	r2, #1
 8006f10:	4297      	cmp	r7, r2
 8006f12:	463b      	mov	r3, r7
 8006f14:	d20f      	bcs.n	8006f36 <Add_Moduli_Big+0x6e>
 8006f16:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8006f1a:	3a01      	subs	r2, #1
 8006f1c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006f20:	f04f 0c00 	mov.w	ip, #0
 8006f24:	f842 cf04 	str.w	ip, [r2, #4]!
 8006f28:	f891 e006 	ldrb.w	lr, [r1, #6]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	f10e 0e01 	add.w	lr, lr, #1
 8006f32:	459e      	cmp	lr, r3
 8006f34:	d8f6      	bhi.n	8006f24 <Add_Moduli_Big+0x5c>
 8006f36:	42bc      	cmp	r4, r7
 8006f38:	d200      	bcs.n	8006f3c <Add_Moduli_Big+0x74>
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	f7ff ff8d 	bl	8006e5c <CopyBig>
 8006f42:	46dc      	mov	ip, fp
 8006f44:	f1bb 0f00 	cmp.w	fp, #0
 8006f48:	d030      	beq.n	8006fac <Add_Moduli_Big+0xe4>
 8006f4a:	ea4f 098b 	mov.w	r9, fp, lsl #2
 8006f4e:	2700      	movs	r7, #0
 8006f50:	2200      	movs	r2, #0
 8006f52:	2300      	movs	r3, #0
 8006f54:	59e8      	ldr	r0, [r5, r7]
 8006f56:	59f4      	ldr	r4, [r6, r7]
 8006f58:	2100      	movs	r1, #0
 8006f5a:	1900      	adds	r0, r0, r4
 8006f5c:	f141 0100 	adc.w	r1, r1, #0
 8006f60:	1880      	adds	r0, r0, r2
 8006f62:	f848 0007 	str.w	r0, [r8, r7]
 8006f66:	f107 0704 	add.w	r7, r7, #4
 8006f6a:	eb41 0103 	adc.w	r1, r1, r3
 8006f6e:	454f      	cmp	r7, r9
 8006f70:	460a      	mov	r2, r1
 8006f72:	f04f 0300 	mov.w	r3, #0
 8006f76:	d1ed      	bne.n	8006f54 <Add_Moduli_Big+0x8c>
 8006f78:	ea52 0103 	orrs.w	r1, r2, r3
 8006f7c:	d016      	beq.n	8006fac <Add_Moduli_Big+0xe4>
 8006f7e:	f858 3007 	ldr.w	r3, [r8, r7]
 8006f82:	3301      	adds	r3, #1
 8006f84:	f848 3007 	str.w	r3, [r8, r7]
 8006f88:	4447      	add	r7, r8
 8006f8a:	b97b      	cbnz	r3, 8006fac <Add_Moduli_Big+0xe4>
 8006f8c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8006f90:	455a      	cmp	r2, fp
 8006f92:	d202      	bcs.n	8006f9a <Add_Moduli_Big+0xd2>
 8006f94:	e00c      	b.n	8006fb0 <Add_Moduli_Big+0xe8>
 8006f96:	4594      	cmp	ip, r2
 8006f98:	d80a      	bhi.n	8006fb0 <Add_Moduli_Big+0xe8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	f10c 0c01 	add.w	ip, ip, #1
 8006fa2:	f847 3f04 	str.w	r3, [r7, #4]!
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0f5      	beq.n	8006f96 <Add_Moduli_Big+0xce>
 8006faa:	e001      	b.n	8006fb0 <Add_Moduli_Big+0xe8>
 8006fac:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8006fb0:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8006fb4:	b113      	cbz	r3, 8006fbc <Add_Moduli_Big+0xf4>
 8006fb6:	3201      	adds	r2, #1
 8006fb8:	f8aa 2004 	strh.w	r2, [sl, #4]
 8006fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fc0 <IsZeroBig>:
 8006fc0:	8883      	ldrh	r3, [r0, #4]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d001      	beq.n	8006fca <IsZeroBig+0xa>
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	4770      	bx	lr
 8006fca:	6803      	ldr	r3, [r0, #0]
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	f1d0 0001 	rsbs	r0, r0, #1
 8006fd2:	bf38      	it	cc
 8006fd4:	2000      	movcc	r0, #0
 8006fd6:	4770      	bx	lr

08006fd8 <SetZeroBig>:
 8006fd8:	2300      	movs	r3, #0
 8006fda:	b430      	push	{r4, r5}
 8006fdc:	6804      	ldr	r4, [r0, #0]
 8006fde:	71c3      	strb	r3, [r0, #7]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	461d      	mov	r5, r3
 8006fe4:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
 8006fe8:	7981      	ldrb	r1, [r0, #6]
 8006fea:	3301      	adds	r3, #1
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3101      	adds	r1, #1
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	d3f6      	bcc.n	8006fe4 <SetZeroBig+0xc>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	8083      	strh	r3, [r0, #4]
 8006ffa:	bc30      	pop	{r4, r5}
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <CompareBig>:
 8007000:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8007004:	79c2      	ldrb	r2, [r0, #7]
 8007006:	79cb      	ldrb	r3, [r1, #7]
 8007008:	4293      	cmp	r3, r2
 800700a:	b254      	sxtb	r4, r2
 800700c:	d005      	beq.n	800701a <CompareBig+0x1a>
 800700e:	2c01      	cmp	r4, #1
 8007010:	d036      	beq.n	8007080 <CompareBig+0x80>
 8007012:	2003      	movs	r0, #3
 8007014:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8007018:	4770      	bx	lr
 800701a:	8884      	ldrh	r4, [r0, #4]
 800701c:	888f      	ldrh	r7, [r1, #4]
 800701e:	42bc      	cmp	r4, r7
 8007020:	d820      	bhi.n	8007064 <CompareBig+0x64>
 8007022:	d327      	bcc.n	8007074 <CompareBig+0x74>
 8007024:	f8d0 8000 	ldr.w	r8, [r0]
 8007028:	f8d1 c000 	ldr.w	ip, [r1]
 800702c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 8007030:	eb0c 0187 	add.w	r1, ip, r7, lsl #2
 8007034:	2301      	movs	r3, #1
 8007036:	e004      	b.n	8007042 <CompareBig+0x42>
 8007038:	42a3      	cmp	r3, r4
 800703a:	d808      	bhi.n	800704e <CompareBig+0x4e>
 800703c:	3301      	adds	r3, #1
 800703e:	42a3      	cmp	r3, r4
 8007040:	d805      	bhi.n	800704e <CompareBig+0x4e>
 8007042:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8007046:	f851 5d04 	ldr.w	r5, [r1, #-4]!
 800704a:	42ae      	cmp	r6, r5
 800704c:	d0f4      	beq.n	8007038 <CompareBig+0x38>
 800704e:	1e59      	subs	r1, r3, #1
 8007050:	42a1      	cmp	r1, r4
 8007052:	d01d      	beq.n	8007090 <CompareBig+0x90>
 8007054:	1ae4      	subs	r4, r4, r3
 8007056:	1afb      	subs	r3, r7, r3
 8007058:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 800705c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8007060:	4299      	cmp	r1, r3
 8007062:	d907      	bls.n	8007074 <CompareBig+0x74>
 8007064:	2a00      	cmp	r2, #0
 8007066:	bf0c      	ite	eq
 8007068:	2002      	moveq	r0, #2
 800706a:	f06f 0001 	mvnne.w	r0, #1
 800706e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8007072:	4770      	bx	lr
 8007074:	2a00      	cmp	r2, #0
 8007076:	bf0c      	ite	eq
 8007078:	f04f 30ff 	moveq.w	r0, #4294967295
 800707c:	2001      	movne	r0, #1
 800707e:	e7c9      	b.n	8007014 <CompareBig+0x14>
 8007080:	2b00      	cmp	r3, #0
 8007082:	bf0c      	ite	eq
 8007084:	f06f 0002 	mvneq.w	r0, #2
 8007088:	2003      	movne	r0, #3
 800708a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800708e:	4770      	bx	lr
 8007090:	2000      	movs	r0, #0
 8007092:	e7bf      	b.n	8007014 <CompareBig+0x14>

08007094 <CountBits>:
 8007094:	b510      	push	{r4, lr}
 8007096:	4604      	mov	r4, r0
 8007098:	f7ff ff92 	bl	8006fc0 <IsZeroBig>
 800709c:	b9d8      	cbnz	r0, 80070d6 <CountBits+0x42>
 800709e:	88a0      	ldrh	r0, [r4, #4]
 80070a0:	6822      	ldr	r2, [r4, #0]
 80070a2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80070a6:	3b01      	subs	r3, #1
 80070a8:	0140      	lsls	r0, r0, #5
 80070aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80070ae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80070b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070b6:	d00d      	beq.n	80070d4 <CountBits+0x40>
 80070b8:	f1a0 0420 	sub.w	r4, r0, #32
 80070bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070c0:	e001      	b.n	80070c6 <CountBits+0x32>
 80070c2:	42a0      	cmp	r0, r4
 80070c4:	d009      	beq.n	80070da <CountBits+0x46>
 80070c6:	085b      	lsrs	r3, r3, #1
 80070c8:	ea01 0203 	and.w	r2, r1, r3
 80070cc:	4293      	cmp	r3, r2
 80070ce:	f100 30ff 	add.w	r0, r0, #4294967295
 80070d2:	d1f6      	bne.n	80070c2 <CountBits+0x2e>
 80070d4:	bd10      	pop	{r4, pc}
 80070d6:	2001      	movs	r0, #1
 80070d8:	bd10      	pop	{r4, pc}
 80070da:	bd10      	pop	{r4, pc}

080070dc <CountBytes>:
 80070dc:	b510      	push	{r4, lr}
 80070de:	4604      	mov	r4, r0
 80070e0:	f7ff ff6e 	bl	8006fc0 <IsZeroBig>
 80070e4:	2801      	cmp	r0, #1
 80070e6:	d01a      	beq.n	800711e <CountBytes+0x42>
 80070e8:	88a0      	ldrh	r0, [r4, #4]
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	0080      	lsls	r0, r0, #2
 80070ee:	4403      	add	r3, r0
 80070f0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80070f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070f8:	d111      	bne.n	800711e <CountBytes+0x42>
 80070fa:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80070fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8007102:	d10b      	bne.n	800711c <CountBytes+0x40>
 8007104:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8007108:	f1a0 0202 	sub.w	r2, r0, #2
 800710c:	d106      	bne.n	800711c <CountBytes+0x40>
 800710e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007112:	f1a0 0203 	sub.w	r2, r0, #3
 8007116:	d101      	bne.n	800711c <CountBytes+0x40>
 8007118:	3804      	subs	r0, #4
 800711a:	bd10      	pop	{r4, pc}
 800711c:	4610      	mov	r0, r2
 800711e:	bd10      	pop	{r4, pc}

08007120 <W8_to_Big>:
 8007120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	2a00      	cmp	r2, #0
 8007126:	d072      	beq.n	800720e <W8_to_Big+0xee>
 8007128:	2800      	cmp	r0, #0
 800712a:	d06f      	beq.n	800720c <W8_to_Big+0xec>
 800712c:	1ccc      	adds	r4, r1, #3
 800712e:	7993      	ldrb	r3, [r2, #6]
 8007130:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8007134:	4563      	cmp	r3, ip
 8007136:	d203      	bcs.n	8007140 <W8_to_Big+0x20>
 8007138:	f241 40b5 	movw	r0, #5301	; 0x14b5
 800713c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007140:	2900      	cmp	r1, #0
 8007142:	d068      	beq.n	8007216 <W8_to_Big+0xf6>
 8007144:	4688      	mov	r8, r1
 8007146:	bfb8      	it	lt
 8007148:	46a0      	movlt	r8, r4
 800714a:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800714e:	f1b8 0f00 	cmp.w	r8, #0
 8007152:	6817      	ldr	r7, [r2, #0]
 8007154:	bfd8      	it	le
 8007156:	2400      	movle	r4, #0
 8007158:	dd1a      	ble.n	8007190 <W8_to_Big+0x70>
 800715a:	1843      	adds	r3, r0, r1
 800715c:	463c      	mov	r4, r7
 800715e:	eb07 0a88 	add.w	sl, r7, r8, lsl #2
 8007162:	f813 5c03 	ldrb.w	r5, [r3, #-3]
 8007166:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 800716a:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 800716e:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 8007172:	042d      	lsls	r5, r5, #16
 8007174:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8007178:	ea45 0509 	orr.w	r5, r5, r9
 800717c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8007180:	f844 5b04 	str.w	r5, [r4], #4
 8007184:	4554      	cmp	r4, sl
 8007186:	f1a3 0304 	sub.w	r3, r3, #4
 800718a:	d1ea      	bne.n	8007162 <W8_to_Big+0x42>
 800718c:	7993      	ldrb	r3, [r2, #6]
 800718e:	4644      	mov	r4, r8
 8007190:	429c      	cmp	r4, r3
 8007192:	da0b      	bge.n	80071ac <W8_to_Big+0x8c>
 8007194:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 8007198:	3d01      	subs	r5, #1
 800719a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800719e:	2300      	movs	r3, #0
 80071a0:	f845 3f04 	str.w	r3, [r5, #4]!
 80071a4:	7996      	ldrb	r6, [r2, #6]
 80071a6:	3401      	adds	r4, #1
 80071a8:	42b4      	cmp	r4, r6
 80071aa:	dbf9      	blt.n	80071a0 <W8_to_Big+0x80>
 80071ac:	f011 0103 	ands.w	r1, r1, #3
 80071b0:	d010      	beq.n	80071d4 <W8_to_Big+0xb4>
 80071b2:	7803      	ldrb	r3, [r0, #0]
 80071b4:	f847 3028 	str.w	r3, [r7, r8, lsl #2]
 80071b8:	2901      	cmp	r1, #1
 80071ba:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 80071be:	dd09      	ble.n	80071d4 <W8_to_Big+0xb4>
 80071c0:	1e44      	subs	r4, r0, #1
 80071c2:	4421      	add	r1, r4
 80071c4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80071c8:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80071cc:	4288      	cmp	r0, r1
 80071ce:	f8c8 3000 	str.w	r3, [r8]
 80071d2:	d1f7      	bne.n	80071c4 <W8_to_Big+0xa4>
 80071d4:	f10c 4180 	add.w	r1, ip, #1073741824	; 0x40000000
 80071d8:	3901      	subs	r1, #1
 80071da:	fa1f f38c 	uxth.w	r3, ip
 80071de:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80071e2:	8093      	strh	r3, [r2, #4]
 80071e4:	b971      	cbnz	r1, 8007204 <W8_to_Big+0xe4>
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d102      	bne.n	80071f0 <W8_to_Big+0xd0>
 80071ea:	e00b      	b.n	8007204 <W8_to_Big+0xe4>
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d008      	beq.n	8007202 <W8_to_Big+0xe2>
 80071f0:	3b01      	subs	r3, #1
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80071f8:	3901      	subs	r1, #1
 80071fa:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80071fe:	2900      	cmp	r1, #0
 8007200:	d0f4      	beq.n	80071ec <W8_to_Big+0xcc>
 8007202:	8093      	strh	r3, [r2, #4]
 8007204:	2000      	movs	r0, #0
 8007206:	71d0      	strb	r0, [r2, #7]
 8007208:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720c:	b119      	cbz	r1, 8007216 <W8_to_Big+0xf6>
 800720e:	f241 40b8 	movw	r0, #5304	; 0x14b8
 8007212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007216:	4610      	mov	r0, r2
 8007218:	f7ff fede 	bl	8006fd8 <SetZeroBig>
 800721c:	2000      	movs	r0, #0
 800721e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007222:	bf00      	nop

08007224 <Big_to_W8>:
 8007224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007228:	4691      	mov	r9, r2
 800722a:	4688      	mov	r8, r1
 800722c:	4605      	mov	r5, r0
 800722e:	f7ff ff55 	bl	80070dc <CountBytes>
 8007232:	2800      	cmp	r0, #0
 8007234:	4602      	mov	r2, r0
 8007236:	bfb8      	it	lt
 8007238:	1cc2      	addlt	r2, r0, #3
 800723a:	1092      	asrs	r2, r2, #2
 800723c:	2a00      	cmp	r2, #0
 800723e:	dd2f      	ble.n	80072a0 <Big_to_W8+0x7c>
 8007240:	eb08 0400 	add.w	r4, r8, r0
 8007244:	0097      	lsls	r7, r2, #2
 8007246:	2300      	movs	r3, #0
 8007248:	682e      	ldr	r6, [r5, #0]
 800724a:	58f1      	ldr	r1, [r6, r3]
 800724c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007250:	682e      	ldr	r6, [r5, #0]
 8007252:	58f1      	ldr	r1, [r6, r3]
 8007254:	0a09      	lsrs	r1, r1, #8
 8007256:	f804 1c02 	strb.w	r1, [r4, #-2]
 800725a:	682e      	ldr	r6, [r5, #0]
 800725c:	58f1      	ldr	r1, [r6, r3]
 800725e:	0c09      	lsrs	r1, r1, #16
 8007260:	f804 1c03 	strb.w	r1, [r4, #-3]
 8007264:	682e      	ldr	r6, [r5, #0]
 8007266:	58f6      	ldr	r6, [r6, r3]
 8007268:	3304      	adds	r3, #4
 800726a:	0e36      	lsrs	r6, r6, #24
 800726c:	42bb      	cmp	r3, r7
 800726e:	f804 6d04 	strb.w	r6, [r4, #-4]!
 8007272:	d1e9      	bne.n	8007248 <Big_to_W8+0x24>
 8007274:	f010 0303 	ands.w	r3, r0, #3
 8007278:	d009      	beq.n	800728e <Big_to_W8+0x6a>
 800727a:	6829      	ldr	r1, [r5, #0]
 800727c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007280:	4498      	add	r8, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8007288:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800728c:	d1f9      	bne.n	8007282 <Big_to_W8+0x5e>
 800728e:	f1b9 0f00 	cmp.w	r9, #0
 8007292:	d003      	beq.n	800729c <Big_to_W8+0x78>
 8007294:	f8c9 0000 	str.w	r0, [r9]
 8007298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800729c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a0:	2200      	movs	r2, #0
 80072a2:	e7e7      	b.n	8007274 <Big_to_W8+0x50>

080072a4 <FastMulInnerBase>:
 80072a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a8:	8882      	ldrh	r2, [r0, #4]
 80072aa:	7983      	ldrb	r3, [r0, #6]
 80072ac:	440a      	add	r2, r1
 80072ae:	429a      	cmp	r2, r3
 80072b0:	4604      	mov	r4, r0
 80072b2:	460d      	mov	r5, r1
 80072b4:	dd04      	ble.n	80072c0 <FastMulInnerBase+0x1c>
 80072b6:	f241 46b5 	movw	r6, #5301	; 0x14b5
 80072ba:	4630      	mov	r0, r6
 80072bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c0:	f7ff fe7e 	bl	8006fc0 <IsZeroBig>
 80072c4:	4606      	mov	r6, r0
 80072c6:	b9e8      	cbnz	r0, 8007304 <FastMulInnerBase+0x60>
 80072c8:	2d00      	cmp	r5, #0
 80072ca:	d0f6      	beq.n	80072ba <FastMulInnerBase+0x16>
 80072cc:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80072d0:	6820      	ldr	r0, [r4, #0]
 80072d2:	f1b8 0f01 	cmp.w	r8, #1
 80072d6:	ea4f 0285 	mov.w	r2, r5, lsl #2
 80072da:	d007      	beq.n	80072ec <FastMulInnerBase+0x48>
 80072dc:	eb00 0388 	add.w	r3, r0, r8, lsl #2
 80072e0:	1d07      	adds	r7, r0, #4
 80072e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072e6:	5099      	str	r1, [r3, r2]
 80072e8:	42bb      	cmp	r3, r7
 80072ea:	d1fa      	bne.n	80072e2 <FastMulInnerBase+0x3e>
 80072ec:	2d00      	cmp	r5, #0
 80072ee:	6803      	ldr	r3, [r0, #0]
 80072f0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 80072f4:	bf08      	it	eq
 80072f6:	2204      	moveq	r2, #4
 80072f8:	2100      	movs	r1, #0
 80072fa:	4445      	add	r5, r8
 80072fc:	f001 fa08 	bl	8008710 <memset>
 8007300:	80a5      	strh	r5, [r4, #4]
 8007302:	e7da      	b.n	80072ba <FastMulInnerBase+0x16>
 8007304:	2600      	movs	r6, #0
 8007306:	e7d8      	b.n	80072ba <FastMulInnerBase+0x16>

08007308 <LeftShift>:
 8007308:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800730c:	4681      	mov	r9, r0
 800730e:	b3b1      	cbz	r1, 800737e <LeftShift+0x76>
 8007310:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8007314:	f8d0 c000 	ldr.w	ip, [r0]
 8007318:	f108 4a80 	add.w	sl, r8, #1073741824	; 0x40000000
 800731c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007320:	f1c1 0720 	rsb	r7, r1, #32
 8007324:	f85c 502a 	ldr.w	r5, [ip, sl, lsl #2]
 8007328:	f1b8 0301 	subs.w	r3, r8, #1
 800732c:	eb0c 0a8a 	add.w	sl, ip, sl, lsl #2
 8007330:	fa25 f007 	lsr.w	r0, r5, r7
 8007334:	bf18      	it	ne
 8007336:	4652      	movne	r2, sl
 8007338:	d101      	bne.n	800733e <LeftShift+0x36>
 800733a:	e009      	b.n	8007350 <LeftShift+0x48>
 800733c:	4625      	mov	r5, r4
 800733e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8007342:	408d      	lsls	r5, r1
 8007344:	fa24 f607 	lsr.w	r6, r4, r7
 8007348:	4335      	orrs	r5, r6
 800734a:	3b01      	subs	r3, #1
 800734c:	6055      	str	r5, [r2, #4]
 800734e:	d1f5      	bne.n	800733c <LeftShift+0x34>
 8007350:	f8dc 3000 	ldr.w	r3, [ip]
 8007354:	fa03 f101 	lsl.w	r1, r3, r1
 8007358:	f8cc 1000 	str.w	r1, [ip]
 800735c:	b160      	cbz	r0, 8007378 <LeftShift+0x70>
 800735e:	f899 3006 	ldrb.w	r3, [r9, #6]
 8007362:	f108 0801 	add.w	r8, r8, #1
 8007366:	4598      	cmp	r8, r3
 8007368:	bf97      	itett	ls
 800736a:	f8ca 0004 	strls.w	r0, [sl, #4]
 800736e:	f241 40b5 	movwhi	r0, #5301	; 0x14b5
 8007372:	2000      	movls	r0, #0
 8007374:	f8a9 8004 	strhls.w	r8, [r9, #4]
 8007378:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800737c:	4770      	bx	lr
 800737e:	4608      	mov	r0, r1
 8007380:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop

08007388 <MulBigbyUnInt>:
 8007388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	4684      	mov	ip, r0
 800738e:	460f      	mov	r7, r1
 8007390:	b339      	cbz	r1, 80073e2 <MulBigbyUnInt+0x5a>
 8007392:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8007396:	f8d0 9000 	ldr.w	r9, [r0]
 800739a:	f1b8 0f00 	cmp.w	r8, #0
 800739e:	d01d      	beq.n	80073dc <MulBigbyUnInt+0x54>
 80073a0:	f1a9 0604 	sub.w	r6, r9, #4
 80073a4:	eb06 0188 	add.w	r1, r6, r8, lsl #2
 80073a8:	2200      	movs	r2, #0
 80073aa:	2300      	movs	r3, #0
 80073ac:	6874      	ldr	r4, [r6, #4]
 80073ae:	4692      	mov	sl, r2
 80073b0:	469b      	mov	fp, r3
 80073b2:	fbe7 ab04 	umlal	sl, fp, r7, r4
 80073b6:	f846 af04 	str.w	sl, [r6, #4]!
 80073ba:	428e      	cmp	r6, r1
 80073bc:	465d      	mov	r5, fp
 80073be:	465a      	mov	r2, fp
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	d1f2      	bne.n	80073ac <MulBigbyUnInt+0x24>
 80073c6:	b14d      	cbz	r5, 80073dc <MulBigbyUnInt+0x54>
 80073c8:	f89c 0006 	ldrb.w	r0, [ip, #6]
 80073cc:	f108 0101 	add.w	r1, r8, #1
 80073d0:	4281      	cmp	r1, r0
 80073d2:	d90b      	bls.n	80073ec <MulBigbyUnInt+0x64>
 80073d4:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80073d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	2000      	movs	r0, #0
 80073de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e2:	f7ff fdf9 	bl	8006fd8 <SetZeroBig>
 80073e6:	4638      	mov	r0, r7
 80073e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ec:	f8ac 1004 	strh.w	r1, [ip, #4]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f849 b028 	str.w	fp, [r9, r8, lsl #2]
 80073f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	bf00      	nop

080073fc <Sub_Moduli_Big>:
 80073fc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8007400:	8883      	ldrh	r3, [r0, #4]
 8007402:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8007406:	4692      	mov	sl, r2
 8007408:	7992      	ldrb	r2, [r2, #6]
 800740a:	454b      	cmp	r3, r9
 800740c:	bf2c      	ite	cs
 800740e:	4698      	movcs	r8, r3
 8007410:	46c8      	movcc	r8, r9
 8007412:	3201      	adds	r2, #1
 8007414:	4590      	cmp	r8, r2
 8007416:	d904      	bls.n	8007422 <Sub_Moduli_Big+0x26>
 8007418:	f241 40b5 	movw	r0, #5301	; 0x14b5
 800741c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8007420:	4770      	bx	lr
 8007422:	7982      	ldrb	r2, [r0, #6]
 8007424:	6807      	ldr	r7, [r0, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	bf28      	it	cs
 800742a:	2400      	movcs	r4, #0
 800742c:	d306      	bcc.n	800743c <Sub_Moduli_Big+0x40>
 800742e:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 8007432:	3301      	adds	r3, #1
 8007434:	7982      	ldrb	r2, [r0, #6]
 8007436:	b29b      	uxth	r3, r3
 8007438:	429a      	cmp	r2, r3
 800743a:	d2f8      	bcs.n	800742e <Sub_Moduli_Big+0x32>
 800743c:	798b      	ldrb	r3, [r1, #6]
 800743e:	f8d1 c000 	ldr.w	ip, [r1]
 8007442:	454b      	cmp	r3, r9
 8007444:	d308      	bcc.n	8007458 <Sub_Moduli_Big+0x5c>
 8007446:	464b      	mov	r3, r9
 8007448:	2000      	movs	r0, #0
 800744a:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
 800744e:	3301      	adds	r3, #1
 8007450:	798a      	ldrb	r2, [r1, #6]
 8007452:	b29b      	uxth	r3, r3
 8007454:	429a      	cmp	r2, r3
 8007456:	d2f8      	bcs.n	800744a <Sub_Moduli_Big+0x4e>
 8007458:	2500      	movs	r5, #0
 800745a:	f8da 6000 	ldr.w	r6, [sl]
 800745e:	f109 0901 	add.w	r9, r9, #1
 8007462:	462c      	mov	r4, r5
 8007464:	2200      	movs	r2, #0
 8007466:	2300      	movs	r3, #0
 8007468:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800746c:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 8007470:	3401      	adds	r4, #1
 8007472:	1a40      	subs	r0, r0, r1
 8007474:	eb60 0100 	sbc.w	r1, r0, r0
 8007478:	1880      	adds	r0, r0, r2
 800747a:	b2a4      	uxth	r4, r4
 800747c:	eb41 0103 	adc.w	r1, r1, r3
 8007480:	454c      	cmp	r4, r9
 8007482:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 8007486:	460a      	mov	r2, r1
 8007488:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800748c:	4625      	mov	r5, r4
 800748e:	d3eb      	bcc.n	8007468 <Sub_Moduli_Big+0x6c>
 8007490:	45a0      	cmp	r8, r4
 8007492:	d90f      	bls.n	80074b4 <Sub_Moduli_Big+0xb8>
 8007494:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007498:	f104 0c01 	add.w	ip, r4, #1
 800749c:	1950      	adds	r0, r2, r5
 800749e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 80074a2:	fa1f f48c 	uxth.w	r4, ip
 80074a6:	f143 0100 	adc.w	r1, r3, #0
 80074aa:	45a0      	cmp	r8, r4
 80074ac:	460a      	mov	r2, r1
 80074ae:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80074b2:	d8ef      	bhi.n	8007494 <Sub_Moduli_Big+0x98>
 80074b4:	b132      	cbz	r2, 80074c4 <Sub_Moduli_Big+0xc8>
 80074b6:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80074ba:	3b01      	subs	r3, #1
 80074bc:	f06f 0201 	mvn.w	r2, #1
 80074c0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
 80074c4:	1e63      	subs	r3, r4, #1
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80074cc:	b942      	cbnz	r2, 80074e0 <Sub_Moduli_Big+0xe4>
 80074ce:	b16b      	cbz	r3, 80074ec <Sub_Moduli_Big+0xf0>
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80074d8:	2a00      	cmp	r2, #0
 80074da:	d0f8      	beq.n	80074ce <Sub_Moduli_Big+0xd2>
 80074dc:	1c5c      	adds	r4, r3, #1
 80074de:	b2a4      	uxth	r4, r4
 80074e0:	f8aa 4004 	strh.w	r4, [sl, #4]
 80074e4:	2000      	movs	r0, #0
 80074e6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80074ea:	4770      	bx	lr
 80074ec:	2401      	movs	r4, #1
 80074ee:	f8aa 4004 	strh.w	r4, [sl, #4]
 80074f2:	2000      	movs	r0, #0
 80074f4:	e7f7      	b.n	80074e6 <Sub_Moduli_Big+0xea>
 80074f6:	bf00      	nop

080074f8 <SubBig>:
 80074f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	460d      	mov	r5, r1
 8007500:	ac02      	add	r4, sp, #8
 8007502:	2100      	movs	r1, #0
 8007504:	f890 c006 	ldrb.w	ip, [r0, #6]
 8007508:	f844 1d04 	str.w	r1, [r4, #-4]!
 800750c:	f895 e006 	ldrb.w	lr, [r5, #6]
 8007510:	4606      	mov	r6, r0
 8007512:	4690      	mov	r8, r2
 8007514:	45f4      	cmp	ip, lr
 8007516:	bf2c      	ite	cs
 8007518:	4661      	movcs	r1, ip
 800751a:	4671      	movcc	r1, lr
 800751c:	4620      	mov	r0, r4
 800751e:	461a      	mov	r2, r3
 8007520:	461f      	mov	r7, r3
 8007522:	f7ff fc53 	bl	8006dcc <StAllocBig>
 8007526:	b120      	cbz	r0, 8007532 <SubBig+0x3a>
 8007528:	f240 30ed 	movw	r0, #1005	; 0x3ed
 800752c:	b002      	add	sp, #8
 800752e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007532:	9b01      	ldr	r3, [sp, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	809a      	strh	r2, [r3, #4]
 8007538:	4630      	mov	r0, r6
 800753a:	4629      	mov	r1, r5
 800753c:	f7ff fd60 	bl	8007000 <CompareBig>
 8007540:	3003      	adds	r0, #3
 8007542:	2806      	cmp	r0, #6
 8007544:	d80d      	bhi.n	8007562 <SubBig+0x6a>
 8007546:	e8df f000 	tbb	[pc, r0]
 800754a:	3639      	.short	0x3639
 800754c:	262f3204 	.word	0x262f3204
 8007550:	1d          	.byte	0x1d
 8007551:	00          	.byte	0x00
 8007552:	4628      	mov	r0, r5
 8007554:	4631      	mov	r1, r6
 8007556:	9a01      	ldr	r2, [sp, #4]
 8007558:	f7ff ff50 	bl	80073fc <Sub_Moduli_Big>
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	71da      	strb	r2, [r3, #7]
 8007562:	4640      	mov	r0, r8
 8007564:	2100      	movs	r1, #0
 8007566:	f7ff fc5d 	bl	8006e24 <InitBig>
 800756a:	4641      	mov	r1, r8
 800756c:	9801      	ldr	r0, [sp, #4]
 800756e:	f7ff fc75 	bl	8006e5c <CopyBig>
 8007572:	4639      	mov	r1, r7
 8007574:	4605      	mov	r5, r0
 8007576:	4620      	mov	r0, r4
 8007578:	f7ff fc46 	bl	8006e08 <StFreeBig>
 800757c:	4628      	mov	r0, r5
 800757e:	b002      	add	sp, #8
 8007580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007584:	9a01      	ldr	r2, [sp, #4]
 8007586:	4630      	mov	r0, r6
 8007588:	4629      	mov	r1, r5
 800758a:	f7ff fc9d 	bl	8006ec8 <Add_Moduli_Big>
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	71da      	strb	r2, [r3, #7]
 8007594:	e7e5      	b.n	8007562 <SubBig+0x6a>
 8007596:	4630      	mov	r0, r6
 8007598:	4629      	mov	r1, r5
 800759a:	9a01      	ldr	r2, [sp, #4]
 800759c:	f7ff ff2e 	bl	80073fc <Sub_Moduli_Big>
 80075a0:	9b01      	ldr	r3, [sp, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	71da      	strb	r2, [r3, #7]
 80075a6:	e7dc      	b.n	8007562 <SubBig+0x6a>
 80075a8:	4628      	mov	r0, r5
 80075aa:	4631      	mov	r1, r6
 80075ac:	e7f5      	b.n	800759a <SubBig+0xa2>
 80075ae:	9801      	ldr	r0, [sp, #4]
 80075b0:	f7ff fd12 	bl	8006fd8 <SetZeroBig>
 80075b4:	e7d5      	b.n	8007562 <SubBig+0x6a>
 80075b6:	4630      	mov	r0, r6
 80075b8:	4629      	mov	r1, r5
 80075ba:	e7cc      	b.n	8007556 <SubBig+0x5e>
 80075bc:	9a01      	ldr	r2, [sp, #4]
 80075be:	4630      	mov	r0, r6
 80075c0:	4629      	mov	r1, r5
 80075c2:	f7ff fc81 	bl	8006ec8 <Add_Moduli_Big>
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	71da      	strb	r2, [r3, #7]
 80075cc:	e7c9      	b.n	8007562 <SubBig+0x6a>
 80075ce:	bf00      	nop

080075d0 <MontyInit>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	468b      	mov	fp, r1
 80075d6:	7981      	ldrb	r1, [r0, #6]
 80075d8:	b083      	sub	sp, #12
 80075da:	f10b 0a04 	add.w	sl, fp, #4
 80075de:	4680      	mov	r8, r0
 80075e0:	2300      	movs	r3, #0
 80075e2:	3102      	adds	r1, #2
 80075e4:	4650      	mov	r0, sl
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	4691      	mov	r9, r2
 80075ea:	f7ff fbef 	bl	8006dcc <StAllocBig>
 80075ee:	b128      	cbz	r0, 80075fc <MontyInit+0x2c>
 80075f0:	f240 37ed 	movw	r7, #1005	; 0x3ed
 80075f4:	4638      	mov	r0, r7
 80075f6:	b003      	add	sp, #12
 80075f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fc:	4601      	mov	r1, r0
 80075fe:	f8cb 8000 	str.w	r8, [fp]
 8007602:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007606:	f7ff fc0d 	bl	8006e24 <InitBig>
 800760a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800760e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007612:	f8d8 2000 	ldr.w	r2, [r8]
 8007616:	6819      	ldr	r1, [r3, #0]
 8007618:	3001      	adds	r0, #1
 800761a:	8098      	strh	r0, [r3, #4]
 800761c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007620:	2401      	movs	r4, #1
 8007622:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 8007626:	6812      	ldr	r2, [r2, #0]
 8007628:	261f      	movs	r6, #31
 800762a:	2502      	movs	r5, #2
 800762c:	2703      	movs	r7, #3
 800762e:	fb02 f304 	mul.w	r3, r2, r4
 8007632:	403b      	ands	r3, r7
 8007634:	eb05 0e04 	add.w	lr, r5, r4
 8007638:	42ab      	cmp	r3, r5
 800763a:	bf28      	it	cs
 800763c:	4674      	movcs	r4, lr
 800763e:	007f      	lsls	r7, r7, #1
 8007640:	3e01      	subs	r6, #1
 8007642:	f087 0701 	eor.w	r7, r7, #1
 8007646:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800764a:	d1f0      	bne.n	800762e <MontyInit+0x5e>
 800764c:	4264      	negs	r4, r4
 800764e:	f8cb 4008 	str.w	r4, [fp, #8]
 8007652:	f898 1006 	ldrb.w	r1, [r8, #6]
 8007656:	a801      	add	r0, sp, #4
 8007658:	3101      	adds	r1, #1
 800765a:	464a      	mov	r2, r9
 800765c:	f7ff fbb6 	bl	8006dcc <StAllocBig>
 8007660:	b148      	cbz	r0, 8007676 <MontyInit+0xa6>
 8007662:	4650      	mov	r0, sl
 8007664:	4649      	mov	r1, r9
 8007666:	f7ff fbcf 	bl	8006e08 <StFreeBig>
 800766a:	f240 37ed 	movw	r7, #1005	; 0x3ed
 800766e:	4638      	mov	r0, r7
 8007670:	b003      	add	sp, #12
 8007672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007676:	9901      	ldr	r1, [sp, #4]
 8007678:	4640      	mov	r0, r8
 800767a:	f7ff fbef 	bl	8006e5c <CopyBig>
 800767e:	9801      	ldr	r0, [sp, #4]
 8007680:	f7ff fd08 	bl	8007094 <CountBits>
 8007684:	4240      	negs	r0, r0
 8007686:	f000 051f 	and.w	r5, r0, #31
 800768a:	4629      	mov	r1, r5
 800768c:	9801      	ldr	r0, [sp, #4]
 800768e:	f7ff fe3b 	bl	8007308 <LeftShift>
 8007692:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007696:	9901      	ldr	r1, [sp, #4]
 8007698:	4602      	mov	r2, r0
 800769a:	464b      	mov	r3, r9
 800769c:	f7ff ff2c 	bl	80074f8 <SubBig>
 80076a0:	4607      	mov	r7, r0
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d143      	bne.n	800772e <MontyInit+0x15e>
 80076a6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80076aa:	b35b      	cbz	r3, 8007704 <MontyInit+0x134>
 80076ac:	f8db 0004 	ldr.w	r0, [fp, #4]
 80076b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076b4:	3b01      	subs	r3, #1
 80076b6:	6802      	ldr	r2, [r0, #0]
 80076b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076bc:	2101      	movs	r1, #1
 80076be:	f7ff fdf1 	bl	80072a4 <FastMulInnerBase>
 80076c2:	2c00      	cmp	r4, #0
 80076c4:	d03e      	beq.n	8007744 <MontyInit+0x174>
 80076c6:	9901      	ldr	r1, [sp, #4]
 80076c8:	4640      	mov	r0, r8
 80076ca:	f7ff fbc7 	bl	8006e5c <CopyBig>
 80076ce:	4621      	mov	r1, r4
 80076d0:	9801      	ldr	r0, [sp, #4]
 80076d2:	f7ff fe59 	bl	8007388 <MulBigbyUnInt>
 80076d6:	4629      	mov	r1, r5
 80076d8:	9801      	ldr	r0, [sp, #4]
 80076da:	f7ff fe15 	bl	8007308 <LeftShift>
 80076de:	f8db 0004 	ldr.w	r0, [fp, #4]
 80076e2:	9901      	ldr	r1, [sp, #4]
 80076e4:	4602      	mov	r2, r0
 80076e6:	464b      	mov	r3, r9
 80076e8:	f7ff ff06 	bl	80074f8 <SubBig>
 80076ec:	f8db 2004 	ldr.w	r2, [fp, #4]
 80076f0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076fa:	2c00      	cmp	r4, #0
 80076fc:	d1e3      	bne.n	80076c6 <MontyInit+0xf6>
 80076fe:	3601      	adds	r6, #1
 8007700:	429e      	cmp	r6, r3
 8007702:	d3d3      	bcc.n	80076ac <MontyInit+0xdc>
 8007704:	a801      	add	r0, sp, #4
 8007706:	4649      	mov	r1, r9
 8007708:	f7ff fb7e 	bl	8006e08 <StFreeBig>
 800770c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007710:	4641      	mov	r1, r8
 8007712:	f7ff fc75 	bl	8007000 <CompareBig>
 8007716:	2800      	cmp	r0, #0
 8007718:	dd06      	ble.n	8007728 <MontyInit+0x158>
 800771a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800771e:	4641      	mov	r1, r8
 8007720:	4602      	mov	r2, r0
 8007722:	464b      	mov	r3, r9
 8007724:	f7ff fee8 	bl	80074f8 <SubBig>
 8007728:	f8cb 900c 	str.w	r9, [fp, #12]
 800772c:	e762      	b.n	80075f4 <MontyInit+0x24>
 800772e:	4650      	mov	r0, sl
 8007730:	4649      	mov	r1, r9
 8007732:	f7ff fb69 	bl	8006e08 <StFreeBig>
 8007736:	a801      	add	r0, sp, #4
 8007738:	4649      	mov	r1, r9
 800773a:	f7ff fb65 	bl	8006e08 <StFreeBig>
 800773e:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8007742:	e757      	b.n	80075f4 <MontyInit+0x24>
 8007744:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007748:	e7d9      	b.n	80076fe <MontyInit+0x12e>
 800774a:	bf00      	nop

0800774c <MontyKillR2>:
 800774c:	b508      	push	{r3, lr}
 800774e:	4603      	mov	r3, r0
 8007750:	3004      	adds	r0, #4
 8007752:	68d9      	ldr	r1, [r3, #12]
 8007754:	f7ff fb58 	bl	8006e08 <StFreeBig>
 8007758:	bd08      	pop	{r3, pc}
 800775a:	bf00      	nop

0800775c <MontyKillAll>:
 800775c:	6841      	ldr	r1, [r0, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	b508      	push	{r3, lr}
 8007762:	4603      	mov	r3, r0
 8007764:	6002      	str	r2, [r0, #0]
 8007766:	6082      	str	r2, [r0, #8]
 8007768:	b119      	cbz	r1, 8007772 <MontyKillAll+0x16>
 800776a:	3004      	adds	r0, #4
 800776c:	68d9      	ldr	r1, [r3, #12]
 800776e:	f7ff fb4b 	bl	8006e08 <StFreeBig>
 8007772:	bd08      	pop	{r3, pc}

08007774 <MontyMul>:
 8007774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	b09f      	sub	sp, #124	; 0x7c
 800777a:	9312      	str	r3, [sp, #72]	; 0x48
 800777c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800777e:	921a      	str	r2, [sp, #104]	; 0x68
 8007780:	682c      	ldr	r4, [r5, #0]
 8007782:	ab1e      	add	r3, sp, #120	; 0x78
 8007784:	9315      	str	r3, [sp, #84]	; 0x54
 8007786:	68ab      	ldr	r3, [r5, #8]
 8007788:	88a5      	ldrh	r5, [r4, #4]
 800778a:	9318      	str	r3, [sp, #96]	; 0x60
 800778c:	950a      	str	r5, [sp, #40]	; 0x28
 800778e:	79a3      	ldrb	r3, [r4, #6]
 8007790:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007792:	6824      	ldr	r4, [r4, #0]
 8007794:	9414      	str	r4, [sp, #80]	; 0x50
 8007796:	2400      	movs	r4, #0
 8007798:	f845 4d04 	str.w	r4, [r5, #-4]!
 800779c:	460c      	mov	r4, r1
 800779e:	1c59      	adds	r1, r3, #1
 80077a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077a2:	9515      	str	r5, [sp, #84]	; 0x54
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80077aa:	4605      	mov	r5, r0
 80077ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 80077ae:	f7ff fb0d 	bl	8006dcc <StAllocBig>
 80077b2:	4606      	mov	r6, r0
 80077b4:	b120      	cbz	r0, 80077c0 <MontyMul+0x4c>
 80077b6:	f240 30ed 	movw	r0, #1005	; 0x3ed
 80077ba:	b01f      	add	sp, #124	; 0x7c
 80077bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80077c2:	4631      	mov	r1, r6
 80077c4:	f7ff fb2e 	bl	8006e24 <InitBig>
 80077c8:	88a0      	ldrh	r0, [r4, #4]
 80077ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077cc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80077ce:	941b      	str	r4, [sp, #108]	; 0x6c
 80077d0:	4283      	cmp	r3, r0
 80077d2:	6827      	ldr	r7, [r4, #0]
 80077d4:	d907      	bls.n	80077e6 <MontyMul+0x72>
 80077d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80077d8:	1a1a      	subs	r2, r3, r0
 80077da:	4631      	mov	r1, r6
 80077dc:	0092      	lsls	r2, r2, #2
 80077de:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80077e2:	f000 ff95 	bl	8008710 <memset>
 80077e6:	88ab      	ldrh	r3, [r5, #4]
 80077e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077ea:	429c      	cmp	r4, r3
 80077ec:	f240 80c5 	bls.w	800797a <MontyMul+0x206>
 80077f0:	6828      	ldr	r0, [r5, #0]
 80077f2:	1ae2      	subs	r2, r4, r3
 80077f4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80077f8:	0092      	lsls	r2, r2, #2
 80077fa:	2100      	movs	r1, #0
 80077fc:	f000 ff88 	bl	8008710 <memset>
 8007800:	6829      	ldr	r1, [r5, #0]
 8007802:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007804:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 8007808:	00ab      	lsls	r3, r5, #2
 800780a:	3801      	subs	r0, #1
 800780c:	1f1a      	subs	r2, r3, #4
 800780e:	0080      	lsls	r0, r0, #2
 8007810:	3904      	subs	r1, #4
 8007812:	18ba      	adds	r2, r7, r2
 8007814:	18fb      	adds	r3, r7, r3
 8007816:	9007      	str	r0, [sp, #28]
 8007818:	2000      	movs	r0, #0
 800781a:	9116      	str	r1, [sp, #88]	; 0x58
 800781c:	9219      	str	r2, [sp, #100]	; 0x64
 800781e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007820:	900b      	str	r0, [sp, #44]	; 0x2c
 8007822:	46bc      	mov	ip, r7
 8007824:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007826:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007828:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800782c:	9106      	str	r1, [sp, #24]
 800782e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007830:	6821      	ldr	r1, [r4, #0]
 8007832:	9806      	ldr	r0, [sp, #24]
 8007834:	f8dc 2000 	ldr.w	r2, [ip]
 8007838:	682c      	ldr	r4, [r5, #0]
 800783a:	9316      	str	r3, [sp, #88]	; 0x58
 800783c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800783e:	2300      	movs	r3, #0
 8007840:	fbe1 2300 	umlal	r2, r3, r1, r0
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	2100      	movs	r1, #0
 800784a:	fb02 fe05 	mul.w	lr, r2, r5
 800784e:	4010      	ands	r0, r2
 8007850:	4019      	ands	r1, r3
 8007852:	fbe4 010e 	umlal	r0, r1, r4, lr
 8007856:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007858:	2c01      	cmp	r4, #1
 800785a:	d02c      	beq.n	80078b6 <MontyMul+0x142>
 800785c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800785e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007860:	4666      	mov	r6, ip
 8007862:	2400      	movs	r4, #0
 8007864:	469b      	mov	fp, r3
 8007866:	f04f 0900 	mov.w	r9, #0
 800786a:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800786e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8007872:	9104      	str	r1, [sp, #16]
 8007874:	f8cd 9014 	str.w	r9, [sp, #20]
 8007878:	9303      	str	r3, [sp, #12]
 800787a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800787e:	eb1b 0a02 	adds.w	sl, fp, r2
 8007882:	9a03      	ldr	r2, [sp, #12]
 8007884:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8007888:	fbee 0102 	umlal	r0, r1, lr, r2
 800788c:	e9cd 0100 	strd	r0, r1, [sp]
 8007890:	9806      	ldr	r0, [sp, #24]
 8007892:	9a07      	ldr	r2, [sp, #28]
 8007894:	f149 0b00 	adc.w	fp, r9, #0
 8007898:	fbe0 ab03 	umlal	sl, fp, r0, r3
 800789c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078a0:	eb10 000a 	adds.w	r0, r0, sl
 80078a4:	f84c 0004 	str.w	r0, [ip, r4]
 80078a8:	f104 0404 	add.w	r4, r4, #4
 80078ac:	f141 0100 	adc.w	r1, r1, #0
 80078b0:	4294      	cmp	r4, r2
 80078b2:	d1d8      	bne.n	8007866 <MontyMul+0xf2>
 80078b4:	465b      	mov	r3, fp
 80078b6:	2500      	movs	r5, #0
 80078b8:	9308      	str	r3, [sp, #32]
 80078ba:	9509      	str	r5, [sp, #36]	; 0x24
 80078bc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80078be:	910c      	str	r1, [sp, #48]	; 0x30
 80078c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	950d      	str	r5, [sp, #52]	; 0x34
 80078c8:	18c0      	adds	r0, r0, r3
 80078ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078ce:	f141 0100 	adc.w	r1, r1, #0
 80078d2:	9110      	str	r1, [sp, #64]	; 0x40
 80078d4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80078d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80078d8:	1812      	adds	r2, r2, r0
 80078da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80078dc:	600a      	str	r2, [r1, #0]
 80078de:	f143 0300 	adc.w	r3, r3, #0
 80078e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078e4:	930e      	str	r3, [sp, #56]	; 0x38
 80078e6:	9511      	str	r5, [sp, #68]	; 0x44
 80078e8:	4403      	add	r3, r0
 80078ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f0:	3501      	adds	r5, #1
 80078f2:	42ab      	cmp	r3, r5
 80078f4:	950b      	str	r5, [sp, #44]	; 0x2c
 80078f6:	d895      	bhi.n	8007824 <MontyMul+0xb0>
 80078f8:	4667      	mov	r7, ip
 80078fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80078fc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80078fe:	1c6b      	adds	r3, r5, #1
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b01      	cmp	r3, #1
 8007904:	80a3      	strh	r3, [r4, #4]
 8007906:	d915      	bls.n	8007934 <MontyMul+0x1c0>
 8007908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800790c:	3b01      	subs	r3, #1
 800790e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8007912:	b97b      	cbnz	r3, 8007934 <MontyMul+0x1c0>
 8007914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007916:	e005      	b.n	8007924 <MontyMul+0x1b0>
 8007918:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800791c:	1e59      	subs	r1, r3, #1
 800791e:	b289      	uxth	r1, r1
 8007920:	bb12      	cbnz	r2, 8007968 <MontyMul+0x1f4>
 8007922:	460b      	mov	r3, r1
 8007924:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8007928:	2b01      	cmp	r3, #1
 800792a:	f102 32ff 	add.w	r2, r2, #4294967295
 800792e:	d1f3      	bne.n	8007918 <MontyMul+0x1a4>
 8007930:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007932:	80ab      	strh	r3, [r5, #4]
 8007934:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007936:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007938:	6821      	ldr	r1, [r4, #0]
 800793a:	f7ff fb61 	bl	8007000 <CompareBig>
 800793e:	2800      	cmp	r0, #0
 8007940:	db15      	blt.n	800796e <MontyMul+0x1fa>
 8007942:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007944:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007946:	6829      	ldr	r1, [r5, #0]
 8007948:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800794a:	f7ff fd57 	bl	80073fc <Sub_Moduli_Big>
 800794e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007950:	2300      	movs	r3, #0
 8007952:	4604      	mov	r4, r0
 8007954:	71eb      	strb	r3, [r5, #7]
 8007956:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007958:	9815      	ldr	r0, [sp, #84]	; 0x54
 800795a:	68d9      	ldr	r1, [r3, #12]
 800795c:	f7ff fa54 	bl	8006e08 <StFreeBig>
 8007960:	4620      	mov	r0, r4
 8007962:	b01f      	add	sp, #124	; 0x7c
 8007964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007968:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800796a:	80a3      	strh	r3, [r4, #4]
 800796c:	e7e2      	b.n	8007934 <MontyMul+0x1c0>
 800796e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007970:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007972:	f7ff fa73 	bl	8006e5c <CopyBig>
 8007976:	4604      	mov	r4, r0
 8007978:	e7ed      	b.n	8007956 <MontyMul+0x1e2>
 800797a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0bc      	beq.n	80078fa <MontyMul+0x186>
 8007980:	e73e      	b.n	8007800 <MontyMul+0x8c>
 8007982:	bf00      	nop

08007984 <MontyExit>:
 8007984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007986:	b083      	sub	sp, #12
 8007988:	ac02      	add	r4, sp, #8
 800798a:	2300      	movs	r3, #0
 800798c:	4606      	mov	r6, r0
 800798e:	f844 3d04 	str.w	r3, [r4, #-4]!
 8007992:	4615      	mov	r5, r2
 8007994:	460f      	mov	r7, r1
 8007996:	4620      	mov	r0, r4
 8007998:	79b1      	ldrb	r1, [r6, #6]
 800799a:	68d2      	ldr	r2, [r2, #12]
 800799c:	f7ff fa16 	bl	8006dcc <StAllocBig>
 80079a0:	b118      	cbz	r0, 80079aa <MontyExit+0x26>
 80079a2:	f240 30ed 	movw	r0, #1005	; 0x3ed
 80079a6:	b003      	add	sp, #12
 80079a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079aa:	9801      	ldr	r0, [sp, #4]
 80079ac:	2101      	movs	r1, #1
 80079ae:	f7ff fa39 	bl	8006e24 <InitBig>
 80079b2:	463a      	mov	r2, r7
 80079b4:	9901      	ldr	r1, [sp, #4]
 80079b6:	462b      	mov	r3, r5
 80079b8:	4630      	mov	r0, r6
 80079ba:	f7ff fedb 	bl	8007774 <MontyMul>
 80079be:	68e9      	ldr	r1, [r5, #12]
 80079c0:	4606      	mov	r6, r0
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff fa20 	bl	8006e08 <StFreeBig>
 80079c8:	4630      	mov	r0, r6
 80079ca:	b003      	add	sp, #12
 80079cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ce:	bf00      	nop

080079d0 <ModularExpSlidWin>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	460f      	mov	r7, r1
 80079d6:	8889      	ldrh	r1, [r1, #4]
 80079d8:	b091      	sub	sp, #68	; 0x44
 80079da:	2901      	cmp	r1, #1
 80079dc:	4681      	mov	r9, r0
 80079de:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80079e0:	4616      	mov	r6, r2
 80079e2:	469a      	mov	sl, r3
 80079e4:	f240 80d0 	bls.w	8007b88 <ModularExpSlidWin+0x1b8>
 80079e8:	f06f 0108 	mvn.w	r1, #8
 80079ec:	2308      	movs	r3, #8
 80079ee:	9106      	str	r1, [sp, #24]
 80079f0:	2210      	movs	r2, #16
 80079f2:	2104      	movs	r1, #4
 80079f4:	469c      	mov	ip, r3
 80079f6:	9205      	str	r2, [sp, #20]
 80079f8:	f04f 0820 	mov.w	r8, #32
 80079fc:	f04f 0b03 	mov.w	fp, #3
 8007a00:	9104      	str	r1, [sp, #16]
 8007a02:	79b2      	ldrb	r2, [r6, #6]
 8007a04:	88e5      	ldrh	r5, [r4, #6]
 8007a06:	00d1      	lsls	r1, r2, #3
 8007a08:	0092      	lsls	r2, r2, #2
 8007a0a:	311c      	adds	r1, #28
 8007a0c:	3211      	adds	r2, #17
 8007a0e:	fb02 1303 	mla	r3, r2, r3, r1
 8007a12:	88a1      	ldrh	r1, [r4, #4]
 8007a14:	442b      	add	r3, r5
 8007a16:	4299      	cmp	r1, r3
 8007a18:	da05      	bge.n	8007a26 <ModularExpSlidWin+0x56>
 8007a1a:	f240 35ed 	movw	r5, #1005	; 0x3ed
 8007a1e:	4628      	mov	r0, r5
 8007a20:	b011      	add	sp, #68	; 0x44
 8007a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a26:	6822      	ldr	r2, [r4, #0]
 8007a28:	9203      	str	r2, [sp, #12]
 8007a2a:	eb08 0305 	add.w	r3, r8, r5
 8007a2e:	80e3      	strh	r3, [r4, #6]
 8007a30:	1953      	adds	r3, r2, r5
 8007a32:	9307      	str	r3, [sp, #28]
 8007a34:	d0f1      	beq.n	8007a1a <ModularExpSlidWin+0x4a>
 8007a36:	a90c      	add	r1, sp, #48	; 0x30
 8007a38:	4630      	mov	r0, r6
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	f8cd c004 	str.w	ip, [sp, #4]
 8007a40:	f7ff fdc6 	bl	80075d0 <MontyInit>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d1e8      	bne.n	8007a1a <ModularExpSlidWin+0x4a>
 8007a48:	ab0c      	add	r3, sp, #48	; 0x30
 8007a4a:	4648      	mov	r0, r9
 8007a4c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a4e:	464a      	mov	r2, r9
 8007a50:	f7ff fe90 	bl	8007774 <MontyMul>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d1df      	bne.n	8007a1a <ModularExpSlidWin+0x4a>
 8007a5a:	a80c      	add	r0, sp, #48	; 0x30
 8007a5c:	9302      	str	r3, [sp, #8]
 8007a5e:	f7ff fe75 	bl	800774c <MontyKillR2>
 8007a62:	9b02      	ldr	r3, [sp, #8]
 8007a64:	9308      	str	r3, [sp, #32]
 8007a66:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007a6a:	9b07      	ldr	r3, [sp, #28]
 8007a6c:	970b      	str	r7, [sp, #44]	; 0x2c
 8007a6e:	9f08      	ldr	r7, [sp, #32]
 8007a70:	9509      	str	r5, [sp, #36]	; 0x24
 8007a72:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007a76:	4665      	mov	r5, ip
 8007a78:	4698      	mov	r8, r3
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	79b1      	ldrb	r1, [r6, #6]
 8007a7e:	4622      	mov	r2, r4
 8007a80:	3701      	adds	r7, #1
 8007a82:	f108 0804 	add.w	r8, r8, #4
 8007a86:	f7ff f9a1 	bl	8006dcc <StAllocBig>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d1c5      	bne.n	8007a1a <ModularExpSlidWin+0x4a>
 8007a8e:	42af      	cmp	r7, r5
 8007a90:	dbf3      	blt.n	8007a7a <ModularExpSlidWin+0xaa>
 8007a92:	4602      	mov	r2, r0
 8007a94:	46ac      	mov	ip, r5
 8007a96:	4611      	mov	r1, r2
 8007a98:	4650      	mov	r0, sl
 8007a9a:	9202      	str	r2, [sp, #8]
 8007a9c:	f8cd c004 	str.w	ip, [sp, #4]
 8007aa0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007aa2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8007aa6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007aa8:	f7ff f9bc 	bl	8006e24 <InitBig>
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	4648      	mov	r0, r9
 8007ab0:	5959      	ldr	r1, [r3, r5]
 8007ab2:	f7ff f9d3 	bl	8006e5c <CopyBig>
 8007ab6:	9a02      	ldr	r2, [sp, #8]
 8007ab8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007abc:	f1bb 0f00 	cmp.w	fp, #0
 8007ac0:	d013      	beq.n	8007aea <ModularExpSlidWin+0x11a>
 8007ac2:	4623      	mov	r3, r4
 8007ac4:	9e07      	ldr	r6, [sp, #28]
 8007ac6:	f8cd c00c 	str.w	ip, [sp, #12]
 8007aca:	4614      	mov	r4, r2
 8007acc:	461d      	mov	r5, r3
 8007ace:	6830      	ldr	r0, [r6, #0]
 8007ad0:	ab0c      	add	r3, sp, #48	; 0x30
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	3401      	adds	r4, #1
 8007ad8:	f7ff fe4c 	bl	8007774 <MontyMul>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d19c      	bne.n	8007a1a <ModularExpSlidWin+0x4a>
 8007ae0:	455c      	cmp	r4, fp
 8007ae2:	d1f4      	bne.n	8007ace <ModularExpSlidWin+0xfe>
 8007ae4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007ae8:	462c      	mov	r4, r5
 8007aea:	f1bc 0f01 	cmp.w	ip, #1
 8007aee:	d010      	beq.n	8007b12 <ModularExpSlidWin+0x142>
 8007af0:	9907      	ldr	r1, [sp, #28]
 8007af2:	2601      	movs	r6, #1
 8007af4:	1f0d      	subs	r5, r1, #4
 8007af6:	46e3      	mov	fp, ip
 8007af8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8007afc:	4649      	mov	r1, r9
 8007afe:	686a      	ldr	r2, [r5, #4]
 8007b00:	ab0c      	add	r3, sp, #48	; 0x30
 8007b02:	3601      	adds	r6, #1
 8007b04:	f7ff fe36 	bl	8007774 <MontyMul>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d186      	bne.n	8007a1a <ModularExpSlidWin+0x4a>
 8007b0c:	455e      	cmp	r6, fp
 8007b0e:	d1f3      	bne.n	8007af8 <ModularExpSlidWin+0x128>
 8007b10:	46dc      	mov	ip, fp
 8007b12:	88bb      	ldrh	r3, [r7, #4]
 8007b14:	f8cd c004 	str.w	ip, [sp, #4]
 8007b18:	2600      	movs	r6, #0
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	4648      	mov	r0, r9
 8007b1e:	4651      	mov	r1, sl
 8007b20:	9603      	str	r6, [sp, #12]
 8007b22:	9308      	str	r3, [sp, #32]
 8007b24:	f7ff f99a 	bl	8006e5c <CopyBig>
 8007b28:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007b2c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8007b30:	4635      	mov	r5, r6
 8007b32:	46b4      	mov	ip, r6
 8007b34:	940a      	str	r4, [sp, #40]	; 0x28
 8007b36:	4634      	mov	r4, r6
 8007b38:	9e04      	ldr	r6, [sp, #16]
 8007b3a:	f04f 0b01 	mov.w	fp, #1
 8007b3e:	f1bb 0b01 	subs.w	fp, fp, #1
 8007b42:	d109      	bne.n	8007b58 <ModularExpSlidWin+0x188>
 8007b44:	9a08      	ldr	r2, [sp, #32]
 8007b46:	1c53      	adds	r3, r2, #1
 8007b48:	d05f      	beq.n	8007c0a <ModularExpSlidWin+0x23a>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007b50:	3a01      	subs	r2, #1
 8007b52:	f04f 0b20 	mov.w	fp, #32
 8007b56:	9208      	str	r2, [sp, #32]
 8007b58:	0fe3      	lsrs	r3, r4, #31
 8007b5a:	0064      	lsls	r4, r4, #1
 8007b5c:	f1bc 0f00 	cmp.w	ip, #0
 8007b60:	d01f      	beq.n	8007ba2 <ModularExpSlidWin+0x1d2>
 8007b62:	f1bc 0f01 	cmp.w	ip, #1
 8007b66:	d101      	bne.n	8007b6c <ModularExpSlidWin+0x19c>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d040      	beq.n	8007bee <ModularExpSlidWin+0x21e>
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	9903      	ldr	r1, [sp, #12]
 8007b70:	1b72      	subs	r2, r6, r5
 8007b72:	4093      	lsls	r3, r2
 8007b74:	4319      	orrs	r1, r3
 8007b76:	42b5      	cmp	r5, r6
 8007b78:	9103      	str	r1, [sp, #12]
 8007b7a:	d019      	beq.n	8007bb0 <ModularExpSlidWin+0x1e0>
 8007b7c:	f1bb 0b01 	subs.w	fp, fp, #1
 8007b80:	f04f 0c02 	mov.w	ip, #2
 8007b84:	d1e8      	bne.n	8007b58 <ModularExpSlidWin+0x188>
 8007b86:	e7dd      	b.n	8007b44 <ModularExpSlidWin+0x174>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f06f 0101 	mvn.w	r1, #1
 8007b8e:	2202      	movs	r2, #2
 8007b90:	469c      	mov	ip, r3
 8007b92:	9304      	str	r3, [sp, #16]
 8007b94:	9106      	str	r1, [sp, #24]
 8007b96:	9205      	str	r2, [sp, #20]
 8007b98:	f04f 0804 	mov.w	r8, #4
 8007b9c:	f04f 0b00 	mov.w	fp, #0
 8007ba0:	e72f      	b.n	8007a02 <ModularExpSlidWin+0x32>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0cb      	beq.n	8007b3e <ModularExpSlidWin+0x16e>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0e0      	beq.n	8007b6c <ModularExpSlidWin+0x19c>
 8007baa:	f04f 0c01 	mov.w	ip, #1
 8007bae:	e7c6      	b.n	8007b3e <ModularExpSlidWin+0x16e>
 8007bb0:	2500      	movs	r5, #0
 8007bb2:	4650      	mov	r0, sl
 8007bb4:	4651      	mov	r1, sl
 8007bb6:	4652      	mov	r2, sl
 8007bb8:	ab0c      	add	r3, sp, #48	; 0x30
 8007bba:	3501      	adds	r5, #1
 8007bbc:	f7ff fdda 	bl	8007774 <MontyMul>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	f47f af2a 	bne.w	8007a1a <ModularExpSlidWin+0x4a>
 8007bc6:	42ae      	cmp	r6, r5
 8007bc8:	dcf3      	bgt.n	8007bb2 <ModularExpSlidWin+0x1e2>
 8007bca:	9a03      	ldr	r2, [sp, #12]
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	ea02 0301 	and.w	r3, r2, r1
 8007bd2:	9a07      	ldr	r2, [sp, #28]
 8007bd4:	4650      	mov	r0, sl
 8007bd6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007bda:	4652      	mov	r2, sl
 8007bdc:	ab0c      	add	r3, sp, #48	; 0x30
 8007bde:	f7ff fdc9 	bl	8007774 <MontyMul>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	f47f af19 	bne.w	8007a1a <ModularExpSlidWin+0x4a>
 8007be8:	9003      	str	r0, [sp, #12]
 8007bea:	4605      	mov	r5, r0
 8007bec:	e7dd      	b.n	8007baa <ModularExpSlidWin+0x1da>
 8007bee:	4650      	mov	r0, sl
 8007bf0:	4651      	mov	r1, sl
 8007bf2:	4652      	mov	r2, sl
 8007bf4:	ab0c      	add	r3, sp, #48	; 0x30
 8007bf6:	f8cd c004 	str.w	ip, [sp, #4]
 8007bfa:	f7ff fdbb 	bl	8007774 <MontyMul>
 8007bfe:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007c02:	2800      	cmp	r0, #0
 8007c04:	f47f af09 	bne.w	8007a1a <ModularExpSlidWin+0x4a>
 8007c08:	e799      	b.n	8007b3e <ModularExpSlidWin+0x16e>
 8007c0a:	4663      	mov	r3, ip
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8007c12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c14:	d11f      	bne.n	8007c56 <ModularExpSlidWin+0x286>
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	dd1d      	ble.n	8007c56 <ModularExpSlidWin+0x286>
 8007c1a:	9e03      	ldr	r6, [sp, #12]
 8007c1c:	4667      	mov	r7, ip
 8007c1e:	e001      	b.n	8007c24 <ModularExpSlidWin+0x254>
 8007c20:	45ab      	cmp	fp, r5
 8007c22:	d017      	beq.n	8007c54 <ModularExpSlidWin+0x284>
 8007c24:	4650      	mov	r0, sl
 8007c26:	4651      	mov	r1, sl
 8007c28:	4652      	mov	r2, sl
 8007c2a:	ab0c      	add	r3, sp, #48	; 0x30
 8007c2c:	0076      	lsls	r6, r6, #1
 8007c2e:	f10b 0b01 	add.w	fp, fp, #1
 8007c32:	f7ff fd9f 	bl	8007774 <MontyMul>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	f47f aeef 	bne.w	8007a1a <ModularExpSlidWin+0x4a>
 8007c3c:	9b05      	ldr	r3, [sp, #20]
 8007c3e:	4233      	tst	r3, r6
 8007c40:	d0ee      	beq.n	8007c20 <ModularExpSlidWin+0x250>
 8007c42:	4650      	mov	r0, sl
 8007c44:	4649      	mov	r1, r9
 8007c46:	4652      	mov	r2, sl
 8007c48:	ab0c      	add	r3, sp, #48	; 0x30
 8007c4a:	f7ff fd93 	bl	8007774 <MontyMul>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d0e6      	beq.n	8007c20 <ModularExpSlidWin+0x250>
 8007c52:	e6e2      	b.n	8007a1a <ModularExpSlidWin+0x4a>
 8007c54:	46bc      	mov	ip, r7
 8007c56:	4650      	mov	r0, sl
 8007c58:	4651      	mov	r1, sl
 8007c5a:	aa0c      	add	r2, sp, #48	; 0x30
 8007c5c:	f8cd c004 	str.w	ip, [sp, #4]
 8007c60:	f7ff fe90 	bl	8007984 <MontyExit>
 8007c64:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007c68:	4605      	mov	r5, r0
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	f47f aed5 	bne.w	8007a1a <ModularExpSlidWin+0x4a>
 8007c70:	a80c      	add	r0, sp, #48	; 0x30
 8007c72:	f8cd c004 	str.w	ip, [sp, #4]
 8007c76:	f7ff fd71 	bl	800775c <MontyKillAll>
 8007c7a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007c7e:	462e      	mov	r6, r5
 8007c80:	4667      	mov	r7, ip
 8007c82:	9907      	ldr	r1, [sp, #28]
 8007c84:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8007c88:	4621      	mov	r1, r4
 8007c8a:	3601      	adds	r6, #1
 8007c8c:	f7ff f8bc 	bl	8006e08 <StFreeBig>
 8007c90:	42be      	cmp	r6, r7
 8007c92:	dbf6      	blt.n	8007c82 <ModularExpSlidWin+0x2b2>
 8007c94:	88e3      	ldrh	r3, [r4, #6]
 8007c96:	ebc8 0803 	rsb	r8, r8, r3
 8007c9a:	f8a4 8006 	strh.w	r8, [r4, #6]
 8007c9e:	e6be      	b.n	8007a1e <ModularExpSlidWin+0x4e>

08007ca0 <RSASP1>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	4c97      	ldr	r4, [pc, #604]	; (8007f04 <RSASP1+0x264>)
 8007ca6:	f8df c260 	ldr.w	ip, [pc, #608]	; 8007f08 <RSASP1+0x268>
 8007caa:	b08f      	sub	sp, #60	; 0x3c
 8007cac:	2501      	movs	r5, #1
 8007cae:	2700      	movs	r7, #0
 8007cb0:	9709      	str	r7, [sp, #36]	; 0x24
 8007cb2:	6025      	str	r5, [r4, #0]
 8007cb4:	6824      	ldr	r4, [r4, #0]
 8007cb6:	9409      	str	r4, [sp, #36]	; 0x24
 8007cb8:	f8dc 4000 	ldr.w	r4, [ip]
 8007cbc:	9409      	str	r4, [sp, #36]	; 0x24
 8007cbe:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8007cc2:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	460d      	mov	r5, r1
 8007cca:	4616      	mov	r6, r2
 8007ccc:	469a      	mov	sl, r3
 8007cce:	d057      	beq.n	8007d80 <RSASP1+0xe0>
 8007cd0:	970a      	str	r7, [sp, #40]	; 0x28
 8007cd2:	970b      	str	r7, [sp, #44]	; 0x2c
 8007cd4:	970c      	str	r7, [sp, #48]	; 0x30
 8007cd6:	970d      	str	r7, [sp, #52]	; 0x34
 8007cd8:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8007cdc:	6887      	ldr	r7, [r0, #8]
 8007cde:	f8d0 8000 	ldr.w	r8, [r0]
 8007ce2:	6843      	ldr	r3, [r0, #4]
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d033      	beq.n	8007d50 <RSASP1+0xb0>
 8007ce8:	2f00      	cmp	r7, #0
 8007cea:	d031      	beq.n	8007d50 <RSASP1+0xb0>
 8007cec:	f1b8 0f00 	cmp.w	r8, #0
 8007cf0:	d02e      	beq.n	8007d50 <RSASP1+0xb0>
 8007cf2:	f112 0c02 	adds.w	ip, r2, #2
 8007cf6:	d02b      	beq.n	8007d50 <RSASP1+0xb0>
 8007cf8:	f1b9 0f00 	cmp.w	r9, #0
 8007cfc:	dd28      	ble.n	8007d50 <RSASP1+0xb0>
 8007cfe:	f103 3bff 	add.w	fp, r3, #4294967295
 8007d02:	f1bb 0f00 	cmp.w	fp, #0
 8007d06:	dd23      	ble.n	8007d50 <RSASP1+0xb0>
 8007d08:	45d9      	cmp	r9, fp
 8007d0a:	dc21      	bgt.n	8007d50 <RSASP1+0xb0>
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	089b      	lsrs	r3, r3, #2
 8007d10:	aa0a      	add	r2, sp, #40	; 0x28
 8007d12:	9205      	str	r2, [sp, #20]
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	4652      	mov	r2, sl
 8007d1a:	9303      	str	r3, [sp, #12]
 8007d1c:	f8cd c010 	str.w	ip, [sp, #16]
 8007d20:	f7ff f854 	bl	8006dcc <StAllocBig>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d130      	bne.n	8007d90 <RSASP1+0xf0>
 8007d2e:	aa0c      	add	r2, sp, #48	; 0x30
 8007d30:	9206      	str	r2, [sp, #24]
 8007d32:	4610      	mov	r0, r2
 8007d34:	4619      	mov	r1, r3
 8007d36:	4652      	mov	r2, sl
 8007d38:	f8cd c010 	str.w	ip, [sp, #16]
 8007d3c:	f7ff f846 	bl	8006dcc <StAllocBig>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	f000 80b1 	beq.w	8007ea8 <RSASP1+0x208>
 8007d46:	9805      	ldr	r0, [sp, #20]
 8007d48:	4651      	mov	r1, sl
 8007d4a:	f7ff f85d 	bl	8006e08 <StFreeBig>
 8007d4e:	e01f      	b.n	8007d90 <RSASP1+0xf0>
 8007d50:	461c      	mov	r4, r3
 8007d52:	2300      	movs	r3, #0
 8007d54:	930a      	str	r3, [sp, #40]	; 0x28
 8007d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d58:	930c      	str	r3, [sp, #48]	; 0x30
 8007d5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d5c:	b155      	cbz	r5, 8007d74 <RSASP1+0xd4>
 8007d5e:	b14f      	cbz	r7, 8007d74 <RSASP1+0xd4>
 8007d60:	f1b8 0f00 	cmp.w	r8, #0
 8007d64:	d006      	beq.n	8007d74 <RSASP1+0xd4>
 8007d66:	b12e      	cbz	r6, 8007d74 <RSASP1+0xd4>
 8007d68:	4599      	cmp	r9, r3
 8007d6a:	dd03      	ble.n	8007d74 <RSASP1+0xd4>
 8007d6c:	429c      	cmp	r4, r3
 8007d6e:	dd01      	ble.n	8007d74 <RSASP1+0xd4>
 8007d70:	45a1      	cmp	r9, r4
 8007d72:	dd66      	ble.n	8007e42 <RSASP1+0x1a2>
 8007d74:	f241 3bef 	movw	fp, #5103	; 0x13ef
 8007d78:	4658      	mov	r0, fp
 8007d7a:	b00f      	add	sp, #60	; 0x3c
 8007d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d82:	f8cc 3000 	str.w	r3, [ip]
 8007d86:	f8dc 3000 	ldr.w	r3, [ip]
 8007d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8e:	b933      	cbnz	r3, 8007d9e <RSASP1+0xfe>
 8007d90:	68a7      	ldr	r7, [r4, #8]
 8007d92:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8007d96:	f8d4 8000 	ldr.w	r8, [r4]
 8007d9a:	6864      	ldr	r4, [r4, #4]
 8007d9c:	e7d9      	b.n	8007d52 <RSASP1+0xb2>
 8007d9e:	970a      	str	r7, [sp, #40]	; 0x28
 8007da0:	970b      	str	r7, [sp, #44]	; 0x2c
 8007da2:	970c      	str	r7, [sp, #48]	; 0x30
 8007da4:	970d      	str	r7, [sp, #52]	; 0x34
 8007da6:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8007daa:	6887      	ldr	r7, [r0, #8]
 8007dac:	6803      	ldr	r3, [r0, #0]
 8007dae:	6842      	ldr	r2, [r0, #4]
 8007db0:	2900      	cmp	r1, #0
 8007db2:	d043      	beq.n	8007e3c <RSASP1+0x19c>
 8007db4:	2f00      	cmp	r7, #0
 8007db6:	d041      	beq.n	8007e3c <RSASP1+0x19c>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d03f      	beq.n	8007e3c <RSASP1+0x19c>
 8007dbc:	f116 0b02 	adds.w	fp, r6, #2
 8007dc0:	d03c      	beq.n	8007e3c <RSASP1+0x19c>
 8007dc2:	f1b9 0f00 	cmp.w	r9, #0
 8007dc6:	dd39      	ble.n	8007e3c <RSASP1+0x19c>
 8007dc8:	f102 38ff 	add.w	r8, r2, #4294967295
 8007dcc:	f1b8 0f00 	cmp.w	r8, #0
 8007dd0:	dd34      	ble.n	8007e3c <RSASP1+0x19c>
 8007dd2:	45c1      	cmp	r9, r8
 8007dd4:	dc32      	bgt.n	8007e3c <RSASP1+0x19c>
 8007dd6:	3202      	adds	r2, #2
 8007dd8:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8007ddc:	aa0a      	add	r2, sp, #40	; 0x28
 8007dde:	9205      	str	r2, [sp, #20]
 8007de0:	4661      	mov	r1, ip
 8007de2:	4610      	mov	r0, r2
 8007de4:	4652      	mov	r2, sl
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	f8cd c010 	str.w	ip, [sp, #16]
 8007dec:	f7fe ffee 	bl	8006dcc <StAllocBig>
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d1ca      	bne.n	8007d90 <RSASP1+0xf0>
 8007dfa:	aa0c      	add	r2, sp, #48	; 0x30
 8007dfc:	9206      	str	r2, [sp, #24]
 8007dfe:	4610      	mov	r0, r2
 8007e00:	4661      	mov	r1, ip
 8007e02:	4652      	mov	r2, sl
 8007e04:	9303      	str	r3, [sp, #12]
 8007e06:	f7fe ffe1 	bl	8006dcc <StAllocBig>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d19a      	bne.n	8007d46 <RSASP1+0xa6>
 8007e10:	4618      	mov	r0, r3
 8007e12:	4641      	mov	r1, r8
 8007e14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e16:	f7ff f983 	bl	8007120 <W8_to_Big>
 8007e1a:	4641      	mov	r1, r8
 8007e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f7ff f97e 	bl	8007120 <W8_to_Big>
 8007e24:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e28:	f7ff f8ea 	bl	8007000 <CompareBig>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f2c0 808d 	blt.w	8007f4c <RSASP1+0x2ac>
 8007e32:	9806      	ldr	r0, [sp, #24]
 8007e34:	4651      	mov	r1, sl
 8007e36:	f7fe ffe7 	bl	8006e08 <StFreeBig>
 8007e3a:	e784      	b.n	8007d46 <RSASP1+0xa6>
 8007e3c:	4614      	mov	r4, r2
 8007e3e:	4698      	mov	r8, r3
 8007e40:	e787      	b.n	8007d52 <RSASP1+0xb2>
 8007e42:	1ce3      	adds	r3, r4, #3
 8007e44:	089b      	lsrs	r3, r3, #2
 8007e46:	aa0a      	add	r2, sp, #40	; 0x28
 8007e48:	9205      	str	r2, [sp, #20]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4652      	mov	r2, sl
 8007e50:	9303      	str	r3, [sp, #12]
 8007e52:	f7fe ffbb 	bl	8006dcc <StAllocBig>
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	4683      	mov	fp, r0
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d18c      	bne.n	8007d78 <RSASP1+0xd8>
 8007e5e:	aa0c      	add	r2, sp, #48	; 0x30
 8007e60:	9206      	str	r2, [sp, #24]
 8007e62:	4610      	mov	r0, r2
 8007e64:	4619      	mov	r1, r3
 8007e66:	4652      	mov	r2, sl
 8007e68:	f7fe ffb0 	bl	8006dcc <StAllocBig>
 8007e6c:	4683      	mov	fp, r0
 8007e6e:	b120      	cbz	r0, 8007e7a <RSASP1+0x1da>
 8007e70:	9805      	ldr	r0, [sp, #20]
 8007e72:	4651      	mov	r1, sl
 8007e74:	f7fe ffc8 	bl	8006e08 <StFreeBig>
 8007e78:	e77e      	b.n	8007d78 <RSASP1+0xd8>
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e7e:	4640      	mov	r0, r8
 8007e80:	f7ff f94e 	bl	8007120 <W8_to_Big>
 8007e84:	4621      	mov	r1, r4
 8007e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f7ff f949 	bl	8007120 <W8_to_Big>
 8007e8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e92:	f7ff f8b5 	bl	8007000 <CompareBig>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	db38      	blt.n	8007f0c <RSASP1+0x26c>
 8007e9a:	f241 3bf2 	movw	fp, #5106	; 0x13f2
 8007e9e:	9806      	ldr	r0, [sp, #24]
 8007ea0:	4651      	mov	r1, sl
 8007ea2:	f7fe ffb1 	bl	8006e08 <StFreeBig>
 8007ea6:	e7e3      	b.n	8007e70 <RSASP1+0x1d0>
 8007ea8:	4659      	mov	r1, fp
 8007eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eac:	4640      	mov	r0, r8
 8007eae:	f7ff f937 	bl	8007120 <W8_to_Big>
 8007eb2:	4659      	mov	r1, fp
 8007eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f7ff f932 	bl	8007120 <W8_to_Big>
 8007ebc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ebe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ec0:	f7ff f89e 	bl	8007000 <CompareBig>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	dab4      	bge.n	8007e32 <RSASP1+0x192>
 8007ec8:	ab0d      	add	r3, sp, #52	; 0x34
 8007eca:	f109 0103 	add.w	r1, r9, #3
 8007ece:	4618      	mov	r0, r3
 8007ed0:	0889      	lsrs	r1, r1, #2
 8007ed2:	4652      	mov	r2, sl
 8007ed4:	9307      	str	r3, [sp, #28]
 8007ed6:	f7fe ff79 	bl	8006dcc <StAllocBig>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d1a9      	bne.n	8007e32 <RSASP1+0x192>
 8007ede:	4638      	mov	r0, r7
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ee4:	f7ff f91c 	bl	8007120 <W8_to_Big>
 8007ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eea:	af0b      	add	r7, sp, #44	; 0x2c
 8007eec:	7999      	ldrb	r1, [r3, #6]
 8007eee:	4638      	mov	r0, r7
 8007ef0:	4652      	mov	r2, sl
 8007ef2:	f7fe ff6b 	bl	8006dcc <StAllocBig>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d05d      	beq.n	8007fb6 <RSASP1+0x316>
 8007efa:	9807      	ldr	r0, [sp, #28]
 8007efc:	4651      	mov	r1, sl
 8007efe:	f7fe ff83 	bl	8006e08 <StFreeBig>
 8007f02:	e796      	b.n	8007e32 <RSASP1+0x192>
 8007f04:	40023008 	.word	0x40023008
 8007f08:	40023000 	.word	0x40023000
 8007f0c:	ab0d      	add	r3, sp, #52	; 0x34
 8007f0e:	f109 0103 	add.w	r1, r9, #3
 8007f12:	4618      	mov	r0, r3
 8007f14:	0889      	lsrs	r1, r1, #2
 8007f16:	4652      	mov	r2, sl
 8007f18:	9307      	str	r3, [sp, #28]
 8007f1a:	f7fe ff57 	bl	8006dcc <StAllocBig>
 8007f1e:	4683      	mov	fp, r0
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d1bc      	bne.n	8007e9e <RSASP1+0x1fe>
 8007f24:	4638      	mov	r0, r7
 8007f26:	4649      	mov	r1, r9
 8007f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f2a:	f7ff f8f9 	bl	8007120 <W8_to_Big>
 8007f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f30:	af0b      	add	r7, sp, #44	; 0x2c
 8007f32:	7999      	ldrb	r1, [r3, #6]
 8007f34:	4638      	mov	r0, r7
 8007f36:	4652      	mov	r2, sl
 8007f38:	f7fe ff48 	bl	8006dcc <StAllocBig>
 8007f3c:	4683      	mov	fp, r0
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d073      	beq.n	800802a <RSASP1+0x38a>
 8007f42:	9807      	ldr	r0, [sp, #28]
 8007f44:	4651      	mov	r1, sl
 8007f46:	f7fe ff5f 	bl	8006e08 <StFreeBig>
 8007f4a:	e7a8      	b.n	8007e9e <RSASP1+0x1fe>
 8007f4c:	ab0d      	add	r3, sp, #52	; 0x34
 8007f4e:	f109 0103 	add.w	r1, r9, #3
 8007f52:	4618      	mov	r0, r3
 8007f54:	0889      	lsrs	r1, r1, #2
 8007f56:	4652      	mov	r2, sl
 8007f58:	9307      	str	r3, [sp, #28]
 8007f5a:	f7fe ff37 	bl	8006dcc <StAllocBig>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f47f af67 	bne.w	8007e32 <RSASP1+0x192>
 8007f64:	4638      	mov	r0, r7
 8007f66:	4649      	mov	r1, r9
 8007f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f6a:	f7ff f8d9 	bl	8007120 <W8_to_Big>
 8007f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f70:	af0b      	add	r7, sp, #44	; 0x2c
 8007f72:	7999      	ldrb	r1, [r3, #6]
 8007f74:	4638      	mov	r0, r7
 8007f76:	4652      	mov	r2, sl
 8007f78:	f7fe ff28 	bl	8006dcc <StAllocBig>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d1bc      	bne.n	8007efa <RSASP1+0x25a>
 8007f80:	f8cd a000 	str.w	sl, [sp]
 8007f84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8c:	f7ff fd20 	bl	80079d0 <ModularExpSlidWin>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d145      	bne.n	8008020 <RSASP1+0x380>
 8007f94:	4681      	mov	r9, r0
 8007f96:	4603      	mov	r3, r0
 8007f98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007f9a:	9303      	str	r3, [sp, #12]
 8007f9c:	f7ff f89e 	bl	80070dc <CountBytes>
 8007fa0:	ebc0 0008 	rsb	r0, r0, r8
 8007fa4:	4581      	cmp	r9, r0
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	da64      	bge.n	8008074 <RSASP1+0x3d4>
 8007faa:	eb06 0209 	add.w	r2, r6, r9
 8007fae:	f109 0901 	add.w	r9, r9, #1
 8007fb2:	7093      	strb	r3, [r2, #2]
 8007fb4:	e7f0      	b.n	8007f98 <RSASP1+0x2f8>
 8007fb6:	f8cd a000 	str.w	sl, [sp]
 8007fba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007fbc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fc2:	f7ff fd05 	bl	80079d0 <ModularExpSlidWin>
 8007fc6:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007fca:	bb48      	cbnz	r0, 8008020 <RSASP1+0x380>
 8007fcc:	463a      	mov	r2, r7
 8007fce:	4680      	mov	r8, r0
 8007fd0:	462f      	mov	r7, r5
 8007fd2:	4681      	mov	r9, r0
 8007fd4:	4625      	mov	r5, r4
 8007fd6:	4664      	mov	r4, ip
 8007fd8:	e005      	b.n	8007fe6 <RSASP1+0x346>
 8007fda:	eb06 0308 	add.w	r3, r6, r8
 8007fde:	f108 0801 	add.w	r8, r8, #1
 8007fe2:	f883 9002 	strb.w	r9, [r3, #2]
 8007fe6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007fe8:	9204      	str	r2, [sp, #16]
 8007fea:	f7ff f877 	bl	80070dc <CountBytes>
 8007fee:	ebc0 000b 	rsb	r0, r0, fp
 8007ff2:	4580      	cmp	r8, r0
 8007ff4:	9a04      	ldr	r2, [sp, #16]
 8007ff6:	dbf0      	blt.n	8007fda <RSASP1+0x33a>
 8007ff8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007ffc:	46a4      	mov	ip, r4
 8007ffe:	4640      	mov	r0, r8
 8008000:	f8cd c010 	str.w	ip, [sp, #16]
 8008004:	462c      	mov	r4, r5
 8008006:	463d      	mov	r5, r7
 8008008:	4617      	mov	r7, r2
 800800a:	f7ff f867 	bl	80070dc <CountBytes>
 800800e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008012:	ebc0 010b 	rsb	r1, r0, fp
 8008016:	4461      	add	r1, ip
 8008018:	4640      	mov	r0, r8
 800801a:	2200      	movs	r2, #0
 800801c:	f7ff f902 	bl	8007224 <Big_to_W8>
 8008020:	4638      	mov	r0, r7
 8008022:	4651      	mov	r1, sl
 8008024:	f7fe fef0 	bl	8006e08 <StFreeBig>
 8008028:	e767      	b.n	8007efa <RSASP1+0x25a>
 800802a:	f8cd a000 	str.w	sl, [sp]
 800802e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008030:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008036:	f7ff fccb 	bl	80079d0 <ModularExpSlidWin>
 800803a:	4683      	mov	fp, r0
 800803c:	b9a8      	cbnz	r0, 800806a <RSASP1+0x3ca>
 800803e:	4605      	mov	r5, r0
 8008040:	4680      	mov	r8, r0
 8008042:	e002      	b.n	800804a <RSASP1+0x3aa>
 8008044:	f806 8005 	strb.w	r8, [r6, r5]
 8008048:	3501      	adds	r5, #1
 800804a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800804c:	f7ff f846 	bl	80070dc <CountBytes>
 8008050:	1a20      	subs	r0, r4, r0
 8008052:	4285      	cmp	r5, r0
 8008054:	dbf6      	blt.n	8008044 <RSASP1+0x3a4>
 8008056:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008058:	4628      	mov	r0, r5
 800805a:	f7ff f83f 	bl	80070dc <CountBytes>
 800805e:	1a21      	subs	r1, r4, r0
 8008060:	4431      	add	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	2200      	movs	r2, #0
 8008066:	f7ff f8dd 	bl	8007224 <Big_to_W8>
 800806a:	4638      	mov	r0, r7
 800806c:	4651      	mov	r1, sl
 800806e:	f7fe fecb 	bl	8006e08 <StFreeBig>
 8008072:	e766      	b.n	8007f42 <RSASP1+0x2a2>
 8008074:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008078:	4648      	mov	r0, r9
 800807a:	f7ff f82f 	bl	80070dc <CountBytes>
 800807e:	ebc0 0108 	rsb	r1, r0, r8
 8008082:	4459      	add	r1, fp
 8008084:	4648      	mov	r0, r9
 8008086:	2200      	movs	r2, #0
 8008088:	f7ff f8cc 	bl	8007224 <Big_to_W8>
 800808c:	e7c8      	b.n	8008020 <RSASP1+0x380>
 800808e:	bf00      	nop

08008090 <RSAVP1>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	b089      	sub	sp, #36	; 0x24
 8008096:	2400      	movs	r4, #0
 8008098:	469a      	mov	sl, r3
 800809a:	460d      	mov	r5, r1
 800809c:	4690      	mov	r8, r2
 800809e:	6886      	ldr	r6, [r0, #8]
 80080a0:	68c3      	ldr	r3, [r0, #12]
 80080a2:	9404      	str	r4, [sp, #16]
 80080a4:	e890 0880 	ldmia.w	r0, {r7, fp}
 80080a8:	9405      	str	r4, [sp, #20]
 80080aa:	9406      	str	r4, [sp, #24]
 80080ac:	9407      	str	r4, [sp, #28]
 80080ae:	b141      	cbz	r1, 80080c2 <RSAVP1+0x32>
 80080b0:	b13e      	cbz	r6, 80080c2 <RSAVP1+0x32>
 80080b2:	b137      	cbz	r7, 80080c2 <RSAVP1+0x32>
 80080b4:	b12a      	cbz	r2, 80080c2 <RSAVP1+0x32>
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	dd03      	ble.n	80080c2 <RSAVP1+0x32>
 80080ba:	45a3      	cmp	fp, r4
 80080bc:	dd01      	ble.n	80080c2 <RSAVP1+0x32>
 80080be:	455b      	cmp	r3, fp
 80080c0:	dd05      	ble.n	80080ce <RSAVP1+0x3e>
 80080c2:	f241 34ef 	movw	r4, #5103	; 0x13ef
 80080c6:	4620      	mov	r0, r4
 80080c8:	b009      	add	sp, #36	; 0x24
 80080ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ce:	f10b 0203 	add.w	r2, fp, #3
 80080d2:	ea4f 0992 	mov.w	r9, r2, lsr #2
 80080d6:	4649      	mov	r1, r9
 80080d8:	a804      	add	r0, sp, #16
 80080da:	4652      	mov	r2, sl
 80080dc:	9303      	str	r3, [sp, #12]
 80080de:	f7fe fe75 	bl	8006dcc <StAllocBig>
 80080e2:	4604      	mov	r4, r0
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d1ee      	bne.n	80080c6 <RSAVP1+0x36>
 80080e8:	4649      	mov	r1, r9
 80080ea:	a806      	add	r0, sp, #24
 80080ec:	4652      	mov	r2, sl
 80080ee:	f7fe fe6d 	bl	8006dcc <StAllocBig>
 80080f2:	4604      	mov	r4, r0
 80080f4:	b120      	cbz	r0, 8008100 <RSAVP1+0x70>
 80080f6:	a804      	add	r0, sp, #16
 80080f8:	4651      	mov	r1, sl
 80080fa:	f7fe fe85 	bl	8006e08 <StFreeBig>
 80080fe:	e7e2      	b.n	80080c6 <RSAVP1+0x36>
 8008100:	4659      	mov	r1, fp
 8008102:	9a06      	ldr	r2, [sp, #24]
 8008104:	4638      	mov	r0, r7
 8008106:	f7ff f80b 	bl	8007120 <W8_to_Big>
 800810a:	4659      	mov	r1, fp
 800810c:	9a04      	ldr	r2, [sp, #16]
 800810e:	4628      	mov	r0, r5
 8008110:	f7ff f806 	bl	8007120 <W8_to_Big>
 8008114:	9804      	ldr	r0, [sp, #16]
 8008116:	9906      	ldr	r1, [sp, #24]
 8008118:	f7fe ff72 	bl	8007000 <CompareBig>
 800811c:	2800      	cmp	r0, #0
 800811e:	9b03      	ldr	r3, [sp, #12]
 8008120:	db06      	blt.n	8008130 <RSAVP1+0xa0>
 8008122:	f241 34f2 	movw	r4, #5106	; 0x13f2
 8008126:	a806      	add	r0, sp, #24
 8008128:	4651      	mov	r1, sl
 800812a:	f7fe fe6d 	bl	8006e08 <StFreeBig>
 800812e:	e7e2      	b.n	80080f6 <RSAVP1+0x66>
 8008130:	1cd9      	adds	r1, r3, #3
 8008132:	a807      	add	r0, sp, #28
 8008134:	0889      	lsrs	r1, r1, #2
 8008136:	4652      	mov	r2, sl
 8008138:	f7fe fe48 	bl	8006dcc <StAllocBig>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	4604      	mov	r4, r0
 8008140:	2800      	cmp	r0, #0
 8008142:	d1f0      	bne.n	8008126 <RSAVP1+0x96>
 8008144:	4619      	mov	r1, r3
 8008146:	9a07      	ldr	r2, [sp, #28]
 8008148:	4630      	mov	r0, r6
 800814a:	f7fe ffe9 	bl	8007120 <W8_to_Big>
 800814e:	9b06      	ldr	r3, [sp, #24]
 8008150:	a805      	add	r0, sp, #20
 8008152:	7999      	ldrb	r1, [r3, #6]
 8008154:	4652      	mov	r2, sl
 8008156:	f7fe fe39 	bl	8006dcc <StAllocBig>
 800815a:	4604      	mov	r4, r0
 800815c:	b120      	cbz	r0, 8008168 <RSAVP1+0xd8>
 800815e:	a807      	add	r0, sp, #28
 8008160:	4651      	mov	r1, sl
 8008162:	f7fe fe51 	bl	8006e08 <StFreeBig>
 8008166:	e7de      	b.n	8008126 <RSAVP1+0x96>
 8008168:	f8cd a000 	str.w	sl, [sp]
 800816c:	9804      	ldr	r0, [sp, #16]
 800816e:	9907      	ldr	r1, [sp, #28]
 8008170:	9a06      	ldr	r2, [sp, #24]
 8008172:	9b05      	ldr	r3, [sp, #20]
 8008174:	f7ff fc2c 	bl	80079d0 <ModularExpSlidWin>
 8008178:	4604      	mov	r4, r0
 800817a:	b9b8      	cbnz	r0, 80081ac <RSAVP1+0x11c>
 800817c:	4605      	mov	r5, r0
 800817e:	4606      	mov	r6, r0
 8008180:	e002      	b.n	8008188 <RSAVP1+0xf8>
 8008182:	f808 6005 	strb.w	r6, [r8, r5]
 8008186:	3501      	adds	r5, #1
 8008188:	9805      	ldr	r0, [sp, #20]
 800818a:	f7fe ffa7 	bl	80070dc <CountBytes>
 800818e:	ebc0 000b 	rsb	r0, r0, fp
 8008192:	4285      	cmp	r5, r0
 8008194:	dbf5      	blt.n	8008182 <RSAVP1+0xf2>
 8008196:	9d05      	ldr	r5, [sp, #20]
 8008198:	4628      	mov	r0, r5
 800819a:	f7fe ff9f 	bl	80070dc <CountBytes>
 800819e:	ebc0 010b 	rsb	r1, r0, fp
 80081a2:	4441      	add	r1, r8
 80081a4:	4628      	mov	r0, r5
 80081a6:	2200      	movs	r2, #0
 80081a8:	f7ff f83c 	bl	8007224 <Big_to_W8>
 80081ac:	a805      	add	r0, sp, #20
 80081ae:	4651      	mov	r1, sl
 80081b0:	f7fe fe2a 	bl	8006e08 <StFreeBig>
 80081b4:	e7d3      	b.n	800815e <RSAVP1+0xce>
 80081b6:	bf00      	nop

080081b8 <RSA_PKCS1v15_Encrypt>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	b08b      	sub	sp, #44	; 0x2c
 80081be:	4606      	mov	r6, r0
 80081c0:	2000      	movs	r0, #0
 80081c2:	460c      	mov	r4, r1
 80081c4:	4617      	mov	r7, r2
 80081c6:	4698      	mov	r8, r3
 80081c8:	9009      	str	r0, [sp, #36]	; 0x24
 80081ca:	b18e      	cbz	r6, 80081f0 <RSA_PKCS1v15_Encrypt+0x38>
 80081cc:	b181      	cbz	r1, 80081f0 <RSA_PKCS1v15_Encrypt+0x38>
 80081ce:	b17a      	cbz	r2, 80081f0 <RSA_PKCS1v15_Encrypt+0x38>
 80081d0:	b173      	cbz	r3, 80081f0 <RSA_PKCS1v15_Encrypt+0x38>
 80081d2:	680b      	ldr	r3, [r1, #0]
 80081d4:	b163      	cbz	r3, 80081f0 <RSA_PKCS1v15_Encrypt+0x38>
 80081d6:	688b      	ldr	r3, [r1, #8]
 80081d8:	b153      	cbz	r3, 80081f0 <RSA_PKCS1v15_Encrypt+0x38>
 80081da:	684b      	ldr	r3, [r1, #4]
 80081dc:	4283      	cmp	r3, r0
 80081de:	dd07      	ble.n	80081f0 <RSA_PKCS1v15_Encrypt+0x38>
 80081e0:	6872      	ldr	r2, [r6, #4]
 80081e2:	f1a2 010a 	sub.w	r1, r2, #10
 80081e6:	428b      	cmp	r3, r1
 80081e8:	db07      	blt.n	80081fa <RSA_PKCS1v15_Encrypt+0x42>
 80081ea:	f241 30f2 	movw	r0, #5106	; 0x13f2
 80081ee:	e001      	b.n	80081f4 <RSA_PKCS1v15_Encrypt+0x3c>
 80081f0:	f241 30f0 	movw	r0, #5104	; 0x13f0
 80081f4:	b00b      	add	sp, #44	; 0x2c
 80081f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fa:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 80081fe:	f8b8 c004 	ldrh.w	ip, [r8, #4]
 8008202:	1855      	adds	r5, r2, r1
 8008204:	45ac      	cmp	ip, r5
 8008206:	da02      	bge.n	800820e <RSA_PKCS1v15_Encrypt+0x56>
 8008208:	f241 30ee 	movw	r0, #5102	; 0x13ee
 800820c:	e7f2      	b.n	80081f4 <RSA_PKCS1v15_Encrypt+0x3c>
 800820e:	f8d8 c000 	ldr.w	ip, [r8]
 8008212:	f8a8 5006 	strh.w	r5, [r8, #6]
 8008216:	1ad2      	subs	r2, r2, r3
 8008218:	eb0c 0b01 	add.w	fp, ip, r1
 800821c:	f1a2 0a03 	sub.w	sl, r2, #3
 8008220:	2302      	movs	r3, #2
 8008222:	4582      	cmp	sl, r0
 8008224:	f80c 0001 	strb.w	r0, [ip, r1]
 8008228:	9206      	str	r2, [sp, #24]
 800822a:	f88b 3001 	strb.w	r3, [fp, #1]
 800822e:	dd58      	ble.n	80082e2 <RSA_PKCS1v15_Encrypt+0x12a>
 8008230:	2500      	movs	r5, #0
 8008232:	9604      	str	r6, [sp, #16]
 8008234:	9407      	str	r4, [sp, #28]
 8008236:	f8cd 8014 	str.w	r8, [sp, #20]
 800823a:	1cab      	adds	r3, r5, #2
 800823c:	eb1b 0303 	adds.w	r3, fp, r3
 8008240:	ebc5 080a 	rsb	r8, r5, sl
 8008244:	9303      	str	r3, [sp, #12]
 8008246:	d073      	beq.n	8008330 <RSA_PKCS1v15_Encrypt+0x178>
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	b95b      	cbnz	r3, 8008264 <RSA_PKCS1v15_Encrypt+0xac>
 800824c:	9e04      	ldr	r6, [sp, #16]
 800824e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008252:	f241 30ee 	movw	r0, #5102	; 0x13ee
 8008256:	6873      	ldr	r3, [r6, #4]
 8008258:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	f8a8 3006 	strh.w	r3, [r8, #6]
 8008262:	e7c7      	b.n	80081f4 <RSA_PKCS1v15_Encrypt+0x3c>
 8008264:	ea5f 4918 	movs.w	r9, r8, lsr #16
 8008268:	bf08      	it	eq
 800826a:	4649      	moveq	r1, r9
 800826c:	d014      	beq.n	8008298 <RSA_PKCS1v15_Encrypt+0xe0>
 800826e:	9c03      	ldr	r4, [sp, #12]
 8008270:	2600      	movs	r6, #0
 8008272:	2200      	movs	r2, #0
 8008274:	4621      	mov	r1, r4
 8008276:	4613      	mov	r3, r2
 8008278:	4638      	mov	r0, r7
 800827a:	f7fe fae5 	bl	8006848 <crl_DRBG_AES128_Generate.part.25.constprop.36>
 800827e:	3601      	adds	r6, #1
 8008280:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8008284:	2800      	cmp	r0, #0
 8008286:	d1e1      	bne.n	800824c <RSA_PKCS1v15_Encrypt+0x94>
 8008288:	454e      	cmp	r6, r9
 800828a:	d1f2      	bne.n	8008272 <RSA_PKCS1v15_Encrypt+0xba>
 800828c:	ea4f 4109 	mov.w	r1, r9, lsl #16
 8008290:	ebc9 0901 	rsb	r9, r9, r1
 8008294:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8008298:	eb08 0309 	add.w	r3, r8, r9
 800829c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a0:	dcd4      	bgt.n	800824c <RSA_PKCS1v15_Encrypt+0x94>
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	4419      	add	r1, r3
 80082aa:	4638      	mov	r0, r7
 80082ac:	4613      	mov	r3, r2
 80082ae:	f7fe fbef 	bl	8006a90 <crl_DRBG_AES128_Generate.part.25>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d1ca      	bne.n	800824c <RSA_PKCS1v15_Encrypt+0x94>
 80082b6:	462b      	mov	r3, r5
 80082b8:	eb0b 0203 	add.w	r2, fp, r3
 80082bc:	7892      	ldrb	r2, [r2, #2]
 80082be:	b13a      	cbz	r2, 80082d0 <RSA_PKCS1v15_Encrypt+0x118>
 80082c0:	429d      	cmp	r5, r3
 80082c2:	bf18      	it	ne
 80082c4:	eb0b 0105 	addne.w	r1, fp, r5
 80082c8:	f105 0501 	add.w	r5, r5, #1
 80082cc:	bf18      	it	ne
 80082ce:	708a      	strbne	r2, [r1, #2]
 80082d0:	3301      	adds	r3, #1
 80082d2:	459a      	cmp	sl, r3
 80082d4:	dcf0      	bgt.n	80082b8 <RSA_PKCS1v15_Encrypt+0x100>
 80082d6:	45aa      	cmp	sl, r5
 80082d8:	dcaf      	bgt.n	800823a <RSA_PKCS1v15_Encrypt+0x82>
 80082da:	9e04      	ldr	r6, [sp, #16]
 80082dc:	9c07      	ldr	r4, [sp, #28]
 80082de:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80082e2:	9906      	ldr	r1, [sp, #24]
 80082e4:	4a24      	ldr	r2, [pc, #144]	; (8008378 <RSA_PKCS1v15_Encrypt+0x1c0>)
 80082e6:	4825      	ldr	r0, [pc, #148]	; (800837c <RSA_PKCS1v15_Encrypt+0x1c4>)
 80082e8:	4459      	add	r1, fp
 80082ea:	2300      	movs	r3, #0
 80082ec:	2501      	movs	r5, #1
 80082ee:	f801 3c01 	strb.w	r3, [r1, #-1]
 80082f2:	6015      	str	r5, [r2, #0]
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	9209      	str	r2, [sp, #36]	; 0x24
 80082f8:	6802      	ldr	r2, [r0, #0]
 80082fa:	9209      	str	r2, [sp, #36]	; 0x24
 80082fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082fe:	3201      	adds	r2, #1
 8008300:	d01a      	beq.n	8008338 <RSA_PKCS1v15_Encrypt+0x180>
 8008302:	6862      	ldr	r2, [r4, #4]
 8008304:	2a00      	cmp	r2, #0
 8008306:	dd0a      	ble.n	800831e <RSA_PKCS1v15_Encrypt+0x166>
 8008308:	6822      	ldr	r2, [r4, #0]
 800830a:	5cd2      	ldrb	r2, [r2, r3]
 800830c:	3204      	adds	r2, #4
 800830e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008312:	0052      	lsls	r2, r2, #1
 8008314:	54ca      	strb	r2, [r1, r3]
 8008316:	6862      	ldr	r2, [r4, #4]
 8008318:	3301      	adds	r3, #1
 800831a:	429a      	cmp	r2, r3
 800831c:	dcf4      	bgt.n	8008308 <RSA_PKCS1v15_Encrypt+0x150>
 800831e:	4659      	mov	r1, fp
 8008320:	68a2      	ldr	r2, [r4, #8]
 8008322:	4630      	mov	r0, r6
 8008324:	4643      	mov	r3, r8
 8008326:	f7ff feb3 	bl	8008090 <RSAVP1>
 800832a:	2800      	cmp	r0, #0
 800832c:	d191      	bne.n	8008252 <RSA_PKCS1v15_Encrypt+0x9a>
 800832e:	e792      	b.n	8008256 <RSA_PKCS1v15_Encrypt+0x9e>
 8008330:	f1b8 0f00 	cmp.w	r8, #0
 8008334:	dc8a      	bgt.n	800824c <RSA_PKCS1v15_Encrypt+0x94>
 8008336:	e787      	b.n	8008248 <RSA_PKCS1v15_Encrypt+0x90>
 8008338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800833a:	6002      	str	r2, [r0, #0]
 800833c:	6802      	ldr	r2, [r0, #0]
 800833e:	9209      	str	r2, [sp, #36]	; 0x24
 8008340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008342:	b16a      	cbz	r2, 8008360 <RSA_PKCS1v15_Encrypt+0x1a8>
 8008344:	6862      	ldr	r2, [r4, #4]
 8008346:	2a00      	cmp	r2, #0
 8008348:	dde9      	ble.n	800831e <RSA_PKCS1v15_Encrypt+0x166>
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	5cd2      	ldrb	r2, [r2, r3]
 800834e:	3207      	adds	r2, #7
 8008350:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008354:	54ca      	strb	r2, [r1, r3]
 8008356:	6862      	ldr	r2, [r4, #4]
 8008358:	3301      	adds	r3, #1
 800835a:	429a      	cmp	r2, r3
 800835c:	dcf5      	bgt.n	800834a <RSA_PKCS1v15_Encrypt+0x192>
 800835e:	e7de      	b.n	800831e <RSA_PKCS1v15_Encrypt+0x166>
 8008360:	6863      	ldr	r3, [r4, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	dddb      	ble.n	800831e <RSA_PKCS1v15_Encrypt+0x166>
 8008366:	4613      	mov	r3, r2
 8008368:	6822      	ldr	r2, [r4, #0]
 800836a:	5cd2      	ldrb	r2, [r2, r3]
 800836c:	54ca      	strb	r2, [r1, r3]
 800836e:	6862      	ldr	r2, [r4, #4]
 8008370:	3301      	adds	r3, #1
 8008372:	429a      	cmp	r2, r3
 8008374:	dcf8      	bgt.n	8008368 <RSA_PKCS1v15_Encrypt+0x1b0>
 8008376:	e7d2      	b.n	800831e <RSA_PKCS1v15_Encrypt+0x166>
 8008378:	40023008 	.word	0x40023008
 800837c:	40023000 	.word	0x40023000

08008380 <RSA_PKCS1v15_Decrypt>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	b083      	sub	sp, #12
 8008386:	2500      	movs	r5, #0
 8008388:	9501      	str	r5, [sp, #4]
 800838a:	460c      	mov	r4, r1
 800838c:	4616      	mov	r6, r2
 800838e:	461f      	mov	r7, r3
 8008390:	4605      	mov	r5, r0
 8008392:	b150      	cbz	r0, 80083aa <RSA_PKCS1v15_Decrypt+0x2a>
 8008394:	b149      	cbz	r1, 80083aa <RSA_PKCS1v15_Decrypt+0x2a>
 8008396:	b142      	cbz	r2, 80083aa <RSA_PKCS1v15_Decrypt+0x2a>
 8008398:	6809      	ldr	r1, [r1, #0]
 800839a:	b131      	cbz	r1, 80083aa <RSA_PKCS1v15_Decrypt+0x2a>
 800839c:	68a2      	ldr	r2, [r4, #8]
 800839e:	b122      	cbz	r2, 80083aa <RSA_PKCS1v15_Decrypt+0x2a>
 80083a0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80083a4:	6842      	ldr	r2, [r0, #4]
 80083a6:	4594      	cmp	ip, r2
 80083a8:	d004      	beq.n	80083b4 <RSA_PKCS1v15_Decrypt+0x34>
 80083aa:	f241 30f4 	movw	r0, #5108	; 0x13f4
 80083ae:	b003      	add	sp, #12
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80083b8:	889a      	ldrh	r2, [r3, #4]
 80083ba:	44cc      	add	ip, r9
 80083bc:	4562      	cmp	r2, ip
 80083be:	dbf4      	blt.n	80083aa <RSA_PKCS1v15_Decrypt+0x2a>
 80083c0:	f8d3 a000 	ldr.w	sl, [r3]
 80083c4:	f8a3 c006 	strh.w	ip, [r3, #6]
 80083c8:	eb0a 0809 	add.w	r8, sl, r9
 80083cc:	4642      	mov	r2, r8
 80083ce:	f7ff fc67 	bl	8007ca0 <RSASP1>
 80083d2:	b130      	cbz	r0, 80083e2 <RSA_PKCS1v15_Decrypt+0x62>
 80083d4:	686b      	ldr	r3, [r5, #4]
 80083d6:	f241 30f4 	movw	r0, #5108	; 0x13f4
 80083da:	88fa      	ldrh	r2, [r7, #6]
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	80fb      	strh	r3, [r7, #6]
 80083e0:	e7e5      	b.n	80083ae <RSA_PKCS1v15_Decrypt+0x2e>
 80083e2:	f81a 3009 	ldrb.w	r3, [sl, r9]
 80083e6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80083ea:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80083ee:	f082 0a02 	eor.w	sl, r2, #2
 80083f2:	f1b9 0f02 	cmp.w	r9, #2
 80083f6:	ea4a 0a03 	orr.w	sl, sl, r3
 80083fa:	4602      	mov	r2, r0
 80083fc:	dd10      	ble.n	8008420 <RSA_PKCS1v15_Decrypt+0xa0>
 80083fe:	f108 0102 	add.w	r1, r8, #2
 8008402:	eb08 0c09 	add.w	ip, r8, r9
 8008406:	2301      	movs	r3, #1
 8008408:	f811 0b01 	ldrb.w	r0, [r1], #1
 800840c:	ea40 1010 	orr.w	r0, r0, r0, lsr #4
 8008410:	ea40 0090 	orr.w	r0, r0, r0, lsr #2
 8008414:	ea40 0050 	orr.w	r0, r0, r0, lsr #1
 8008418:	4003      	ands	r3, r0
 800841a:	4561      	cmp	r1, ip
 800841c:	441a      	add	r2, r3
 800841e:	d1f3      	bne.n	8008408 <RSA_PKCS1v15_Decrypt+0x88>
 8008420:	f022 0b07 	bic.w	fp, r2, #7
 8008424:	ea4b 2b2b 	orr.w	fp, fp, fp, asr #8
 8008428:	6863      	ldr	r3, [r4, #4]
 800842a:	4843      	ldr	r0, [pc, #268]	; (8008538 <RSA_PKCS1v15_Decrypt+0x1b8>)
 800842c:	4943      	ldr	r1, [pc, #268]	; (800853c <RSA_PKCS1v15_Decrypt+0x1bc>)
 800842e:	ea4b 1b2b 	orr.w	fp, fp, fp, asr #4
 8008432:	ea4b 0bab 	orr.w	fp, fp, fp, asr #2
 8008436:	ebc2 0c09 	rsb	ip, r2, r9
 800843a:	ea4b 0b6b 	orr.w	fp, fp, fp, asr #1
 800843e:	1a9b      	subs	r3, r3, r2
 8008440:	3b03      	subs	r3, #3
 8008442:	f1ac 0c03 	sub.w	ip, ip, #3
 8008446:	f00b 0b01 	and.w	fp, fp, #1
 800844a:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 800844e:	f08b 0b01 	eor.w	fp, fp, #1
 8008452:	fb93 fcf9 	sdiv	ip, r3, r9
 8008456:	fb09 391c 	mls	r9, r9, ip, r3
 800845a:	ea4a 0a0b 	orr.w	sl, sl, fp
 800845e:	f04f 0c01 	mov.w	ip, #1
 8008462:	ea0a 030c 	and.w	r3, sl, ip
 8008466:	f8c6 9000 	str.w	r9, [r6]
 800846a:	f8c0 c000 	str.w	ip, [r0]
 800846e:	6800      	ldr	r0, [r0, #0]
 8008470:	9001      	str	r0, [sp, #4]
 8008472:	ea83 030c 	eor.w	r3, r3, ip
 8008476:	fa03 fc0c 	lsl.w	ip, r3, ip
 800847a:	ea4c 0c03 	orr.w	ip, ip, r3
 800847e:	680b      	ldr	r3, [r1, #0]
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	ea4c 0c8c 	orr.w	ip, ip, ip, lsl #2
 8008486:	9b01      	ldr	r3, [sp, #4]
 8008488:	ea4c 1c0c 	orr.w	ip, ip, ip, lsl #4
 800848c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8008490:	3301      	adds	r3, #1
 8008492:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8008496:	d01d      	beq.n	80084d4 <RSA_PKCS1v15_Decrypt+0x154>
 8008498:	686b      	ldr	r3, [r5, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	dd13      	ble.n	80084c6 <RSA_PKCS1v15_Decrypt+0x146>
 800849e:	2300      	movs	r3, #0
 80084a0:	4619      	mov	r1, r3
 80084a2:	fa5f f98c 	uxtb.w	r9, ip
 80084a6:	f818 6003 	ldrb.w	r6, [r8, r3]
 80084aa:	68a0      	ldr	r0, [r4, #8]
 80084ac:	ea06 0609 	and.w	r6, r6, r9
 80084b0:	5446      	strb	r6, [r0, r1]
 80084b2:	6868      	ldr	r0, [r5, #4]
 80084b4:	3301      	adds	r3, #1
 80084b6:	f3c2 66c0 	ubfx	r6, r2, #27, #1
 80084ba:	4298      	cmp	r0, r3
 80084bc:	4431      	add	r1, r6
 80084be:	f1a2 0205 	sub.w	r2, r2, #5
 80084c2:	dcf0      	bgt.n	80084a6 <RSA_PKCS1v15_Decrypt+0x126>
 80084c4:	4603      	mov	r3, r0
 80084c6:	ea6f 0c0c 	mvn.w	ip, ip
 80084ca:	f241 30f4 	movw	r0, #5108	; 0x13f4
 80084ce:	ea0c 0000 	and.w	r0, ip, r0
 80084d2:	e782      	b.n	80083da <RSA_PKCS1v15_Decrypt+0x5a>
 80084d4:	9b01      	ldr	r3, [sp, #4]
 80084d6:	600b      	str	r3, [r1, #0]
 80084d8:	680b      	ldr	r3, [r1, #0]
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	9901      	ldr	r1, [sp, #4]
 80084de:	686b      	ldr	r3, [r5, #4]
 80084e0:	b1a9      	cbz	r1, 800850e <RSA_PKCS1v15_Decrypt+0x18e>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	ddef      	ble.n	80084c6 <RSA_PKCS1v15_Decrypt+0x146>
 80084e6:	2300      	movs	r3, #0
 80084e8:	3a03      	subs	r2, #3
 80084ea:	4619      	mov	r1, r3
 80084ec:	fa5f f98c 	uxtb.w	r9, ip
 80084f0:	f818 6003 	ldrb.w	r6, [r8, r3]
 80084f4:	68a0      	ldr	r0, [r4, #8]
 80084f6:	ea06 0609 	and.w	r6, r6, r9
 80084fa:	5446      	strb	r6, [r0, r1]
 80084fc:	6868      	ldr	r0, [r5, #4]
 80084fe:	18d6      	adds	r6, r2, r3
 8008500:	3301      	adds	r3, #1
 8008502:	f3c6 6640 	ubfx	r6, r6, #25, #1
 8008506:	4298      	cmp	r0, r3
 8008508:	4431      	add	r1, r6
 800850a:	dcf1      	bgt.n	80084f0 <RSA_PKCS1v15_Decrypt+0x170>
 800850c:	e7da      	b.n	80084c4 <RSA_PKCS1v15_Decrypt+0x144>
 800850e:	2b00      	cmp	r3, #0
 8008510:	ddd9      	ble.n	80084c6 <RSA_PKCS1v15_Decrypt+0x146>
 8008512:	460b      	mov	r3, r1
 8008514:	3202      	adds	r2, #2
 8008516:	fa5f f98c 	uxtb.w	r9, ip
 800851a:	f818 6003 	ldrb.w	r6, [r8, r3]
 800851e:	68a0      	ldr	r0, [r4, #8]
 8008520:	ea06 0609 	and.w	r6, r6, r9
 8008524:	5446      	strb	r6, [r0, r1]
 8008526:	6868      	ldr	r0, [r5, #4]
 8008528:	1ad6      	subs	r6, r2, r3
 800852a:	3301      	adds	r3, #1
 800852c:	4298      	cmp	r0, r3
 800852e:	eb01 71d6 	add.w	r1, r1, r6, lsr #31
 8008532:	dcf2      	bgt.n	800851a <RSA_PKCS1v15_Decrypt+0x19a>
 8008534:	e7c6      	b.n	80084c4 <RSA_PKCS1v15_Decrypt+0x144>
 8008536:	bf00      	nop
 8008538:	40023008 	.word	0x40023008
 800853c:	40023000 	.word	0x40023000

08008540 <crl_DRBG_AES128_Instantiate>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	b0d3      	sub	sp, #332	; 0x14c
 8008546:	ad12      	add	r5, sp, #72	; 0x48
 8008548:	4616      	mov	r6, r2
 800854a:	4604      	mov	r4, r0
 800854c:	2250      	movs	r2, #80	; 0x50
 800854e:	460f      	mov	r7, r1
 8008550:	4628      	mov	r0, r5
 8008552:	2100      	movs	r1, #0
 8008554:	4698      	mov	r8, r3
 8008556:	f000 f8db 	bl	8008710 <memset>
 800855a:	22b0      	movs	r2, #176	; 0xb0
 800855c:	a826      	add	r0, sp, #152	; 0x98
 800855e:	4944      	ldr	r1, [pc, #272]	; (8008670 <crl_DRBG_AES128_Instantiate+0x130>)
 8008560:	f000 f8c8 	bl	80086f4 <memcpy>
 8008564:	f1a6 0210 	sub.w	r2, r6, #16
 8008568:	2a10      	cmp	r2, #16
 800856a:	d904      	bls.n	8008576 <crl_DRBG_AES128_Instantiate+0x36>
 800856c:	f241 7076 	movw	r0, #6006	; 0x1776
 8008570:	b053      	add	sp, #332	; 0x14c
 8008572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008576:	985e      	ldr	r0, [sp, #376]	; 0x178
 8008578:	2820      	cmp	r0, #32
 800857a:	dd04      	ble.n	8008586 <crl_DRBG_AES128_Instantiate+0x46>
 800857c:	f241 7077 	movw	r0, #6007	; 0x1777
 8008580:	b053      	add	sp, #332	; 0x14c
 8008582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008586:	995c      	ldr	r1, [sp, #368]	; 0x170
 8008588:	2910      	cmp	r1, #16
 800858a:	dd02      	ble.n	8008592 <crl_DRBG_AES128_Instantiate+0x52>
 800858c:	f241 707a 	movw	r0, #6010	; 0x177a
 8008590:	e7ee      	b.n	8008570 <crl_DRBG_AES128_Instantiate+0x30>
 8008592:	4639      	mov	r1, r7
 8008594:	4628      	mov	r0, r5
 8008596:	4632      	mov	r2, r6
 8008598:	9f5c      	ldr	r7, [sp, #368]	; 0x170
 800859a:	f8dd 9178 	ldr.w	r9, [sp, #376]	; 0x178
 800859e:	f000 f8a9 	bl	80086f4 <memcpy>
 80085a2:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80085a4:	4437      	add	r7, r6
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	44b9      	add	r9, r7
 80085aa:	dd04      	ble.n	80085b6 <crl_DRBG_AES128_Instantiate+0x76>
 80085ac:	19a8      	adds	r0, r5, r6
 80085ae:	4641      	mov	r1, r8
 80085b0:	461a      	mov	r2, r3
 80085b2:	f000 f89f 	bl	80086f4 <memcpy>
 80085b6:	985e      	ldr	r0, [sp, #376]	; 0x178
 80085b8:	2800      	cmp	r0, #0
 80085ba:	dd04      	ble.n	80085c6 <crl_DRBG_AES128_Instantiate+0x86>
 80085bc:	4602      	mov	r2, r0
 80085be:	995d      	ldr	r1, [sp, #372]	; 0x174
 80085c0:	19e8      	adds	r0, r5, r7
 80085c2:	f000 f897 	bl	80086f4 <memcpy>
 80085c6:	2100      	movs	r1, #0
 80085c8:	2210      	movs	r2, #16
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 f8a0 	bl	8008710 <memset>
 80085d0:	4649      	mov	r1, r9
 80085d2:	aa02      	add	r2, sp, #8
 80085d4:	4628      	mov	r0, r5
 80085d6:	f7fd fff3 	bl	80065c0 <DRBG_AES128_Block_cipher_df.constprop.37>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d1c8      	bne.n	8008570 <crl_DRBG_AES128_Instantiate+0x30>
 80085de:	ae0a      	add	r6, sp, #40	; 0x28
 80085e0:	68e7      	ldr	r7, [r4, #12]
 80085e2:	2310      	movs	r3, #16
 80085e4:	3701      	adds	r7, #1
 80085e6:	4631      	mov	r1, r6
 80085e8:	4620      	mov	r0, r4
 80085ea:	aa26      	add	r2, sp, #152	; 0x98
 80085ec:	441e      	add	r6, r3
 80085ee:	60e7      	str	r7, [r4, #12]
 80085f0:	b957      	cbnz	r7, 8008608 <crl_DRBG_AES128_Instantiate+0xc8>
 80085f2:	68a7      	ldr	r7, [r4, #8]
 80085f4:	3701      	adds	r7, #1
 80085f6:	60a7      	str	r7, [r4, #8]
 80085f8:	b937      	cbnz	r7, 8008608 <crl_DRBG_AES128_Instantiate+0xc8>
 80085fa:	6867      	ldr	r7, [r4, #4]
 80085fc:	3701      	adds	r7, #1
 80085fe:	6067      	str	r7, [r4, #4]
 8008600:	b917      	cbnz	r7, 8008608 <crl_DRBG_AES128_Instantiate+0xc8>
 8008602:	6827      	ldr	r7, [r4, #0]
 8008604:	3701      	adds	r7, #1
 8008606:	6027      	str	r7, [r4, #0]
 8008608:	f7fd fe52 	bl	80062b0 <AES_general_SW_enc>
 800860c:	42ae      	cmp	r6, r5
 800860e:	d1e7      	bne.n	80085e0 <crl_DRBG_AES128_Instantiate+0xa0>
 8008610:	a902      	add	r1, sp, #8
 8008612:	e891 010e 	ldmia.w	r1, {r1, r2, r3, r8}
 8008616:	9d07      	ldr	r5, [sp, #28]
 8008618:	9500      	str	r5, [sp, #0]
 800861a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800861c:	9f06      	ldr	r7, [sp, #24]
 800861e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008620:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008622:	9001      	str	r0, [sp, #4]
 8008624:	4069      	eors	r1, r5
 8008626:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008628:	6121      	str	r1, [r4, #16]
 800862a:	407e      	eors	r6, r7
 800862c:	e89d 0082 	ldmia.w	sp, {r1, r7}
 8008630:	406a      	eors	r2, r5
 8008632:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8008636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008638:	f8dd b020 	ldr.w	fp, [sp, #32]
 800863c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800863e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8008642:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8008646:	6162      	str	r2, [r4, #20]
 8008648:	406b      	eors	r3, r5
 800864a:	ea80 0009 	eor.w	r0, r0, r9
 800864e:	ea87 0501 	eor.w	r5, r7, r1
 8008652:	ea88 0c0c 	eor.w	ip, r8, ip
 8008656:	ea8b 070a 	eor.w	r7, fp, sl
 800865a:	2101      	movs	r1, #1
 800865c:	60e0      	str	r0, [r4, #12]
 800865e:	61a3      	str	r3, [r4, #24]
 8008660:	f8c4 c01c 	str.w	ip, [r4, #28]
 8008664:	6026      	str	r6, [r4, #0]
 8008666:	6065      	str	r5, [r4, #4]
 8008668:	60a7      	str	r7, [r4, #8]
 800866a:	6221      	str	r1, [r4, #32]
 800866c:	2000      	movs	r0, #0
 800866e:	e77f      	b.n	8008570 <crl_DRBG_AES128_Instantiate+0x30>
 8008670:	08008994 	.word	0x08008994

08008674 <RNGinit>:
 8008674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008676:	460c      	mov	r4, r1
 8008678:	b085      	sub	sp, #20
 800867a:	b191      	cbz	r1, 80086a2 <RNGinit+0x2e>
 800867c:	b188      	cbz	r0, 80086a2 <RNGinit+0x2e>
 800867e:	e890 008e 	ldmia.w	r0, {r1, r2, r3, r7}
 8008682:	6906      	ldr	r6, [r0, #16]
 8008684:	6945      	ldr	r5, [r0, #20]
 8008686:	2000      	movs	r0, #0
 8008688:	6260      	str	r0, [r4, #36]	; 0x24
 800868a:	62a0      	str	r0, [r4, #40]	; 0x28
 800868c:	9700      	str	r7, [sp, #0]
 800868e:	9601      	str	r6, [sp, #4]
 8008690:	9502      	str	r5, [sp, #8]
 8008692:	4620      	mov	r0, r4
 8008694:	f7ff ff54 	bl	8008540 <crl_DRBG_AES128_Instantiate>
 8008698:	b928      	cbnz	r0, 80086a6 <RNGinit+0x32>
 800869a:	2301      	movs	r3, #1
 800869c:	62a3      	str	r3, [r4, #40]	; 0x28
 800869e:	b005      	add	sp, #20
 80086a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a2:	f241 7074 	movw	r0, #6004	; 0x1774
 80086a6:	b005      	add	sp, #20
 80086a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086aa:	bf00      	nop

080086ac <__libc_init_array>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	4d0d      	ldr	r5, [pc, #52]	; (80086e4 <__libc_init_array+0x38>)
 80086b0:	4c0d      	ldr	r4, [pc, #52]	; (80086e8 <__libc_init_array+0x3c>)
 80086b2:	1b64      	subs	r4, r4, r5
 80086b4:	10a4      	asrs	r4, r4, #2
 80086b6:	2600      	movs	r6, #0
 80086b8:	42a6      	cmp	r6, r4
 80086ba:	d109      	bne.n	80086d0 <__libc_init_array+0x24>
 80086bc:	4d0b      	ldr	r5, [pc, #44]	; (80086ec <__libc_init_array+0x40>)
 80086be:	4c0c      	ldr	r4, [pc, #48]	; (80086f0 <__libc_init_array+0x44>)
 80086c0:	f000 f82e 	bl	8008720 <_init>
 80086c4:	1b64      	subs	r4, r4, r5
 80086c6:	10a4      	asrs	r4, r4, #2
 80086c8:	2600      	movs	r6, #0
 80086ca:	42a6      	cmp	r6, r4
 80086cc:	d105      	bne.n	80086da <__libc_init_array+0x2e>
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d4:	4798      	blx	r3
 80086d6:	3601      	adds	r6, #1
 80086d8:	e7ee      	b.n	80086b8 <__libc_init_array+0xc>
 80086da:	f855 3b04 	ldr.w	r3, [r5], #4
 80086de:	4798      	blx	r3
 80086e0:	3601      	adds	r6, #1
 80086e2:	e7f2      	b.n	80086ca <__libc_init_array+0x1e>
 80086e4:	080094d4 	.word	0x080094d4
 80086e8:	080094d4 	.word	0x080094d4
 80086ec:	080094d4 	.word	0x080094d4
 80086f0:	080094d8 	.word	0x080094d8

080086f4 <memcpy>:
 80086f4:	440a      	add	r2, r1
 80086f6:	4291      	cmp	r1, r2
 80086f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80086fc:	d100      	bne.n	8008700 <memcpy+0xc>
 80086fe:	4770      	bx	lr
 8008700:	b510      	push	{r4, lr}
 8008702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800870a:	4291      	cmp	r1, r2
 800870c:	d1f9      	bne.n	8008702 <memcpy+0xe>
 800870e:	bd10      	pop	{r4, pc}

08008710 <memset>:
 8008710:	4402      	add	r2, r0
 8008712:	4603      	mov	r3, r0
 8008714:	4293      	cmp	r3, r2
 8008716:	d100      	bne.n	800871a <memset+0xa>
 8008718:	4770      	bx	lr
 800871a:	f803 1b01 	strb.w	r1, [r3], #1
 800871e:	e7f9      	b.n	8008714 <memset+0x4>

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	bf00      	nop
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
