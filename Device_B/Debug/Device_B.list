
Device_B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007024  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  080071bc  080071bc  000171bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d8  080074d8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074e0  080074e0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074e4  080074e4  000174e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080074e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  20000018  08007500  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001aec  08007500  00021aec  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dad  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f5  00000000  00000000  00031def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  000344e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  000354f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183d2  00000000  00000000  00036450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ed4  00000000  00000000  0004e822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ecb  00000000  00000000  000636f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  000f65c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a8  00000000  00000000  000f6694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080071a4 	.word	0x080071a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080071a4 	.word	0x080071a4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14d      	bne.n	80002b4 <__udivmoddi4+0xac>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d968      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b152      	cbz	r2, 800023a <__udivmoddi4+0x32>
 8000224:	fa01 f302 	lsl.w	r3, r1, r2
 8000228:	f1c2 0120 	rsb	r1, r2, #32
 800022c:	fa20 f101 	lsr.w	r1, r0, r1
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	ea41 0803 	orr.w	r8, r1, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800023e:	0c21      	lsrs	r1, r4, #16
 8000240:	fbb8 fef5 	udiv	lr, r8, r5
 8000244:	fa1f f78c 	uxth.w	r7, ip
 8000248:	fb05 831e 	mls	r3, r5, lr, r8
 800024c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000250:	fb0e f107 	mul.w	r1, lr, r7
 8000254:	4299      	cmp	r1, r3
 8000256:	d90b      	bls.n	8000270 <__udivmoddi4+0x68>
 8000258:	eb1c 0303 	adds.w	r3, ip, r3
 800025c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000260:	f080 811e 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000264:	4299      	cmp	r1, r3
 8000266:	f240 811b 	bls.w	80004a0 <__udivmoddi4+0x298>
 800026a:	f1ae 0e02 	sub.w	lr, lr, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f5 	udiv	r0, r3, r5
 8000278:	fb05 3310 	mls	r3, r5, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 f707 	mul.w	r7, r0, r7
 8000284:	42a7      	cmp	r7, r4
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x96>
 8000288:	eb1c 0404 	adds.w	r4, ip, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 8108 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000294:	42a7      	cmp	r7, r4
 8000296:	f240 8105 	bls.w	80004a4 <__udivmoddi4+0x29c>
 800029a:	4464      	add	r4, ip
 800029c:	3802      	subs	r0, #2
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa8>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d908      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	f000 80ee 	beq.w	800049a <__udivmoddi4+0x292>
 80002be:	2100      	movs	r1, #0
 80002c0:	e9c6 0500 	strd	r0, r5, [r6]
 80002c4:	4608      	mov	r0, r1
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0303 	sbc.w	r3, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e2      	beq.n	80002b0 <__udivmoddi4+0xa8>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7df      	b.n	80002b0 <__udivmoddi4+0xa8>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8091 	bne.w	8000420 <__udivmoddi4+0x218>
 80002fe:	eba1 050c 	sub.w	r5, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000310:	fb07 5013 	mls	r0, r7, r3, r5
 8000314:	0c25      	lsrs	r5, r4, #16
 8000316:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	42a8      	cmp	r0, r5
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0505 	adds.w	r5, ip, r5
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	42a8      	cmp	r0, r5
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a2d      	subs	r5, r5, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb5 f0f7 	udiv	r0, r5, r7
 800033c:	fb07 5510 	mls	r5, r7, r0, r5
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 35ff 	add.w	r5, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4628      	mov	r0, r5
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x9e>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa05 f301 	lsl.w	r3, r5, r1
 800037e:	431c      	orrs	r4, r3
 8000380:	40fd      	lsrs	r5, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f301 	lsl.w	r3, r0, r1
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 5518 	mls	r5, r9, r8, r5
 8000398:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	42a8      	cmp	r0, r5
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0505 	adds.w	r5, ip, r5
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	42a8      	cmp	r0, r5
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4465      	add	r5, ip
 80003c0:	1a2d      	subs	r5, r5, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb5 f0f9 	udiv	r0, r5, r9
 80003c8:	fb09 5510 	mls	r5, r9, r0, r5
 80003cc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	45ae      	cmp	lr, r5
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0505 	adds.w	r5, ip, r5
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	45ae      	cmp	lr, r5
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4465      	add	r5, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba5 050e 	sub.w	r5, r5, lr
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15e      	cbz	r6, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb65 050e 	sbc.w	r5, r5, lr
 800040a:	fa05 f707 	lsl.w	r7, r5, r7
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	40cd      	lsrs	r5, r1
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c6 7500 	strd	r7, r5, [r6]
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa25 f303 	lsr.w	r3, r5, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	430d      	orrs	r5, r1
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000440:	fb07 3011 	mls	r0, r7, r1, r3
 8000444:	0c2b      	lsrs	r3, r5, #16
 8000446:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800044a:	fb01 f00e 	mul.w	r0, r1, lr
 800044e:	4298      	cmp	r0, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f101 38ff 	add.w	r8, r1, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	4298      	cmp	r0, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3902      	subs	r1, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a1b      	subs	r3, r3, r0
 800046a:	b2ad      	uxth	r5, r5
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3310 	mls	r3, r7, r0, r3
 8000474:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000478:	fb00 f30e 	mul.w	r3, r0, lr
 800047c:	42ab      	cmp	r3, r5
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0505 	adds.w	r5, ip, r5
 8000484:	f100 38ff 	add.w	r8, r0, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	42ab      	cmp	r3, r5
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3802      	subs	r0, #2
 8000490:	4465      	add	r5, ip
 8000492:	1aed      	subs	r5, r5, r3
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e707      	b.n	80002b0 <__udivmoddi4+0xa8>
 80004a0:	4686      	mov	lr, r0
 80004a2:	e6e5      	b.n	8000270 <__udivmoddi4+0x68>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fa      	b.n	800029e <__udivmoddi4+0x96>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4641      	mov	r1, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4465      	add	r5, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <calc_pulse>:
static volatile uint32_t received_value;
static int received_bits;

//Normal NEC protocol
static pulse_t calc_pulse(uint32_t time)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2bf9      	cmp	r3, #249	; 0xf9
 80004e8:	d801      	bhi.n	80004ee <calc_pulse+0x12>
		return PULSE_ERROR;
 80004ea:	2305      	movs	r3, #5
 80004ec:	e021      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 1200)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80004f4:	d201      	bcs.n	80004fa <calc_pulse+0x1e>
		return PULSE_SHORT;
 80004f6:	2304      	movs	r3, #4
 80004f8:	e01b      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 2000)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000500:	d201      	bcs.n	8000506 <calc_pulse+0x2a>
		return PULSE_LONG;
 8000502:	2303      	movs	r3, #3
 8000504:	e015      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 3000)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800050c:	4293      	cmp	r3, r2
 800050e:	d801      	bhi.n	8000514 <calc_pulse+0x38>
		return PULSE_2MS;
 8000510:	2302      	movs	r3, #2
 8000512:	e00e      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 6000)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f241 726f 	movw	r2, #5999	; 0x176f
 800051a:	4293      	cmp	r3, r2
 800051c:	d801      	bhi.n	8000522 <calc_pulse+0x46>
		return PULSE_4MS;
 800051e:	2301      	movs	r3, #1
 8000520:	e007      	b.n	8000532 <calc_pulse+0x56>
	else if (time < 12000)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000528:	4293      	cmp	r3, r2
 800052a:	d801      	bhi.n	8000530 <calc_pulse+0x54>
		return PULSE_9MS;
 800052c:	2300      	movs	r3, #0
 800052e:	e000      	b.n	8000532 <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000530:	2305      	movs	r3, #5
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <ir_tim_interrupt>:
	else
		return PULSE_ERROR;
}

void ir_tim_interrupt(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 8000542:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <ir_tim_interrupt+0xa4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b1f      	cmp	r3, #31
 8000548:	dc43      	bgt.n	80005d2 <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1));
 800054a:	2100      	movs	r1, #0
 800054c:	4825      	ldr	r0, [pc, #148]	; (80005e4 <ir_tim_interrupt+0xa8>)
 800054e:	f004 fa35 	bl	80049bc <HAL_TIM_ReadCapturedValue>
 8000552:	4603      	mov	r3, r0
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffc1 	bl	80004dc <calc_pulse>
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	3b01      	subs	r3, #1
 8000562:	2b03      	cmp	r3, #3
 8000564:	d831      	bhi.n	80005ca <ir_tim_interrupt+0x8e>
 8000566:	a201      	add	r2, pc, #4	; (adr r2, 800056c <ir_tim_interrupt+0x30>)
 8000568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056c:	080005ad 	.word	0x080005ad
 8000570:	080005bb 	.word	0x080005bb
 8000574:	08000593 	.word	0x08000593
 8000578:	0800057d 	.word	0x0800057d
	case PULSE_SHORT:
		received_value = received_value >> 1;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <ir_tim_interrupt+0xac>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	085b      	lsrs	r3, r3, #1
 8000582:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <ir_tim_interrupt+0xac>)
 8000584:	6013      	str	r3, [r2, #0]
		received_bits++;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <ir_tim_interrupt+0xa4>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <ir_tim_interrupt+0xa4>)
 800058e:	6013      	str	r3, [r2, #0]
		break;
 8000590:	e022      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <ir_tim_interrupt+0xac>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	085b      	lsrs	r3, r3, #1
 8000598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <ir_tim_interrupt+0xac>)
 800059e:	6013      	str	r3, [r2, #0]
		received_bits++;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005a8:	6013      	str	r3, [r2, #0]
		break;
 80005aa:	e015      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <ir_tim_interrupt+0xac>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
		break;
 80005b8:	e00e      	b.n	80005d8 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if (received_bits == 0)
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d109      	bne.n	80005d6 <ir_tim_interrupt+0x9a>
			received_bits = 32;
 80005c2:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005c4:	2220      	movs	r2, #32
 80005c6:	601a      	str	r2, [r3, #0]
		break;
 80005c8:	e005      	b.n	80005d6 <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <ir_tim_interrupt+0xa4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
		break;
 80005d0:	e002      	b.n	80005d8 <ir_tim_interrupt+0x9c>
		return;
 80005d2:	bf00      	nop
 80005d4:	e000      	b.n	80005d8 <ir_tim_interrupt+0x9c>
		break;
 80005d6:	bf00      	nop
	}
}
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000038 	.word	0x20000038
 80005e4:	2000012c 	.word	0x2000012c
 80005e8:	20000034 	.word	0x20000034

080005ec <ir_receiver_init>:

void ir_receiver_init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim3);
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <ir_receiver_init+0x18>)
 80005f2:	f003 fb45 	bl	8003c80 <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005f6:	2100      	movs	r1, #0
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <ir_receiver_init+0x18>)
 80005fa:	f003 fd55 	bl	80040a8 <HAL_TIM_IC_Start_IT>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	2000012c 	.word	0x2000012c

08000608 <ir_read>:

int ir_read(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <ir_read+0x30>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b20      	cmp	r3, #32
 8000614:	d002      	beq.n	800061c <ir_read+0x14>
		return -1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e007      	b.n	800062c <ir_read+0x24>

	uint8_t value = received_value >> 16;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <ir_read+0x34>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <ir_read+0x30>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
	return value;
 800062a:	79fb      	ldrb	r3, [r7, #7]
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000038 	.word	0x20000038
 800063c:	20000034 	.word	0x20000034

08000640 <ir_sender_init>:
#include "ir_sender.h"
#include "tim.h"

void ir_sender_init(void){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //Nie potrzebne bo start jest przy wysyłaniu komendy
    HAL_TIM_Base_Start(&htim2);
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <ir_sender_init+0x10>)
 8000646:	f003 fb1b 	bl	8003c80 <HAL_TIM_Base_Start>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000e4 	.word	0x200000e4

08000654 <delay_us>:


void delay_us (uint16_t delay){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <delay_us+0x2c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2)<delay);
 8000666:	bf00      	nop
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <delay_us+0x2c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	429a      	cmp	r2, r3
 8000672:	d3f9      	bcc.n	8000668 <delay_us+0x14>
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	200000e4 	.word	0x200000e4

08000684 <NEC_SendCommand>:


// Funkcja do wysyłania całej komendy NEC
void NEC_SendCommand(uint8_t command) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
    // Wyślij ramkę startową
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Start nośnej
 800068e:	2100      	movs	r1, #0
 8000690:	4841      	ldr	r0, [pc, #260]	; (8000798 <NEC_SendCommand+0x114>)
 8000692:	f003 fb9d 	bl	8003dd0 <HAL_TIM_PWM_Start>
    delay_us(NEC_START_PULSE);         // Impuls 9ms
 8000696:	f242 3028 	movw	r0, #9000	; 0x2328
 800069a:	f7ff ffdb 	bl	8000654 <delay_us>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Stop nośnej
 800069e:	2100      	movs	r1, #0
 80006a0:	483d      	ldr	r0, [pc, #244]	; (8000798 <NEC_SendCommand+0x114>)
 80006a2:	f003 fc45 	bl	8003f30 <HAL_TIM_PWM_Stop>
    delay_us(NEC_START_PAUSE);         // Pauza 4.5ms
 80006a6:	f241 1094 	movw	r0, #4500	; 0x1194
 80006aa:	f7ff ffd3 	bl	8000654 <delay_us>


    //Adres i negacja adresu
    for (int i = 0; i < 8; i++) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e012      	b.n	80006da <NEC_SendCommand+0x56>
    	// Zawsze najpierw krótki impuls 560µs
    	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80006b4:	2100      	movs	r1, #0
 80006b6:	4838      	ldr	r0, [pc, #224]	; (8000798 <NEC_SendCommand+0x114>)
 80006b8:	f003 fb8a 	bl	8003dd0 <HAL_TIM_PWM_Start>
    	    delay_us(NEC_PULSE);
 80006bc:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006c0:	f7ff ffc8 	bl	8000654 <delay_us>
    	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80006c4:	2100      	movs	r1, #0
 80006c6:	4834      	ldr	r0, [pc, #208]	; (8000798 <NEC_SendCommand+0x114>)
 80006c8:	f003 fc32 	bl	8003f30 <HAL_TIM_PWM_Stop>
    	    delay_us(NEC_PAUSE_0);
 80006cc:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006d0:	f7ff ffc0 	bl	8000654 <delay_us>
    for (int i = 0; i < 8; i++) {
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	dde9      	ble.n	80006b4 <NEC_SendCommand+0x30>
    }

    for (int i = 0; i < 8; i++) {
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	e012      	b.n	800070c <NEC_SendCommand+0x88>
        	// Zawsze najpierw krótki impuls 560µs
        	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80006e6:	2100      	movs	r1, #0
 80006e8:	482b      	ldr	r0, [pc, #172]	; (8000798 <NEC_SendCommand+0x114>)
 80006ea:	f003 fb71 	bl	8003dd0 <HAL_TIM_PWM_Start>
        	    delay_us(NEC_PULSE);
 80006ee:	f44f 700c 	mov.w	r0, #560	; 0x230
 80006f2:	f7ff ffaf 	bl	8000654 <delay_us>
        	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80006f6:	2100      	movs	r1, #0
 80006f8:	4827      	ldr	r0, [pc, #156]	; (8000798 <NEC_SendCommand+0x114>)
 80006fa:	f003 fc19 	bl	8003f30 <HAL_TIM_PWM_Stop>
        	    delay_us(NEC_PAUSE_1);
 80006fe:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8000702:	f7ff ffa7 	bl	8000654 <delay_us>
    for (int i = 0; i < 8; i++) {
 8000706:	693b      	ldr	r3, [r7, #16]
 8000708:	3301      	adds	r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	2b07      	cmp	r3, #7
 8000710:	dde9      	ble.n	80006e6 <NEC_SendCommand+0x62>
        }

    // Wyślij bity komendy (zakładamy 8-bitową komendę)
    for (int i = 0; i < 8; i++) {
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e00d      	b.n	8000734 <NEC_SendCommand+0xb0>
        NEC_SendBit((command >> i) & 0x01);
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	fa42 f303 	asr.w	r3, r2, r3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f837 	bl	800079c <NEC_SendBit>
    for (int i = 0; i < 8; i++) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b07      	cmp	r3, #7
 8000738:	ddee      	ble.n	8000718 <NEC_SendCommand+0x94>
    }

    // Wyślij bity zanegowanej komendy (zakładamy 8-bitową komendę)
        for (int i = 0; i < 8; i++) {
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	e010      	b.n	8000762 <NEC_SendCommand+0xde>
            NEC_SendBit(~(command >> i) & 0x01);
 8000740:	79fa      	ldrb	r2, [r7, #7]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	fa42 f303 	asr.w	r3, r2, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf0c      	ite	eq
 8000750:	2301      	moveq	r3, #1
 8000752:	2300      	movne	r3, #0
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f820 	bl	800079c <NEC_SendBit>
        for (int i = 0; i < 8; i++) {
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3301      	adds	r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2b07      	cmp	r3, #7
 8000766:	ddeb      	ble.n	8000740 <NEC_SendCommand+0xbc>
        }

        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 8000768:	2100      	movs	r1, #0
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <NEC_SendCommand+0x114>)
 800076c:	f003 fb30 	bl	8003dd0 <HAL_TIM_PWM_Start>
                	    delay_us(NEC_PULSE);
 8000770:	f44f 700c 	mov.w	r0, #560	; 0x230
 8000774:	f7ff ff6e 	bl	8000654 <delay_us>
                	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 8000778:	2100      	movs	r1, #0
 800077a:	4807      	ldr	r0, [pc, #28]	; (8000798 <NEC_SendCommand+0x114>)
 800077c:	f003 fbd8 	bl	8003f30 <HAL_TIM_PWM_Stop>
                	    delay_us(NEC_PAUSE_1);
 8000780:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8000784:	f7ff ff66 	bl	8000654 <delay_us>

    // Opcjonalnie dodaj pauzę końcową
    delay_us(560);  // Koniec transmisji
 8000788:	f44f 700c 	mov.w	r0, #560	; 0x230
 800078c:	f7ff ff62 	bl	8000654 <delay_us>
}
 8000790:	bf00      	nop
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000009c 	.word	0x2000009c

0800079c <NEC_SendBit>:

// Funkcja do wysyłania pojedynczego bitu
void NEC_SendBit(uint8_t bit) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
    // Zawsze najpierw krótki impuls 560µs
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // Włącz nośną
 80007a6:	2100      	movs	r1, #0
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <NEC_SendBit+0x44>)
 80007aa:	f003 fb11 	bl	8003dd0 <HAL_TIM_PWM_Start>
    delay_us(NEC_PULSE);
 80007ae:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007b2:	f7ff ff4f 	bl	8000654 <delay_us>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);   // Wyłącz nośną
 80007b6:	2100      	movs	r1, #0
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <NEC_SendBit+0x44>)
 80007ba:	f003 fbb9 	bl	8003f30 <HAL_TIM_PWM_Stop>

    // Pauza zależna od wartości bitu (bit 0 - 560µs, bit 1 - 1680µs)
    if (bit == 0) {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <NEC_SendBit+0x32>
    	delay_us(NEC_PAUSE_0);
 80007c4:	f44f 700c 	mov.w	r0, #560	; 0x230
 80007c8:	f7ff ff44 	bl	8000654 <delay_us>
    } else {
    	delay_us(NEC_PAUSE_1);
    }
}
 80007cc:	e003      	b.n	80007d6 <NEC_SendBit+0x3a>
    	delay_us(NEC_PAUSE_1);
 80007ce:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 80007d2:	f7ff ff3f 	bl	8000654 <delay_us>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000009c 	.word	0x2000009c

080007e4 <HAL_TIM_IC_CaptureCallback>:
static void MX_USART1_UART_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x30>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d108      	bne.n	8000806 <HAL_TIM_IC_CaptureCallback+0x22>
  {
    switch (HAL_TIM_GetActiveChannel(&htim3))
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x30>)
 80007f6:	f004 f949 	bl	8004a8c <HAL_TIM_GetActiveChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d104      	bne.n	800080a <HAL_TIM_IC_CaptureCallback+0x26>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 8000800:	f7ff fe9c 	bl	800053c <ir_tim_interrupt>
        break;
 8000804:	e002      	b.n	800080c <HAL_TIM_IC_CaptureCallback+0x28>
      default:
        break;
    }
  }
 8000806:	bf00      	nop
 8000808:	e000      	b.n	800080c <HAL_TIM_IC_CaptureCallback+0x28>
        break;
 800080a:	bf00      	nop
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000012c 	.word	0x2000012c

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0c4      	sub	sp, #272	; 0x110
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f001 fc4f 	bl	80020c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f8f1 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 fb27 	bl	8000e78 <MX_GPIO_Init>
  MX_TIM1_Init();
 800082a:	f000 f99f 	bl	8000b6c <MX_TIM1_Init>
  MX_TIM2_Init();
 800082e:	f000 fa21 	bl	8000c74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000832:	f000 fa6b 	bl	8000d0c <MX_TIM3_Init>
  MX_SPI2_Init();
 8000836:	f000 f963 	bl	8000b00 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800083a:	f000 faf3 	bl	8000e24 <MX_USART1_UART_Init>
  MX_CRC_Init();
 800083e:	f000 f94b 	bl	8000ad8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  //nRF Config
  nRF24_Init(&hspi2);
 8000842:	4865      	ldr	r0, [pc, #404]	; (80009d8 <main+0x1c0>)
 8000844:	f000 ffea 	bl	800181c <nRF24_Init>

  __CRC_CLK_ENABLE();
 8000848:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800084c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	4b61      	ldr	r3, [pc, #388]	; (80009dc <main+0x1c4>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	4a60      	ldr	r2, [pc, #384]	; (80009dc <main+0x1c4>)
 800085a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800085e:	6313      	str	r3, [r2, #48]	; 0x30
 8000860:	4b5e      	ldr	r3, [pc, #376]	; (80009dc <main+0x1c4>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8000868:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800086c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000876:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800087a:	681b      	ldr	r3, [r3, #0]
  nRF24_SetRXAddress(0,(uint8_t *)"Nad");
 800087c:	4958      	ldr	r1, [pc, #352]	; (80009e0 <main+0x1c8>)
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fe79 	bl	8001576 <nRF24_SetRXAddress>
  nRF24_SetTXAddress((uint8_t *)"Nad");
 8000884:	4856      	ldr	r0, [pc, #344]	; (80009e0 <main+0x1c8>)
 8000886:	f000 feaf 	bl	80015e8 <nRF24_SetTXAddress>

  //IR Config
  ir_sender_init();
 800088a:	f7ff fed9 	bl	8000640 <ir_sender_init>
  ir_receiver_init();
 800088e:	f7ff fead 	bl	80005ec <ir_receiver_init>


       uint8_t Message[] =
 8000892:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800089a:	4a52      	ldr	r2, [pc, #328]	; (80009e4 <main+0x1cc>)
 800089c:	4618      	mov	r0, r3
 800089e:	4611      	mov	r1, r2
 80008a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a4:	461a      	mov	r2, r3
 80008a6:	f006 fc67 	bl	8007178 <memcpy>
          0x27, 0xF7, 0xED, 0x0C, 0xF5, 0x1D, 0xC1, 0x6F, 0xA4, 0x00, 0x45, 0x8A, 0x22, 0x09, 0x84, 0xD1, 0xB4, 0xB1, 0x18,
          0x44, 0x76, 0xC9, 0xD6, 0xA7, 0xC6, 0x72, 0x5B, 0x43, 0x48, 0x91, 0x85, 0xBB, 0x7F, 0xB1, 0x44, 0x73, 0x45, 0xF5,
          0x5A, 0x7E, 0x72, 0x3D, 0xA1, 0x8C, 0x43, 0xAE, 0x83, 0xD9, 0xB4, 0xCB, 0x1D, 0xDC, 0x26, 0x3F, 0x7F, 0x1E, 0xFE,
          0x83, 0x6C, 0x9A, 0x0D, 0xEA, 0xE1, 0x94, 0x55, 0xF1
        };
    			buffer_add(Message, sizeof(Message));
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f93c 	bl	8001b30 <buffer_add>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch (transmission_step) {
 80008b8:	4b4b      	ldr	r3, [pc, #300]	; (80009e8 <main+0x1d0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b07      	cmp	r3, #7
 80008be:	d8fb      	bhi.n	80008b8 <main+0xa0>
 80008c0:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <main+0xb0>)
 80008c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c6:	bf00      	nop
 80008c8:	080008e9 	.word	0x080008e9
 80008cc:	08000915 	.word	0x08000915
 80008d0:	0800095b 	.word	0x0800095b
 80008d4:	08000967 	.word	0x08000967
 80008d8:	08000983 	.word	0x08000983
 80008dc:	0800098f 	.word	0x0800098f
 80008e0:	080009a9 	.word	0x080009a9
 80008e4:	080009b9 	.word	0x080009b9
	    case 0: {
	      int value = ir_read();
 80008e8:	f7ff fe8e 	bl	8000608 <ir_read>
 80008ec:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	      if (value != -1) {
 80008f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d065      	beq.n	80009c6 <main+0x1ae>
	        if (value == IR_CODE_ONOFF) {
 80008fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008fe:	2b0d      	cmp	r3, #13
 8000900:	d161      	bne.n	80009c6 <main+0x1ae>
	          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000906:	4839      	ldr	r0, [pc, #228]	; (80009ec <main+0x1d4>)
 8000908:	f001 ff30 	bl	800276c <HAL_GPIO_TogglePin>
	          transmission_step = 1;
 800090c:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <main+0x1d0>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
	        }
	      }
	      break;
 8000912:	e058      	b.n	80009c6 <main+0x1ae>
	    }

	    case 1: {
	      uint32_t currentTime = HAL_GetTick();  // Pobranie aktualnego czasu w ms
 8000914:	f001 fc38 	bl	8002188 <HAL_GetTick>
 8000918:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	      if ((currentTime - lastCommandTime) >= 1000) {
 800091c:	4b34      	ldr	r3, [pc, #208]	; (80009f0 <main+0x1d8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800092a:	d30e      	bcc.n	800094a <main+0x132>
	        NEC_SendCommand(command);       // Wysłanie komendy
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <main+0x1dc>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fea7 	bl	8000684 <NEC_SendCommand>
	        lastCommandTime = currentTime;  // Aktualizacja czasu ostatniego wysłania
 8000936:	4a2e      	ldr	r2, [pc, #184]	; (80009f0 <main+0x1d8>)
 8000938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800093c:	6013      	str	r3, [r2, #0]
	        ir_send_counter += 1;
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <main+0x1e0>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <main+0x1e0>)
 8000948:	701a      	strb	r2, [r3, #0]
	      }
	      if (ir_send_counter >= 6) {
 800094a:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <main+0x1e0>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b05      	cmp	r3, #5
 8000950:	d93b      	bls.n	80009ca <main+0x1b2>
	        transmission_step = 2;
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <main+0x1d0>)
 8000954:	2202      	movs	r2, #2
 8000956:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8000958:	e037      	b.n	80009ca <main+0x1b2>
	    }

	    case 2: {
	      nRF24_TX_Mode();
 800095a:	f000 fc35 	bl	80011c8 <nRF24_TX_Mode>
	      transmission_step = 3;
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <main+0x1d0>)
 8000960:	2203      	movs	r2, #3
 8000962:	701a      	strb	r2, [r3, #0]
	      break;
 8000964:	e036      	b.n	80009d4 <main+0x1bc>
	    }

	    case 3: {
	      sd_status = send_message(50);
 8000966:	2032      	movs	r0, #50	; 0x32
 8000968:	f001 f962 	bl	8001c30 <send_message>
 800096c:	4603      	mov	r3, r0
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <main+0x1e4>)
 8000970:	6013      	str	r3, [r2, #0]
	      if (sd_status == 1) {
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <main+0x1e4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d129      	bne.n	80009ce <main+0x1b6>
	        transmission_step = 4;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <main+0x1d0>)
 800097c:	2204      	movs	r2, #4
 800097e:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 8000980:	e025      	b.n	80009ce <main+0x1b6>
	    }

	    case 4: {
	      nRF24_RX_Mode();
 8000982:	f000 fbed 	bl	8001160 <nRF24_RX_Mode>

	      transmission_step = 5;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <main+0x1d0>)
 8000988:	2205      	movs	r2, #5
 800098a:	701a      	strb	r2, [r3, #0]
	      break;
 800098c:	e022      	b.n	80009d4 <main+0x1bc>
	    }

	    case 5: {
	      rv_status = receive_message();
 800098e:	f001 f843 	bl	8001a18 <receive_message>
 8000992:	4603      	mov	r3, r0
 8000994:	4a1a      	ldr	r2, [pc, #104]	; (8000a00 <main+0x1e8>)
 8000996:	6013      	str	r3, [r2, #0]
	      if (rv_status == 1) {
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <main+0x1e8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d118      	bne.n	80009d2 <main+0x1ba>
	        transmission_step = 6;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <main+0x1d0>)
 80009a2:	2206      	movs	r2, #6
 80009a4:	701a      	strb	r2, [r3, #0]
	      }
	      break;
 80009a6:	e014      	b.n	80009d2 <main+0x1ba>
	    }
	    case 6: {
	      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009a8:	2102      	movs	r1, #2
 80009aa:	4816      	ldr	r0, [pc, #88]	; (8000a04 <main+0x1ec>)
 80009ac:	f001 fede 	bl	800276c <HAL_GPIO_TogglePin>
	      transmission_step = 7;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <main+0x1d0>)
 80009b2:	2207      	movs	r2, #7
 80009b4:	701a      	strb	r2, [r3, #0]
	      break;
 80009b6:	e00d      	b.n	80009d4 <main+0x1bc>
	    }

	    case 7: {
	      transmission_step = 0;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <main+0x1d0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
	      ir_send_counter = 0;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <main+0x1e0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]

	      break;
 80009c4:	e006      	b.n	80009d4 <main+0x1bc>
	      break;
 80009c6:	bf00      	nop
 80009c8:	e776      	b.n	80008b8 <main+0xa0>
	      break;
 80009ca:	bf00      	nop
 80009cc:	e774      	b.n	80008b8 <main+0xa0>
	      break;
 80009ce:	bf00      	nop
 80009d0:	e772      	b.n	80008b8 <main+0xa0>
	      break;
 80009d2:	bf00      	nop
	  switch (transmission_step) {
 80009d4:	e770      	b.n	80008b8 <main+0xa0>
 80009d6:	bf00      	nop
 80009d8:	20000044 	.word	0x20000044
 80009dc:	40023800 	.word	0x40023800
 80009e0:	080071bc 	.word	0x080071bc
 80009e4:	080071c0 	.word	0x080071c0
 80009e8:	200001c0 	.word	0x200001c0
 80009ec:	40020800 	.word	0x40020800
 80009f0:	200001bc 	.word	0x200001bc
 80009f4:	20000000 	.word	0x20000000
 80009f8:	200001c1 	.word	0x200001c1
 80009fc:	200001c8 	.word	0x200001c8
 8000a00:	200001c4 	.word	0x200001c4
 8000a04:	40020000 	.word	0x40020000

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2230      	movs	r2, #48	; 0x30
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f006 fbbc 	bl	8007194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <SystemClock_Config+0xc8>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <SystemClock_Config+0xc8>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <SystemClock_Config+0xc8>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a48:	2300      	movs	r3, #0
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a64:	2302      	movs	r3, #2
 8000a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fea9 	bl	80027e4 <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a98:	f000 fa8e 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 f90b 	bl	8002cd4 <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ac4:	f000 fa78 	bl	8000fb8 <Error_Handler>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3750      	adds	r7, #80	; 0x50
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_CRC_Init+0x20>)
 8000ade:	4a07      	ldr	r2, [pc, #28]	; (8000afc <MX_CRC_Init+0x24>)
 8000ae0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_CRC_Init+0x20>)
 8000ae4:	f001 fc8b 	bl	80023fe <HAL_CRC_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000aee:	f000 fa63 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000003c 	.word	0x2000003c
 8000afc:	40023000 	.word	0x40023000

08000b00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <MX_SPI2_Init+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b34:	2210      	movs	r2, #16
 8000b36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_SPI2_Init+0x64>)
 8000b52:	f002 fa9d 	bl	8003090 <HAL_SPI_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b5c:	f000 fa2c 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000044 	.word	0x20000044
 8000b68:	40003800 	.word	0x40003800

08000b6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b092      	sub	sp, #72	; 0x48
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]
 8000b8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2220      	movs	r2, #32
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f006 fafc 	bl	8007194 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b9c:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000b9e:	4a34      	ldr	r2, [pc, #208]	; (8000c70 <MX_TIM1_Init+0x104>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2631;
 8000bae:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000bb0:	f640 2247 	movw	r2, #2631	; 0xa47
 8000bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bc8:	4828      	ldr	r0, [pc, #160]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000bca:	f003 f8b1 	bl	8003d30 <HAL_TIM_PWM_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000bd4:	f000 f9f0 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000be0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000be4:	4619      	mov	r1, r3
 8000be6:	4821      	ldr	r0, [pc, #132]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000be8:	f004 fbc8 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000bf2:	f000 f9e1 	bl	8000fb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf6:	2360      	movs	r3, #96	; 0x60
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1315;
 8000bfa:	f240 5323 	movw	r3, #1315	; 0x523
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c04:	2300      	movs	r3, #0
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000c1e:	f003 fd01 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c28:	f000 f9c6 	bl	8000fb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000c50:	f004 fc00 	bl	8005454 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000c5a:	f000 f9ad 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <MX_TIM1_Init+0x100>)
 8000c60:	f001 f93a 	bl	8001ed8 <HAL_TIM_MspPostInit>

}
 8000c64:	bf00      	nop
 8000c66:	3748      	adds	r7, #72	; 0x48
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000009c 	.word	0x2000009c
 8000c70:	40010000 	.word	0x40010000

08000c74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000c9a:	2263      	movs	r2, #99	; 0x63
 8000c9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8000caa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cba:	f002 ff91 	bl	8003be0 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cc4:	f000 f978 	bl	8000fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cd6:	f003 fd67 	bl	80047a8 <HAL_TIM_ConfigClockSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ce0:	f000 f96a 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cf2:	f004 fb43 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cfc:	f000 f95c 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200000e4 	.word	0x200000e4

08000d0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b090      	sub	sp, #64	; 0x40
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d46:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000d48:	4a35      	ldr	r2, [pc, #212]	; (8000e20 <MX_TIM3_Init+0x114>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000d4e:	2263      	movs	r2, #99	; 0x63
 8000d50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d58:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d6c:	482b      	ldr	r0, [pc, #172]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000d6e:	f002 ff37 	bl	8003be0 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d78:	f000 f91e 	bl	8000fb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d86:	4619      	mov	r1, r3
 8000d88:	4824      	ldr	r0, [pc, #144]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000d8a:	f003 fd0d 	bl	80047a8 <HAL_TIM_ConfigClockSource>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d94:	f000 f910 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d98:	4820      	ldr	r0, [pc, #128]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000d9a:	f003 f92d 	bl	8003ff8 <HAL_TIM_IC_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000da4:	f000 f908 	bl	8000fb8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000da8:	2304      	movs	r3, #4
 8000daa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000dac:	2340      	movs	r3, #64	; 0x40
 8000dae:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4817      	ldr	r0, [pc, #92]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000dc0:	f003 fdb9 	bl	8004936 <HAL_TIM_SlaveConfigSynchro>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000dca:	f000 f8f5 	bl	8000fb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480f      	ldr	r0, [pc, #60]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000dde:	f004 facd 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000de8:	f000 f8e6 	bl	8000fb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dec:	2302      	movs	r3, #2
 8000dee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000df0:	2301      	movs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_TIM3_Init+0x110>)
 8000e04:	f003 fb72 	bl	80044ec <HAL_TIM_IC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000e0e:	f000 f8d3 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3740      	adds	r7, #64	; 0x40
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000012c 	.word	0x2000012c
 8000e20:	40000400 	.word	0x40000400

08000e24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USART1_UART_Init+0x4c>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <MX_USART1_UART_Init+0x50>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_USART1_UART_Init+0x4c>)
 8000e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USART1_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USART1_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USART1_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USART1_UART_Init+0x4c>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USART1_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USART1_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USART1_UART_Init+0x4c>)
 8000e5c:	f004 fb5d 	bl	800551a <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e66:	f000 f8a7 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000174 	.word	0x20000174
 8000e74:	40011000 	.word	0x40011000

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a44      	ldr	r2, [pc, #272]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a3d      	ldr	r2, [pc, #244]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a36      	ldr	r2, [pc, #216]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a2f      	ldr	r2, [pc, #188]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <MX_GPIO_Init+0x130>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f04:	4829      	ldr	r0, [pc, #164]	; (8000fac <MX_GPIO_Init+0x134>)
 8000f06:	f001 fc19 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4828      	ldr	r0, [pc, #160]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000f10:	f001 fc14 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_NRF_Pin|CS_NRF_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2118      	movs	r1, #24
 8000f18:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f1a:	f001 fc0f 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	481d      	ldr	r0, [pc, #116]	; (8000fac <MX_GPIO_Init+0x134>)
 8000f38:	f001 fa7e 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4817      	ldr	r0, [pc, #92]	; (8000fb0 <MX_GPIO_Init+0x138>)
 8000f54:	f001 fa70 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_NRF_Pin CS_NRF_Pin */
  GPIO_InitStruct.Pin = CE_NRF_Pin|CS_NRF_Pin;
 8000f58:	2318      	movs	r3, #24
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f70:	f001 fa62 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_NRF_Pin */
  GPIO_InitStruct.Pin = IRQ_NRF_Pin;
 8000f74:	2320      	movs	r3, #32
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f78:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_NRF_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <MX_GPIO_Init+0x13c>)
 8000f8a:	f001 fa55 	bl	8002438 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2017      	movs	r0, #23
 8000f94:	f001 f9fd 	bl	8002392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f98:	2017      	movs	r0, #23
 8000f9a:	f001 fa16 	bl	80023ca <HAL_NVIC_EnableIRQ>

}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <Error_Handler+0x8>

08000fc2 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(CE_NRF_GPIO_Port, CE_NRF_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(Time);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 f8e4 	bl	800219c <HAL_Delay>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <nRF24_SendSpi+0x28>)
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	f002 f8d4 	bl	80031a2 <HAL_SPI_Transmit>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200001cc 	.word	0x200001cc

08001008 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <nRF24_ReadSpi+0x28>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	b29a      	uxth	r2, r3
 800101c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	f002 f9fa 	bl	800341a <HAL_SPI_Receive>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001cc 	.word	0x200001cc

08001034 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001042:	2200      	movs	r2, #0
 8001044:	2110      	movs	r1, #16
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <nRF24_ReadRegister+0x44>)
 8001048:	f001 fb78 	bl	800273c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	2101      	movs	r1, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ffc3 	bl	8000fdc <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001056:	f107 030f 	add.w	r3, r7, #15
 800105a:	2101      	movs	r1, #1
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ffd3 	bl	8001008 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001062:	2201      	movs	r2, #1
 8001064:	2110      	movs	r1, #16
 8001066:	4804      	ldr	r0, [pc, #16]	; (8001078 <nRF24_ReadRegister+0x44>)
 8001068:	f001 fb68 	bl	800273c <HAL_GPIO_WritePin>

	return result;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020400 	.word	0x40020400

0800107c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001090:	2200      	movs	r2, #0
 8001092:	2110      	movs	r1, #16
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <nRF24_ReadRegisters+0x44>)
 8001096:	f001 fb51 	bl	800273c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	2101      	movs	r1, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff9c 	bl	8000fdc <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	4619      	mov	r1, r3
 80010a8:	6838      	ldr	r0, [r7, #0]
 80010aa:	f7ff ffad 	bl	8001008 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 80010ae:	2201      	movs	r2, #1
 80010b0:	2110      	movs	r1, #16
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <nRF24_ReadRegisters+0x44>)
 80010b4:	f001 fb42 	bl	800273c <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020400 	.word	0x40020400

080010c4 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f043 0320 	orr.w	r3, r3, #32
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <nRF24_WriteRegister+0x48>)
 80010e8:	f001 fb28 	bl	800273c <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2102      	movs	r1, #2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff72 	bl	8000fdc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 80010f8:	2201      	movs	r2, #1
 80010fa:	2110      	movs	r1, #16
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <nRF24_WriteRegister+0x48>)
 80010fe:	f001 fb1d 	bl	800273c <HAL_GPIO_WritePin>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020400 	.word	0x40020400

08001110 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f043 0320 	orr.w	r3, r3, #32
 8001126:	b2db      	uxtb	r3, r3
 8001128:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800112a:	2200      	movs	r2, #0
 800112c:	2110      	movs	r1, #16
 800112e:	480b      	ldr	r0, [pc, #44]	; (800115c <nRF24_WriteRegisters+0x4c>)
 8001130:	f001 fb04 	bl	800273c <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	2101      	movs	r1, #1
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff4f 	bl	8000fdc <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	4619      	mov	r1, r3
 8001142:	6838      	ldr	r0, [r7, #0]
 8001144:	f7ff ff4a 	bl	8000fdc <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001148:	2201      	movs	r2, #1
 800114a:	2110      	movs	r1, #16
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <nRF24_WriteRegisters+0x4c>)
 800114e:	f001 faf5 	bl	800273c <HAL_GPIO_WritePin>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40020400 	.word	0x40020400

08001160 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001166:	2200      	movs	r2, #0
 8001168:	2108      	movs	r1, #8
 800116a:	4815      	ldr	r0, [pc, #84]	; (80011c0 <nRF24_RX_Mode+0x60>)
 800116c:	f001 fae6 	bl	800273c <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001170:	f000 f852 	bl	8001218 <nRF24_ReadConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001178:	4912      	ldr	r1, [pc, #72]	; (80011c4 <nRF24_RX_Mode+0x64>)
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f9fb 	bl	8001576 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f848 	bl	8001228 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001198:	2070      	movs	r0, #112	; 0x70
 800119a:	f000 f8a0 	bl	80012de <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 800119e:	f000 f8ad 	bl	80012fc <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 80011a2:	f000 f8c5 	bl	8001330 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 80011a6:	2201      	movs	r2, #1
 80011a8:	2108      	movs	r1, #8
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <nRF24_RX_Mode+0x60>)
 80011ac:	f001 fac6 	bl	800273c <HAL_GPIO_WritePin>
	nRF24_Delay(20);
 80011b0:	2014      	movs	r0, #20
 80011b2:	f7ff ff06 	bl	8000fc2 <nRF24_Delay>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40020400 	.word	0x40020400
 80011c4:	200001d0 	.word	0x200001d0

080011c8 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 80011ce:	2200      	movs	r2, #0
 80011d0:	2108      	movs	r1, #8
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <nRF24_TX_Mode+0x4c>)
 80011d4:	f001 fab2 	bl	800273c <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 80011d8:	f000 f81e 	bl	8001218 <nRF24_ReadConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f043 0302 	orr.w	r3, r3, #2
 80011e6:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f023 0301 	bic.w	r3, r3, #1
 80011ee:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f818 	bl	8001228 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 80011f8:	2070      	movs	r0, #112	; 0x70
 80011fa:	f000 f870 	bl	80012de <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 80011fe:	f000 f87d 	bl	80012fc <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001202:	f000 f895 	bl	8001330 <nRF24_FlushTX>

	nRF24_Delay(20);
 8001206:	2014      	movs	r0, #20
 8001208:	f7ff fedb 	bl	8000fc2 <nRF24_Delay>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40020400 	.word	0x40020400

08001218 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff ff09 	bl	8001034 <nRF24_ReadRegister>
 8001222:	4603      	mov	r3, r0
}
 8001224:	4618      	mov	r0, r3
 8001226:	bd80      	pop	{r7, pc}

08001228 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4619      	mov	r1, r3
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff ff44 	bl	80010c4 <nRF24_WriteRegister>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800124e:	2006      	movs	r0, #6
 8001250:	f7ff fef0 	bl	8001034 <nRF24_ReadRegister>
 8001254:	4603      	mov	r3, r0
 8001256:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	f023 0307 	bic.w	r3, r3, #7
 800125e:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	b25a      	sxtb	r2, r3
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	4313      	orrs	r3, r2
 800126c:	b25b      	sxtb	r3, r3
 800126e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	4619      	mov	r1, r3
 8001274:	2006      	movs	r0, #6
 8001276:	f7ff ff25 	bl	80010c4 <nRF24_WriteRegister>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 800128c:	2006      	movs	r0, #6
 800128e:	f7ff fed1 	bl	8001034 <nRF24_ReadRegister>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800129c:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d104      	bne.n	80012ae <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f043 0320 	orr.w	r3, r3, #32
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e006      	b.n	80012bc <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d103      	bne.n	80012bc <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	4619      	mov	r1, r3
 80012c0:	2006      	movs	r0, #6
 80012c2:	f7ff feff 	bl	80010c4 <nRF24_WriteRegister>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 80012d2:	2007      	movs	r0, #7
 80012d4:	f7ff feae 	bl	8001034 <nRF24_ReadRegister>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}

080012de <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	4619      	mov	r1, r3
 80012ec:	2007      	movs	r0, #7
 80012ee:	f7ff fee9 	bl	80010c4 <nRF24_WriteRegister>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8001302:	23e2      	movs	r3, #226	; 0xe2
 8001304:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001306:	2200      	movs	r2, #0
 8001308:	2110      	movs	r1, #16
 800130a:	4808      	ldr	r0, [pc, #32]	; (800132c <nRF24_FlushRX+0x30>)
 800130c:	f001 fa16 	bl	800273c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	2101      	movs	r1, #1
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe61 	bl	8000fdc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800131a:	2201      	movs	r2, #1
 800131c:	2110      	movs	r1, #16
 800131e:	4803      	ldr	r0, [pc, #12]	; (800132c <nRF24_FlushRX+0x30>)
 8001320:	f001 fa0c 	bl	800273c <HAL_GPIO_WritePin>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40020400 	.word	0x40020400

08001330 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8001336:	23e1      	movs	r3, #225	; 0xe1
 8001338:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800133a:	2200      	movs	r2, #0
 800133c:	2110      	movs	r1, #16
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <nRF24_FlushTX+0x30>)
 8001340:	f001 f9fc 	bl	800273c <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8001344:	1dfb      	adds	r3, r7, #7
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fe47 	bl	8000fdc <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800134e:	2201      	movs	r2, #1
 8001350:	2110      	movs	r1, #16
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <nRF24_FlushTX+0x30>)
 8001354:	f001 f9f2 	bl	800273c <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40020400 	.word	0x40020400

08001364 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800136e:	f7ff ff53 	bl	8001218 <nRF24_ReadConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d004      	beq.n	8001386 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e003      	b.n	800138e <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	f023 0308 	bic.w	r3, r3, #8
 800138c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff49 	bl	8001228 <nRF24_WriteConfig>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80013a8:	f7ff ff36 	bl	8001218 <nRF24_ReadConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d104      	bne.n	80013c0 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e003      	b.n	80013c8 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff2c 	bl	8001228 <nRF24_WriteConfig>
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	b25a      	sxtb	r2, r3
 80013ee:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	2004      	movs	r0, #4
 8001402:	f7ff fe5f 	bl	80010c4 <nRF24_WriteRegister>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	2005      	movs	r0, #5
 8001424:	f7ff fe4e 	bl	80010c4 <nRF24_WriteRegister>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	460a      	mov	r2, r1
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	4613      	mov	r3, r2
 800143e:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2b05      	cmp	r3, #5
 8001444:	d901      	bls.n	800144a <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 8001446:	2305      	movs	r3, #5
 8001448:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	3311      	adds	r3, #17
 800144e:	b2da      	uxtb	r2, r3
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f7ff fe32 	bl	80010c4 <nRF24_WriteRegister>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	4613      	mov	r3, r2
 8001476:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d901      	bls.n	8001482 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800147e:	2305      	movs	r3, #5
 8001480:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8001482:	2002      	movs	r0, #2
 8001484:	f7ff fdd6 	bl	8001034 <nRF24_ReadRegister>
 8001488:	4603      	mov	r3, r0
 800148a:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10a      	bne.n	80014a8 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2201      	movs	r2, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	b25a      	sxtb	r2, r3
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e00b      	b.n	80014c0 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	2201      	movs	r2, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4013      	ands	r3, r2
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	4619      	mov	r1, r3
 80014c4:	2002      	movs	r0, #2
 80014c6:	f7ff fdfd 	bl	80010c4 <nRF24_WriteRegister>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	460a      	mov	r2, r1
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	4613      	mov	r3, r2
 80014e0:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d901      	bls.n	80014ec <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 80014e8:	2305      	movs	r3, #5
 80014ea:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff fda1 	bl	8001034 <nRF24_ReadRegister>
 80014f2:	4603      	mov	r3, r0
 80014f4:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80014f6:	79bb      	ldrb	r3, [r7, #6]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d10a      	bne.n	8001512 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	2201      	movs	r2, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	b25a      	sxtb	r2, r3
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4313      	orrs	r3, r2
 800150c:	b25b      	sxtb	r3, r3
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e00b      	b.n	800152a <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2201      	movs	r2, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	b25b      	sxtb	r3, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	b25a      	sxtb	r2, r3
 8001520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001524:	4013      	ands	r3, r2
 8001526:	b25b      	sxtb	r3, r3
 8001528:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	4619      	mov	r1, r3
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff fdc8 	bl	80010c4 <nRF24_WriteRegister>
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d901      	bls.n	8001550 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 800154c:	2305      	movs	r3, #5
 800154e:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d801      	bhi.n	800155a <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 8001556:	2303      	movs	r3, #3
 8001558:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	3b02      	subs	r3, #2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	2003      	movs	r0, #3
 800156a:	f7ff fdab 	bl	80010c4 <nRF24_WriteRegister>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	6039      	str	r1, [r7, #0]
 8001580:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <nRF24_SetRXAddress+0x18>
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d11d      	bne.n	80015ca <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	e00d      	b.n	80015b0 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	441a      	add	r2, r3
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	f1c3 0302 	rsb	r3, r3, #2
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	3310      	adds	r3, #16
 80015a4:	443b      	add	r3, r7
 80015a6:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	3301      	adds	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d9ee      	bls.n	8001594 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	330a      	adds	r3, #10
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f107 010c 	add.w	r1, r7, #12
 80015c0:	2203      	movs	r2, #3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fda4 	bl	8001110 <nRF24_WriteRegisters>
	{
 80015c8:	e00a      	b.n	80015e0 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	330a      	adds	r3, #10
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	3302      	adds	r3, #2
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4619      	mov	r1, r3
 80015d8:	4610      	mov	r0, r2
 80015da:	f7ff fd73 	bl	80010c4 <nRF24_WriteRegister>
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2203      	movs	r2, #3
 80015f6:	4619      	mov	r1, r3
 80015f8:	200a      	movs	r0, #10
 80015fa:	f7ff fd3f 	bl	800107c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e00c      	b.n	800161e <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	f1c3 0302 	rsb	r3, r3, #2
 800160c:	3210      	adds	r2, #16
 800160e:	443a      	add	r2, r7
 8001610:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <nRF24_SetTXAddress+0x88>)
 8001616:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	3301      	adds	r3, #1
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d9ef      	bls.n	8001604 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e00d      	b.n	8001646 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	441a      	add	r2, r3
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	f1c3 0302 	rsb	r3, r3, #2
 8001636:	7812      	ldrb	r2, [r2, #0]
 8001638:	3310      	adds	r3, #16
 800163a:	443b      	add	r3, r7
 800163c:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	3301      	adds	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d9ee      	bls.n	800162a <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2203      	movs	r2, #3
 8001652:	4619      	mov	r1, r3
 8001654:	200a      	movs	r0, #10
 8001656:	f7ff fd5b 	bl	8001110 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2203      	movs	r2, #3
 8001660:	4619      	mov	r1, r3
 8001662:	2010      	movs	r0, #16
 8001664:	f7ff fd54 	bl	8001110 <nRF24_WriteRegisters>

}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200001d0 	.word	0x200001d0

08001674 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 800167a:	f7ff fe28 	bl	80012ce <nRF24_ReadStatus>
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001688:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe26 	bl	80012de <nRF24_WriteStatus>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80016a4:	f7ff fdb8 	bl	8001218 <nRF24_ReadConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d104      	bne.n	80016bc <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	e003      	b.n	80016c4 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016c2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fdae 	bl	8001228 <nRF24_WriteConfig>
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80016de:	f7ff fd9b 	bl	8001218 <nRF24_ReadConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d104      	bne.n	80016f6 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	f043 0320 	orr.w	r3, r3, #32
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	e003      	b.n	80016fe <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	f023 0320 	bic.w	r3, r3, #32
 80016fc:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fd91 	bl	8001228 <nRF24_WriteConfig>
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8001718:	f7ff fd7e 	bl	8001218 <nRF24_ReadConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d104      	bne.n	8001730 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	e003      	b.n	8001738 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	f023 0310 	bic.w	r3, r3, #16
 8001736:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fd74 	bl	8001228 <nRF24_WriteConfig>
}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8001750:	2220      	movs	r2, #32
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	20a0      	movs	r0, #160	; 0xa0
 8001756:	f7ff fcdb 	bl	8001110 <nRF24_WriteRegisters>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 800176a:	2201      	movs	r2, #1
 800176c:	2108      	movs	r1, #8
 800176e:	4811      	ldr	r0, [pc, #68]	; (80017b4 <nRF24_WaitTX+0x50>)
 8001770:	f000 ffe4 	bl	800273c <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fc24 	bl	8000fc2 <nRF24_Delay>
	NRF24_CE_LOW;
 800177a:	2200      	movs	r2, #0
 800177c:	2108      	movs	r1, #8
 800177e:	480d      	ldr	r0, [pc, #52]	; (80017b4 <nRF24_WaitTX+0x50>)
 8001780:	f000 ffdc 	bl	800273c <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff fc1c 	bl	8000fc2 <nRF24_Delay>
		status = nRF24_ReadStatus();
 800178a:	f7ff fda0 	bl	80012ce <nRF24_ReadStatus>
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	d104      	bne.n	80017a6 <nRF24_WaitTX+0x42>
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0ee      	beq.n	8001784 <nRF24_WaitTX+0x20>

	// Clear the relevant status flags
	    nRF24_WriteStatus((1 << NRF24_MAX_RT) | (1 << NRF24_TX_DS));
 80017a6:	2030      	movs	r0, #48	; 0x30
 80017a8:	f7ff fd99 	bl	80012de <nRF24_WriteStatus>

}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40020400 	.word	0x40020400

080017b8 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80017c0:	2220      	movs	r2, #32
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	2061      	movs	r0, #97	; 0x61
 80017c6:	f7ff fc59 	bl	800107c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 80017ca:	2140      	movs	r1, #64	; 0x40
 80017cc:	2007      	movs	r0, #7
 80017ce:	f7ff fc79 	bl	80010c4 <nRF24_WriteRegister>
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
//	}
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <nRF24_RXAvailible>:
{

}

uint8_t nRF24_RXAvailible(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80017e2:	f7ff fd74 	bl	80012ce <nRF24_ReadStatus>
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]

	// RX FIFO Interrupt
	if ((status & (1 << 6)))
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00c      	beq.n	800180e <nRF24_RXAvailible+0x32>
	{
		nrf24_rx_flag = 1;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <nRF24_RXAvailible+0x3c>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
		status |= (1<<6); // Interrupt flag clear
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001800:	71fb      	strb	r3, [r7, #7]
		nRF24_WriteStatus(status);
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fd6a 	bl	80012de <nRF24_WriteStatus>
		return 1;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <nRF24_RXAvailible+0x34>
	}
	return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200001b8 	.word	0x200001b8

0800181c <nRF24_Init>:
		nRF24_WriteStatus(status);
	}
}

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8001824:	4a25      	ldr	r2, [pc, #148]	; (80018bc <nRF24_Init+0xa0>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800182a:	2200      	movs	r2, #0
 800182c:	2108      	movs	r1, #8
 800182e:	4824      	ldr	r0, [pc, #144]	; (80018c0 <nRF24_Init+0xa4>)
 8001830:	f000 ff84 	bl	800273c <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8001834:	2201      	movs	r2, #1
 8001836:	2110      	movs	r1, #16
 8001838:	4821      	ldr	r0, [pc, #132]	; (80018c0 <nRF24_Init+0xa4>)
 800183a:	f000 ff7f 	bl	800273c <HAL_GPIO_WritePin>

	nRF24_Delay(5); // Wait for radio power up
 800183e:	2005      	movs	r0, #5
 8001840:	f7ff fbbf 	bl	8000fc2 <nRF24_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8001844:	2003      	movs	r0, #3
 8001846:	f7ff fcfd 	bl	8001244 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800184a:	2002      	movs	r0, #2
 800184c:	f7ff fd19 	bl	8001282 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fd87 	bl	8001364 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fda1 	bl	800139e <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 800185c:	2107      	movs	r1, #7
 800185e:	2004      	movs	r0, #4
 8001860:	f7ff fdba 	bl	80013d8 <nRF24_SetRetries>
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8001864:	2100      	movs	r1, #0
 8001866:	201c      	movs	r0, #28
 8001868:	f7ff fc2c 	bl	80010c4 <nRF24_WriteRegister>
	nRF24_SetRFChannel(10); // Set RF channel for transmission
 800186c:	200a      	movs	r0, #10
 800186e:	f7ff fdce 	bl	800140e <nRF24_SetRFChannel>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8001872:	2120      	movs	r1, #32
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fddb 	bl	8001430 <nRF24_SetPayloadSize>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 800187a:	2101      	movs	r1, #1
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff fdf3 	bl	8001468 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 8001882:	2101      	movs	r1, #1
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fe24 	bl	80014d2 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 800188a:	2003      	movs	r0, #3
 800188c:	f7ff fe56 	bl	800153c <nRF24_SetAddressWidth>

	nRF24_Delay(20);
 8001890:	2014      	movs	r0, #20
 8001892:	f7ff fb96 	bl	8000fc2 <nRF24_Delay>

	nRF24_EnableRXDataReadyIRQ(0);
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff feff 	bl	800169a <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff ff19 	bl	80016d4 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff ff33 	bl	800170e <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay(20);
 80018a8:	2014      	movs	r0, #20
 80018aa:	f7ff fb8a 	bl	8000fc2 <nRF24_Delay>

	nRF24_ClearInterrupts();
 80018ae:	f7ff fee1 	bl	8001674 <nRF24_ClearInterrupts>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200001cc 	.word	0x200001cc
 80018c0:	40020400 	.word	0x40020400

080018c4 <RSA_Decrypt>:

int32_t RSA_Decrypt(RSAprivKey_stt * P_pPrivKey,
                    const uint8_t * P_pInputMessage,
                    uint8_t *P_pOutput,
                    int32_t *P_OutputSize)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
  int32_t status = RSA_SUCCESS ;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  RSAinOut_stt inOut_st;
  membuf_stt mb;

  mb.mSize = sizeof(preallocated_buffer);
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	82bb      	strh	r3, [r7, #20]
  mb.mUsed = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	82fb      	strh	r3, [r7, #22]
  mb.pmBuf = preallocated_buffer;
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <RSA_Decrypt+0x4c>)
 80018e2:	613b      	str	r3, [r7, #16]

  /* Fill the RSAinOut_stt */
  inOut_st.pmInput = P_pInputMessage;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
  inOut_st.mInputSize = P_pPrivKey->mModulusSize;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	61fb      	str	r3, [r7, #28]
  inOut_st.pmOutput = P_pOutput;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	623b      	str	r3, [r7, #32]

  /* Encrypt the message, this function will write sizeof(modulus) data */
  status = RSA_PKCS1v15_Decrypt(P_pPrivKey, &inOut_st, P_OutputSize, &mb);
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	f107 0118 	add.w	r1, r7, #24
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f005 fb37 	bl	8006f70 <RSA_PKCS1v15_Decrypt>
 8001902:	6278      	str	r0, [r7, #36]	; 0x24
  return(status);
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001906:	4618      	mov	r0, r3
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200001d4 	.word	0x200001d4

08001914 <buffer_add_rx>:
uint8_t rx_ring_buffer[BUFFER_SIZE];  // Ring buffer to store received data
uint16_t rx_head = 0, rx_tail = 0;    // Head and tail for the ring buffer
uint8_t chunk[NRF24_PAYLOAD_SIZE];    // Buffer to hold each 32-byte chunk

// Add received chunk to the ring buffer
void buffer_add_rx(uint8_t* data, uint16_t length) {
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 8001920:	2300      	movs	r3, #0
 8001922:	81fb      	strh	r3, [r7, #14]
 8001924:	e01b      	b.n	800195e <buffer_add_rx+0x4a>
        rx_ring_buffer[rx_head] = data[i];
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	4a11      	ldr	r2, [pc, #68]	; (8001974 <buffer_add_rx+0x60>)
 800192e:	8812      	ldrh	r2, [r2, #0]
 8001930:	7819      	ldrb	r1, [r3, #0]
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <buffer_add_rx+0x64>)
 8001934:	5499      	strb	r1, [r3, r2]
        rx_head = (rx_head + 1) % BUFFER_SIZE;
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <buffer_add_rx+0x60>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a0f      	ldr	r2, [pc, #60]	; (800197c <buffer_add_rx+0x68>)
 800193e:	fb82 1203 	smull	r1, r2, r2, r3
 8001942:	1191      	asrs	r1, r2, #6
 8001944:	17da      	asrs	r2, r3, #31
 8001946:	1a8a      	subs	r2, r1, r2
 8001948:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800194c:	fb01 f202 	mul.w	r2, r1, r2
 8001950:	1a9a      	subs	r2, r3, r2
 8001952:	b292      	uxth	r2, r2
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <buffer_add_rx+0x60>)
 8001956:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	3301      	adds	r3, #1
 800195c:	81fb      	strh	r3, [r7, #14]
 800195e:	89fa      	ldrh	r2, [r7, #14]
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	429a      	cmp	r2, r3
 8001964:	d3df      	bcc.n	8001926 <buffer_add_rx+0x12>
    }
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	200016d0 	.word	0x200016d0
 8001978:	200012e8 	.word	0x200012e8
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <buffer_get_full_message>:

// Extract full message from the ring buffer
void buffer_get_full_message(uint8_t* message, uint16_t length) {
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 800198c:	2300      	movs	r3, #0
 800198e:	81fb      	strh	r3, [r7, #14]
 8001990:	e01c      	b.n	80019cc <buffer_get_full_message+0x4c>
        message[i] = rx_ring_buffer[rx_tail];
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <buffer_get_full_message+0x60>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	4619      	mov	r1, r3
 8001998:	89fb      	ldrh	r3, [r7, #14]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <buffer_get_full_message+0x64>)
 80019a0:	5c52      	ldrb	r2, [r2, r1]
 80019a2:	701a      	strb	r2, [r3, #0]
        rx_tail = (rx_tail + 1) % BUFFER_SIZE;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <buffer_get_full_message+0x60>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <buffer_get_full_message+0x68>)
 80019ac:	fb82 1203 	smull	r1, r2, r2, r3
 80019b0:	1191      	asrs	r1, r2, #6
 80019b2:	17da      	asrs	r2, r3, #31
 80019b4:	1a8a      	subs	r2, r1, r2
 80019b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ba:	fb01 f202 	mul.w	r2, r1, r2
 80019be:	1a9a      	subs	r2, r3, r2
 80019c0:	b292      	uxth	r2, r2
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <buffer_get_full_message+0x60>)
 80019c4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++) {
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	3301      	adds	r3, #1
 80019ca:	81fb      	strh	r3, [r7, #14]
 80019cc:	89fa      	ldrh	r2, [r7, #14]
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d3de      	bcc.n	8001992 <buffer_get_full_message+0x12>
    }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	200016d2 	.word	0x200016d2
 80019e4:	200012e8 	.word	0x200012e8
 80019e8:	10624dd3 	.word	0x10624dd3

080019ec <flush_rx_buffer>:

// Function to flush the transmission ring buffer
void flush_rx_buffer() {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
    // Reset the head, tail, and size to flush the buffer
    rx_head = 0;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <flush_rx_buffer+0x20>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	801a      	strh	r2, [r3, #0]
    rx_tail = 0;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <flush_rx_buffer+0x24>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	801a      	strh	r2, [r3, #0]
    //rx_size = 0;

    // Optionally clear the buffer content
    memset(rx_ring_buffer, 0, sizeof(rx_ring_buffer));
 80019fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a00:	2100      	movs	r1, #0
 8001a02:	4804      	ldr	r0, [pc, #16]	; (8001a14 <flush_rx_buffer+0x28>)
 8001a04:	f005 fbc6 	bl	8007194 <memset>
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200016d0 	.word	0x200016d0
 8001a10:	200016d2 	.word	0x200016d2
 8001a14:	200012e8 	.word	0x200012e8

08001a18 <receive_message>:

int32_t receive_message(){
 8001a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
	if (nRF24_RXAvailible()) {
 8001a20:	f7ff fedc 	bl	80017dc <nRF24_RXAvailible>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d065      	beq.n	8001af6 <receive_message+0xde>
		    nRF24_ReadRXPaylaod(chunk);  // Receive 32-byte chunk
 8001a2a:	4836      	ldr	r0, [pc, #216]	; (8001b04 <receive_message+0xec>)
 8001a2c:	f7ff fec4 	bl	80017b8 <nRF24_ReadRXPaylaod>
		    buffer_add_rx(chunk, NRF24_PAYLOAD_SIZE);  // Store received chunk in the buffer
 8001a30:	2120      	movs	r1, #32
 8001a32:	4834      	ldr	r0, [pc, #208]	; (8001b04 <receive_message+0xec>)
 8001a34:	f7ff ff6e 	bl	8001914 <buffer_add_rx>
		    //MessageLength = sprintf(Message, "%s\n\r", chunk);
		    //HAL_UART_Transmit(&huart1, Message, MessageLength, 1000);

		    // Optionally, you can check if the entire message is received and process it
		    if (rx_head >= expected_message_size) {
 8001a38:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <receive_message+0xf0>)
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <receive_message+0xf4>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d353      	bcc.n	8001aec <receive_message+0xd4>
 8001a44:	466b      	mov	r3, sp
 8001a46:	461e      	mov	r6, r3
		    uint8_t received_message[expected_message_size];
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <receive_message+0xf4>)
 8001a4a:	8819      	ldrh	r1, [r3, #0]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	b28b      	uxth	r3, r1
 8001a54:	2200      	movs	r2, #0
 8001a56:	4698      	mov	r8, r3
 8001a58:	4691      	mov	r9, r2
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a6e:	b28b      	uxth	r3, r1
 8001a70:	2200      	movs	r2, #0
 8001a72:	461c      	mov	r4, r3
 8001a74:	4615      	mov	r5, r2
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	00eb      	lsls	r3, r5, #3
 8001a80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a84:	00e2      	lsls	r2, r4, #3
 8001a86:	460b      	mov	r3, r1
 8001a88:	3307      	adds	r3, #7
 8001a8a:	08db      	lsrs	r3, r3, #3
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	ebad 0d03 	sub.w	sp, sp, r3
 8001a92:	466b      	mov	r3, sp
 8001a94:	3300      	adds	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]
		    buffer_get_full_message(received_message, expected_message_size);  // Extract full message
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <receive_message+0xf4>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6838      	ldr	r0, [r7, #0]
 8001aa0:	f7ff ff6e 	bl	8001980 <buffer_get_full_message>
		    HAL_UART_Transmit(&huart1, received_message, expected_message_size, 1000);  // Transmit message via UART
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <receive_message+0xf4>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aac:	6839      	ldr	r1, [r7, #0]
 8001aae:	4818      	ldr	r0, [pc, #96]	; (8001b10 <receive_message+0xf8>)
 8001ab0:	f003 fd80 	bl	80055b4 <HAL_UART_Transmit>

		    PrivKey_st.mExponentSize = sizeof(PrivateExponent);
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <receive_message+0xfc>)
 8001ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aba:	60da      	str	r2, [r3, #12]
		          PrivKey_st.mModulusSize = sizeof(Modulus);
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <receive_message+0xfc>)
 8001abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac2:	605a      	str	r2, [r3, #4]
		          PrivKey_st.pmExponent = (uint8_t *) PrivateExponent;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <receive_message+0xfc>)
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <receive_message+0x100>)
 8001ac8:	609a      	str	r2, [r3, #8]
		          PrivKey_st.pmModulus = (uint8_t *) Modulus;
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <receive_message+0xfc>)
 8001acc:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <receive_message+0x104>)
 8001ace:	601a      	str	r2, [r3, #0]
		          status = RSA_Decrypt(&PrivKey_st, received_message, output, &outputSize);
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <receive_message+0x108>)
 8001ad2:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <receive_message+0x10c>)
 8001ad4:	6839      	ldr	r1, [r7, #0]
 8001ad6:	480f      	ldr	r0, [pc, #60]	; (8001b14 <receive_message+0xfc>)
 8001ad8:	f7ff fef4 	bl	80018c4 <RSA_Decrypt>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <receive_message+0x110>)
 8001ae0:	6013      	str	r3, [r2, #0]

		     flush_rx_buffer();
 8001ae2:	f7ff ff83 	bl	80019ec <flush_rx_buffer>
		     return 1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	46b5      	mov	sp, r6
 8001aea:	e005      	b.n	8001af8 <receive_message+0xe0>
		     }

		     HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate reception
 8001aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af0:	480e      	ldr	r0, [pc, #56]	; (8001b2c <receive_message+0x114>)
 8001af2:	f000 fe3b 	bl	800276c <HAL_GPIO_TogglePin>
		}
	return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b02:	bf00      	nop
 8001b04:	200016d4 	.word	0x200016d4
 8001b08:	200016d0 	.word	0x200016d0
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	20000174 	.word	0x20000174
 8001b14:	200011d4 	.word	0x200011d4
 8001b18:	080073c0 	.word	0x080073c0
 8001b1c:	080072c0 	.word	0x080072c0
 8001b20:	200012e4 	.word	0x200012e4
 8001b24:	200011e4 	.word	0x200011e4
 8001b28:	20000004 	.word	0x20000004
 8001b2c:	40020800 	.word	0x40020800

08001b30 <buffer_add>:
uint32_t tx_size = 0;                 // Size of the message to transmit
uint32_t PackageTimer;				//send delay time

//TRANSMISSION
// Add data to the ring buffer
void buffer_add(uint8_t* data, uint16_t length) {
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	81fb      	strh	r3, [r7, #14]
 8001b40:	e020      	b.n	8001b84 <buffer_add+0x54>
        tx_ring_buffer[tx_head] = data[i];
 8001b42:	89fb      	ldrh	r3, [r7, #14]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <buffer_add+0x68>)
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	7819      	ldrb	r1, [r3, #0]
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <buffer_add+0x6c>)
 8001b50:	5499      	strb	r1, [r3, r2]
        tx_head = (tx_head + 1) % BUFFER_SIZE;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <buffer_add+0x68>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <buffer_add+0x70>)
 8001b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5e:	1191      	asrs	r1, r2, #6
 8001b60:	17da      	asrs	r2, r3, #31
 8001b62:	1a8a      	subs	r2, r1, r2
 8001b64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b68:	fb01 f202 	mul.w	r2, r1, r2
 8001b6c:	1a9a      	subs	r2, r3, r2
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <buffer_add+0x68>)
 8001b72:	801a      	strh	r2, [r3, #0]
        tx_size++;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <buffer_add+0x74>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <buffer_add+0x74>)
 8001b7c:	6013      	str	r3, [r2, #0]
    for (uint16_t i = 0; i < length; i++) {
 8001b7e:	89fb      	ldrh	r3, [r7, #14]
 8001b80:	3301      	adds	r3, #1
 8001b82:	81fb      	strh	r3, [r7, #14]
 8001b84:	89fa      	ldrh	r2, [r7, #14]
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3da      	bcc.n	8001b42 <buffer_add+0x12>
    }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20001adc 	.word	0x20001adc
 8001b9c:	200016f4 	.word	0x200016f4
 8001ba0:	10624dd3 	.word	0x10624dd3
 8001ba4:	20001ae0 	.word	0x20001ae0

08001ba8 <buffer_get_chunk>:

// Get 32-byte chunk from the ring buffer
uint8_t buffer_get_chunk(uint8_t* chunk) {
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
    if (tx_size == 0) return 0;  // No data to send
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <buffer_get_chunk+0x78>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <buffer_get_chunk+0x14>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e02c      	b.n	8001c16 <buffer_get_chunk+0x6e>

    for (uint8_t i = 0; i < NRF24_PAYLOAD_SIZE && tx_size > 0; i++) {
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e021      	b.n	8001c06 <buffer_get_chunk+0x5e>
        chunk[i] = tx_ring_buffer[tx_tail];
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <buffer_get_chunk+0x7c>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <buffer_get_chunk+0x80>)
 8001bd0:	5c52      	ldrb	r2, [r2, r1]
 8001bd2:	701a      	strb	r2, [r3, #0]
        tx_tail = (tx_tail + 1) % BUFFER_SIZE;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <buffer_get_chunk+0x7c>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <buffer_get_chunk+0x84>)
 8001bdc:	fb82 1203 	smull	r1, r2, r2, r3
 8001be0:	1191      	asrs	r1, r2, #6
 8001be2:	17da      	asrs	r2, r3, #31
 8001be4:	1a8a      	subs	r2, r1, r2
 8001be6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bea:	fb01 f202 	mul.w	r2, r1, r2
 8001bee:	1a9a      	subs	r2, r3, r2
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <buffer_get_chunk+0x7c>)
 8001bf4:	801a      	strh	r2, [r3, #0]
        tx_size--;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <buffer_get_chunk+0x78>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <buffer_get_chunk+0x78>)
 8001bfe:	6013      	str	r3, [r2, #0]
    for (uint8_t i = 0; i < NRF24_PAYLOAD_SIZE && tx_size > 0; i++) {
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	3301      	adds	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b1f      	cmp	r3, #31
 8001c0a:	d803      	bhi.n	8001c14 <buffer_get_chunk+0x6c>
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <buffer_get_chunk+0x78>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1d6      	bne.n	8001bc2 <buffer_get_chunk+0x1a>
    }
    return 1;  // Chunk is ready to send
 8001c14:	2301      	movs	r3, #1
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20001ae0 	.word	0x20001ae0
 8001c24:	20001ade 	.word	0x20001ade
 8001c28:	200016f4 	.word	0x200016f4
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <send_message>:

int32_t send_message(uint32_t delay_time){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

	if (tx_size > 0 && HAL_GetTick() - PackageTimer > delay_time) {
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <send_message+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01d      	beq.n	8001c7c <send_message+0x4c>
 8001c40:	f000 faa2 	bl	8002188 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <send_message+0x68>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d214      	bcs.n	8001c7c <send_message+0x4c>
		if (buffer_get_chunk(chunk)) {
 8001c52:	4812      	ldr	r0, [pc, #72]	; (8001c9c <send_message+0x6c>)
 8001c54:	f7ff ffa8 	bl	8001ba8 <buffer_get_chunk>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <send_message+0x38>
		    nRF24_WriteTXPayload(chunk);  // Send 32-byte chunk
 8001c5e:	480f      	ldr	r0, [pc, #60]	; (8001c9c <send_message+0x6c>)
 8001c60:	f7ff fd72 	bl	8001748 <nRF24_WriteTXPayload>
		    nRF24_WaitTX();               // Wait until the transmission is completed
 8001c64:	f7ff fd7e 	bl	8001764 <nRF24_WaitTX>
		    }
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Toggle LED to indicate transmission
 8001c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6c:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <send_message+0x70>)
 8001c6e:	f000 fd7d 	bl	800276c <HAL_GPIO_TogglePin>
		PackageTimer = HAL_GetTick();
 8001c72:	f000 fa89 	bl	8002188 <HAL_GetTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <send_message+0x68>)
 8001c7a:	6013      	str	r3, [r2, #0]
	}

	if(tx_size == 0){
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <send_message+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <send_message+0x58>
			return 1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <send_message+0x5a>
		}
	return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20001ae0 	.word	0x20001ae0
 8001c98:	20001ae4 	.word	0x20001ae4
 8001c9c:	200016d4 	.word	0x200016d4
 8001ca0:	40020800 	.word	0x40020800

08001ca4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_MspInit+0x48>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_MspInit+0x48>)
 8001cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_MspInit+0x48>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_MspInit+0x48>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a07      	ldr	r2, [pc, #28]	; (8001cec <HAL_MspInit+0x48>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_MspInit+0x48>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40023800 	.word	0x40023800

08001cf0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_CRC_MspInit+0x38>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10d      	bne.n	8001d1e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_CRC_MspInit+0x3c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_CRC_MspInit+0x3c>)
 8001d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_CRC_MspInit+0x3c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	40023000 	.word	0x40023000
 8001d2c:	40023800 	.word	0x40023800

08001d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_SPI_MspInit+0x84>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12c      	bne.n	8001dac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_SPI_MspInit+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001d8a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d9c:	2305      	movs	r3, #5
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_SPI_MspInit+0x8c>)
 8001da8:	f000 fb46 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40003800 	.word	0x40003800
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_TIM_PWM_MspInit+0x38>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10d      	bne.n	8001dee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_TIM_PWM_MspInit+0x3c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_TIM_PWM_MspInit+0x3c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d116      	bne.n	8001e50 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	201c      	movs	r0, #28
 8001e44:	f000 faa5 	bl	8002392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e48:	201c      	movs	r0, #28
 8001e4a:	f000 fabe 	bl	80023ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e4e:	e038      	b.n	8001ec2 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1e      	ldr	r2, [pc, #120]	; (8001ed0 <HAL_TIM_Base_MspInit+0xd0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d133      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_TIM_Base_MspInit+0xcc>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e92:	2340      	movs	r3, #64	; 0x40
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <HAL_TIM_Base_MspInit+0xd4>)
 8001eae:	f000 fac3 	bl	8002438 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	201d      	movs	r0, #29
 8001eb8:	f000 fa6b 	bl	8002392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ebc:	201d      	movs	r0, #29
 8001ebe:	f000 fa84 	bl	80023ca <HAL_NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40000400 	.word	0x40000400
 8001ed4:	40020000 	.word	0x40020000

08001ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <HAL_TIM_MspPostInit+0x68>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d11e      	bne.n	8001f38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_TIM_MspPostInit+0x6c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a10      	ldr	r2, [pc, #64]	; (8001f44 <HAL_TIM_MspPostInit+0x6c>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_TIM_MspPostInit+0x6c>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	4619      	mov	r1, r3
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <HAL_TIM_MspPostInit+0x70>)
 8001f34:	f000 fa80 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40010000 	.word	0x40010000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000

08001f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_UART_MspInit+0x84>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d12c      	bne.n	8001fc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_UART_MspInit+0x88>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_UART_MspInit+0x88>)
 8001f78:	f043 0310 	orr.w	r3, r3, #16
 8001f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_UART_MspInit+0x88>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_UART_MspInit+0x88>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <HAL_UART_MspInit+0x88>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_UART_MspInit+0x88>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fa6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fb8:	2307      	movs	r3, #7
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <HAL_UART_MspInit+0x8c>)
 8001fc4:	f000 fa38 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020000 	.word	0x40020000

08001fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <NMI_Handler+0x4>

08001fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <HardFault_Handler+0x4>

08001fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <MemManage_Handler+0x4>

08001fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <BusFault_Handler+0x4>

08001ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <UsageFault_Handler+0x4>

08001ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002022:	f000 f89f 	bl	8002164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_NRF_Pin);
 800202e:	2020      	movs	r0, #32
 8002030:	f000 fbb6 	bl	80027a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}

08002038 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <TIM2_IRQHandler+0x10>)
 800203e:	f002 f94d 	bl	80042dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200000e4 	.word	0x200000e4

0800204c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <TIM3_IRQHandler+0x10>)
 8002052:	f002 f943 	bl	80042dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000012c 	.word	0x2000012c

08002060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800206c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002070:	480d      	ldr	r0, [pc, #52]	; (80020a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002072:	490e      	ldr	r1, [pc, #56]	; (80020ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002078:	e002      	b.n	8002080 <LoopCopyDataInit>

0800207a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800207c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207e:	3304      	adds	r3, #4

08002080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002084:	d3f9      	bcc.n	800207a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002086:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002088:	4c0b      	ldr	r4, [pc, #44]	; (80020b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800208c:	e001      	b.n	8002092 <LoopFillZerobss>

0800208e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002090:	3204      	adds	r2, #4

08002092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002094:	d3fb      	bcc.n	800208e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002096:	f7ff ffe3 	bl	8002060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209a:	f005 f849 	bl	8007130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800209e:	f7fe fbbb 	bl	8000818 <main>
  bx  lr    
 80020a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ac:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80020b0:	080074e8 	.word	0x080074e8
  ldr r2, =_sbss
 80020b4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80020b8:	20001aec 	.word	0x20001aec

080020bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020bc:	e7fe      	b.n	80020bc <ADC_IRQHandler>
	...

080020c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <HAL_Init+0x40>)
 80020ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <HAL_Init+0x40>)
 80020d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_Init+0x40>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f000 f947 	bl	800237c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ee:	200f      	movs	r0, #15
 80020f0:	f000 f808 	bl	8002104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f4:	f7ff fdd6 	bl	8001ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023c00 	.word	0x40023c00

08002104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x54>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_InitTick+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211a:	fbb3 f3f1 	udiv	r3, r3, r1
 800211e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f95f 	bl	80023e6 <HAL_SYSTICK_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00e      	b.n	8002150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0f      	cmp	r3, #15
 8002136:	d80a      	bhi.n	800214e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f000 f927 	bl	8002392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002144:	4a06      	ldr	r2, [pc, #24]	; (8002160 <HAL_InitTick+0x5c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000000c 	.word	0x2000000c
 800215c:	20000014 	.word	0x20000014
 8002160:	20000010 	.word	0x20000010

08002164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_IncTick+0x1c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_IncTick+0x20>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4413      	add	r3, r2
 8002174:	4a03      	ldr	r2, [pc, #12]	; (8002184 <HAL_IncTick+0x20>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000014 	.word	0x20000014
 8002184:	20001ae8 	.word	0x20001ae8

08002188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_GetTick+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20001ae8 	.word	0x20001ae8

0800219c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff fff0 	bl	8002188 <HAL_GetTick>
 80021a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d005      	beq.n	80021c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_Delay+0x44>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021c2:	bf00      	nop
 80021c4:	f7ff ffe0 	bl	8002188 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d8f7      	bhi.n	80021c4 <HAL_Delay+0x28>
  {
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000014 	.word	0x20000014

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4906      	ldr	r1, [pc, #24]	; (800227c <__NVIC_EnableIRQ+0x34>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002348:	d301      	bcc.n	800234e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234a:	2301      	movs	r3, #1
 800234c:	e00f      	b.n	800236e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <SysTick_Config+0x40>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002356:	210f      	movs	r1, #15
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f7ff ff90 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <SysTick_Config+0x40>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <SysTick_Config+0x40>)
 8002368:	2207      	movs	r2, #7
 800236a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	e000e010 	.word	0xe000e010

0800237c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff2d 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a4:	f7ff ff42 	bl	800222c <__NVIC_GetPriorityGrouping>
 80023a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f7ff ff90 	bl	80022d4 <NVIC_EncodePriority>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff5f 	bl	8002280 <__NVIC_SetPriority>
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff35 	bl	8002248 <__NVIC_EnableIRQ>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa2 	bl	8002338 <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e00e      	b.n	800242e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	795b      	ldrb	r3, [r3, #5]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d105      	bne.n	8002426 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff fc65 	bl	8001cf0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	e159      	b.n	8002708 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	f040 8148 	bne.w	8002702 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d005      	beq.n	800248a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	2b02      	cmp	r3, #2
 8002488:	d130      	bne.n	80024ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 0201 	and.w	r2, r3, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d017      	beq.n	8002528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d123      	bne.n	800257c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0203 	and.w	r2, r3, #3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a2 	beq.w	8002702 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b56      	ldr	r3, [pc, #344]	; (800271c <HAL_GPIO_Init+0x2e4>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a55      	ldr	r2, [pc, #340]	; (800271c <HAL_GPIO_Init+0x2e4>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_GPIO_Init+0x2e4>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025da:	4a51      	ldr	r2, [pc, #324]	; (8002720 <HAL_GPIO_Init+0x2e8>)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	220f      	movs	r2, #15
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a48      	ldr	r2, [pc, #288]	; (8002724 <HAL_GPIO_Init+0x2ec>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d019      	beq.n	800263a <HAL_GPIO_Init+0x202>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a47      	ldr	r2, [pc, #284]	; (8002728 <HAL_GPIO_Init+0x2f0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_GPIO_Init+0x1fe>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a46      	ldr	r2, [pc, #280]	; (800272c <HAL_GPIO_Init+0x2f4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00d      	beq.n	8002632 <HAL_GPIO_Init+0x1fa>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a45      	ldr	r2, [pc, #276]	; (8002730 <HAL_GPIO_Init+0x2f8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d007      	beq.n	800262e <HAL_GPIO_Init+0x1f6>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a44      	ldr	r2, [pc, #272]	; (8002734 <HAL_GPIO_Init+0x2fc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_GPIO_Init+0x1f2>
 8002626:	2304      	movs	r3, #4
 8002628:	e008      	b.n	800263c <HAL_GPIO_Init+0x204>
 800262a:	2307      	movs	r3, #7
 800262c:	e006      	b.n	800263c <HAL_GPIO_Init+0x204>
 800262e:	2303      	movs	r3, #3
 8002630:	e004      	b.n	800263c <HAL_GPIO_Init+0x204>
 8002632:	2302      	movs	r3, #2
 8002634:	e002      	b.n	800263c <HAL_GPIO_Init+0x204>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_GPIO_Init+0x204>
 800263a:	2300      	movs	r3, #0
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	f002 0203 	and.w	r2, r2, #3
 8002642:	0092      	lsls	r2, r2, #2
 8002644:	4093      	lsls	r3, r2
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800264c:	4934      	ldr	r1, [pc, #208]	; (8002720 <HAL_GPIO_Init+0x2e8>)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	3302      	adds	r3, #2
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <HAL_GPIO_Init+0x300>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267e:	4a2e      	ldr	r2, [pc, #184]	; (8002738 <HAL_GPIO_Init+0x300>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002684:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <HAL_GPIO_Init+0x300>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a8:	4a23      	ldr	r2, [pc, #140]	; (8002738 <HAL_GPIO_Init+0x300>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_GPIO_Init+0x300>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d2:	4a19      	ldr	r2, [pc, #100]	; (8002738 <HAL_GPIO_Init+0x300>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d8:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_GPIO_Init+0x300>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026fc:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_GPIO_Init+0x300>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3301      	adds	r3, #1
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	2b0f      	cmp	r3, #15
 800270c:	f67f aea2 	bls.w	8002454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020800 	.word	0x40020800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	041a      	lsls	r2, r3, #16
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	43d9      	mvns	r1, r3
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	400b      	ands	r3, r1
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d006      	beq.n	80027c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027b6:	4a05      	ldr	r2, [pc, #20]	; (80027cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f806 	bl	80027d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40013c00 	.word	0x40013c00

080027d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e267      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d075      	beq.n	80028ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d00c      	beq.n	8002828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280e:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002816:	2b08      	cmp	r3, #8
 8002818:	d112      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002826:	d10b      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	4b7e      	ldr	r3, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d05b      	beq.n	80028ec <HAL_RCC_OscConfig+0x108>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d157      	bne.n	80028ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e242      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d106      	bne.n	8002858 <HAL_RCC_OscConfig+0x74>
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a75      	ldr	r2, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x98>
 8002862:	4b70      	ldr	r3, [pc, #448]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6f      	ldr	r2, [pc, #444]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6c      	ldr	r2, [pc, #432]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 800287c:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a68      	ldr	r2, [pc, #416]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a65      	ldr	r2, [pc, #404]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff fc74 	bl	8002188 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff fc70 	bl	8002188 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e207      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0xc0>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff fc60 	bl	8002188 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff fc5c 	bl	8002188 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1f3      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0xe8>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d063      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fa:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11c      	bne.n	800294c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b44      	ldr	r3, [pc, #272]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x152>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1c7      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4937      	ldr	r1, [pc, #220]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	e03a      	b.n	80029c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002954:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <HAL_RCC_OscConfig+0x244>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7ff fc15 	bl	8002188 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002962:	f7ff fc11 	bl	8002188 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1a8      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b28      	ldr	r3, [pc, #160]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4925      	ldr	r1, [pc, #148]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCC_OscConfig+0x244>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7ff fbf4 	bl	8002188 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a4:	f7ff fbf0 	bl	8002188 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e187      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d036      	beq.n	8002a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_RCC_OscConfig+0x248>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7ff fbd4 	bl	8002188 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e4:	f7ff fbd0 	bl	8002188 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e167      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x200>
 8002a02:	e01b      	b.n	8002a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_OscConfig+0x248>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7ff fbbd 	bl	8002188 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	e00e      	b.n	8002a30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a12:	f7ff fbb9 	bl	8002188 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d907      	bls.n	8002a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e150      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
 8002a24:	40023800 	.word	0x40023800
 8002a28:	42470000 	.word	0x42470000
 8002a2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ea      	bne.n	8002a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8097 	beq.w	8002b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4e:	4b81      	ldr	r3, [pc, #516]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a7c      	ldr	r2, [pc, #496]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b7a      	ldr	r3, [pc, #488]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a76:	2301      	movs	r3, #1
 8002a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b77      	ldr	r3, [pc, #476]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d118      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b74      	ldr	r3, [pc, #464]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a73      	ldr	r2, [pc, #460]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7ff fb79 	bl	8002188 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7ff fb75 	bl	8002188 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e10c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x2ea>
 8002ac0:	4b64      	ldr	r3, [pc, #400]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a63      	ldr	r2, [pc, #396]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
 8002acc:	e01c      	b.n	8002b08 <HAL_RCC_OscConfig+0x324>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x30c>
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a5e      	ldr	r2, [pc, #376]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a5b      	ldr	r2, [pc, #364]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0x324>
 8002af0:	4b58      	ldr	r3, [pc, #352]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a57      	ldr	r2, [pc, #348]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a54      	ldr	r2, [pc, #336]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 0304 	bic.w	r3, r3, #4
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7ff fb3a 	bl	8002188 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7ff fb36 	bl	8002188 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0cb      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2e:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ee      	beq.n	8002b18 <HAL_RCC_OscConfig+0x334>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3c:	f7ff fb24 	bl	8002188 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7ff fb20 	bl	8002188 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0b5      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5a:	4b3e      	ldr	r3, [pc, #248]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ee      	bne.n	8002b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6c:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a38      	ldr	r2, [pc, #224]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a1 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b82:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d05c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d141      	bne.n	8002c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7ff faf4 	bl	8002188 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7ff faf0 	bl	8002188 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e087      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	491b      	ldr	r1, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7ff fac9 	bl	8002188 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7ff fac5 	bl	8002188 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e05c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x416>
 8002c18:	e054      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff fab2 	bl	8002188 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7ff faae 	bl	8002188 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e045      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x444>
 8002c46:	e03d      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e038      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_RCC_OscConfig+0x4ec>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d028      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d121      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d11a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0cc      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d90c      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b65      	ldr	r3, [pc, #404]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0b8      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d28:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a58      	ldr	r2, [pc, #352]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d40:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	494d      	ldr	r1, [pc, #308]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d044      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d119      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e067      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4934      	ldr	r1, [pc, #208]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7ff f9e0 	bl	8002188 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7ff f9dc 	bl	8002188 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e04f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d20c      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e032      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4916      	ldr	r1, [pc, #88]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	490e      	ldr	r1, [pc, #56]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e5a:	f000 f821 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	490a      	ldr	r1, [pc, #40]	; (8002e94 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	5ccb      	ldrb	r3, [r1, r3]
 8002e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e72:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f942 	bl	8002104 <HAL_InitTick>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023c00 	.word	0x40023c00
 8002e90:	40023800 	.word	0x40023800
 8002e94:	080074c0 	.word	0x080074c0
 8002e98:	2000000c 	.word	0x2000000c
 8002e9c:	20000010 	.word	0x20000010

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea4:	b090      	sub	sp, #64	; 0x40
 8002ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8002eac:	2300      	movs	r3, #0
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	f200 80a2 	bhi.w	800300e <HAL_RCC_GetSysClockFreq+0x16e>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x3a>
 8002ed2:	e09c      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ed6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ed8:	e09c      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eda:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_GetSysClockFreq+0x188>)
 8002edc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ede:	e099      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee0:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eea:	4b4d      	ldr	r3, [pc, #308]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d027      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	099b      	lsrs	r3, r3, #6
 8002efc:	2200      	movs	r2, #0
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	627a      	str	r2, [r7, #36]	; 0x24
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f0c:	fb03 f201 	mul.w	r2, r3, r1
 8002f10:	2300      	movs	r3, #0
 8002f12:	fb00 f303 	mul.w	r3, r0, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	4a43      	ldr	r2, [pc, #268]	; (8003028 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f1a:	fba0 2102 	umull	r2, r1, r0, r2
 8002f1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002f20:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f24:	4413      	add	r3, r2
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	61fa      	str	r2, [r7, #28]
 8002f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f38:	f7fd f94e 	bl	80001d8 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f44:	e055      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f46:	4b36      	ldr	r3, [pc, #216]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	099b      	lsrs	r3, r3, #6
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	617a      	str	r2, [r7, #20]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f58:	f04f 0b00 	mov.w	fp, #0
 8002f5c:	4652      	mov	r2, sl
 8002f5e:	465b      	mov	r3, fp
 8002f60:	f04f 0000 	mov.w	r0, #0
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	0159      	lsls	r1, r3, #5
 8002f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6e:	0150      	lsls	r0, r2, #5
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	ebb2 080a 	subs.w	r8, r2, sl
 8002f78:	eb63 090b 	sbc.w	r9, r3, fp
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f88:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f8c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f90:	ebb2 0408 	subs.w	r4, r2, r8
 8002f94:	eb63 0509 	sbc.w	r5, r3, r9
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	00eb      	lsls	r3, r5, #3
 8002fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa6:	00e2      	lsls	r2, r4, #3
 8002fa8:	4614      	mov	r4, r2
 8002faa:	461d      	mov	r5, r3
 8002fac:	eb14 030a 	adds.w	r3, r4, sl
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	eb45 030b 	adc.w	r3, r5, fp
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	028b      	lsls	r3, r1, #10
 8002fc8:	4620      	mov	r0, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	4604      	mov	r4, r0
 8002fce:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002fd2:	4601      	mov	r1, r0
 8002fd4:	028a      	lsls	r2, r1, #10
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	60fa      	str	r2, [r7, #12]
 8002fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe6:	f7fd f8f7 	bl	80001d8 <__aeabi_uldivmod>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4613      	mov	r3, r2
 8002ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	0c1b      	lsrs	r3, r3, #16
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	fbb2 f3f3 	udiv	r3, r2, r3
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800300c:	e002      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetSysClockFreq+0x184>)
 8003010:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003012:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003016:	4618      	mov	r0, r3
 8003018:	3740      	adds	r7, #64	; 0x40
 800301a:	46bd      	mov	sp, r7
 800301c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400
 8003028:	017d7840 	.word	0x017d7840

0800302c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <HAL_RCC_GetHCLKFreq+0x10>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	2000000c 	.word	0x2000000c

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003044:	f7ff fff2 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	080074d0 	.word	0x080074d0

08003068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800306c:	f7ff ffde 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0b5b      	lsrs	r3, r3, #13
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <HAL_RCC_GetPCLK2Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	080074d0 	.word	0x080074d0

08003090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07b      	b.n	800319a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b2:	d009      	beq.n	80030c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fe24 	bl	8001d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314c:	ea42 0103 	orr.w	r1, r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0104 	and.w	r1, r3, #4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	f003 0210 	and.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003188:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b088      	sub	sp, #32
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_SPI_Transmit+0x22>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e126      	b.n	8003412 <HAL_SPI_Transmit+0x270>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031cc:	f7fe ffdc 	bl	8002188 <HAL_GetTick>
 80031d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031e6:	e10b      	b.n	8003400 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_SPI_Transmit+0x52>
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031f8:	e102      	b.n	8003400 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2203      	movs	r2, #3
 80031fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003240:	d10f      	bne.n	8003262 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003250:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003260:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326c:	2b40      	cmp	r3, #64	; 0x40
 800326e:	d007      	beq.n	8003280 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003288:	d14b      	bne.n	8003322 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_SPI_Transmit+0xf6>
 8003292:	8afb      	ldrh	r3, [r7, #22]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d13e      	bne.n	8003316 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	881a      	ldrh	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	1c9a      	adds	r2, r3, #2
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032bc:	e02b      	b.n	8003316 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d112      	bne.n	80032f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	881a      	ldrh	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80032f0:	e011      	b.n	8003316 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032f2:	f7fe ff49 	bl	8002188 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d803      	bhi.n	800330a <HAL_SPI_Transmit+0x168>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d102      	bne.n	8003310 <HAL_SPI_Transmit+0x16e>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003314:	e074      	b.n	8003400 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ce      	bne.n	80032be <HAL_SPI_Transmit+0x11c>
 8003320:	e04c      	b.n	80033bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_SPI_Transmit+0x18e>
 800332a:	8afb      	ldrh	r3, [r7, #22]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d140      	bne.n	80033b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003356:	e02c      	b.n	80033b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d113      	bne.n	800338e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	7812      	ldrb	r2, [r2, #0]
 8003372:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	86da      	strh	r2, [r3, #54]	; 0x36
 800338c:	e011      	b.n	80033b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800338e:	f7fe fefb 	bl	8002188 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d803      	bhi.n	80033a6 <HAL_SPI_Transmit+0x204>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d102      	bne.n	80033ac <HAL_SPI_Transmit+0x20a>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033b0:	e026      	b.n	8003400 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1cd      	bne.n	8003358 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	6839      	ldr	r1, [r7, #0]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fbcb 	bl	8003b5c <SPI_EndRxTxTransaction>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e000      	b.n	8003400 <HAL_SPI_Transmit+0x25e>
  }

error:
 80033fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003410:	7ffb      	ldrb	r3, [r7, #31]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b088      	sub	sp, #32
 800341e:	af02      	add	r7, sp, #8
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003436:	d112      	bne.n	800345e <HAL_SPI_Receive+0x44>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10e      	bne.n	800345e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2204      	movs	r2, #4
 8003444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003448:	88fa      	ldrh	r2, [r7, #6]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f8f1 	bl	800363c <HAL_SPI_TransmitReceive>
 800345a:	4603      	mov	r3, r0
 800345c:	e0ea      	b.n	8003634 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_SPI_Receive+0x52>
 8003468:	2302      	movs	r3, #2
 800346a:	e0e3      	b.n	8003634 <HAL_SPI_Receive+0x21a>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003474:	f7fe fe88 	bl	8002188 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d002      	beq.n	800348c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003486:	2302      	movs	r3, #2
 8003488:	75fb      	strb	r3, [r7, #23]
    goto error;
 800348a:	e0ca      	b.n	8003622 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Receive+0x7e>
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800349c:	e0c1      	b.n	8003622 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2204      	movs	r2, #4
 80034a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e4:	d10f      	bne.n	8003506 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d007      	beq.n	8003524 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d162      	bne.n	80035f2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800352c:	e02e      	b.n	800358c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d115      	bne.n	8003568 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f103 020c 	add.w	r2, r3, #12
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003566:	e011      	b.n	800358c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003568:	f7fe fe0e 	bl	8002188 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d803      	bhi.n	8003580 <HAL_SPI_Receive+0x166>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d102      	bne.n	8003586 <HAL_SPI_Receive+0x16c>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	75fb      	strb	r3, [r7, #23]
          goto error;
 800358a:	e04a      	b.n	8003622 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1cb      	bne.n	800352e <HAL_SPI_Receive+0x114>
 8003596:	e031      	b.n	80035fc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d113      	bne.n	80035ce <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	b292      	uxth	r2, r2
 80035b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035cc:	e011      	b.n	80035f2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ce:	f7fe fddb 	bl	8002188 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d803      	bhi.n	80035e6 <HAL_SPI_Receive+0x1cc>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d102      	bne.n	80035ec <HAL_SPI_Receive+0x1d2>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035f0:	e017      	b.n	8003622 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1cd      	bne.n	8003598 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	6839      	ldr	r1, [r7, #0]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fa45 	bl	8003a90 <SPI_EndRxTransaction>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
 800361e:	e000      	b.n	8003622 <HAL_SPI_Receive+0x208>
  }

error :
 8003620:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08c      	sub	sp, #48	; 0x30
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800364a:	2301      	movs	r3, #1
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x26>
 800365e:	2302      	movs	r3, #2
 8003660:	e18a      	b.n	8003978 <HAL_SPI_TransmitReceive+0x33c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800366a:	f7fe fd8d 	bl	8002188 <HAL_GetTick>
 800366e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003680:	887b      	ldrh	r3, [r7, #2]
 8003682:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003688:	2b01      	cmp	r3, #1
 800368a:	d00f      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x70>
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003692:	d107      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <HAL_SPI_TransmitReceive+0x68>
 800369c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d003      	beq.n	80036ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
 80036a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036aa:	e15b      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_SPI_TransmitReceive+0x82>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_SPI_TransmitReceive+0x82>
 80036b8:	887b      	ldrh	r3, [r7, #2]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80036c4:	e14e      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d003      	beq.n	80036da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2205      	movs	r2, #5
 80036d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	887a      	ldrh	r2, [r7, #2]
 80036ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	887a      	ldrh	r2, [r7, #2]
 80036f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	887a      	ldrh	r2, [r7, #2]
 80036fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	887a      	ldrh	r2, [r7, #2]
 8003702:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d007      	beq.n	800372e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003736:	d178      	bne.n	800382a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_SPI_TransmitReceive+0x10a>
 8003740:	8b7b      	ldrh	r3, [r7, #26]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d166      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	881a      	ldrh	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	1c9a      	adds	r2, r3, #2
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800376a:	e053      	b.n	8003814 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b02      	cmp	r3, #2
 8003778:	d11b      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x176>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d016      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x176>
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d113      	bne.n	80037b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	1c9a      	adds	r2, r3, #2
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d119      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x1b8>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d014      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	b292      	uxth	r2, r2
 80037d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	1c9a      	adds	r2, r3, #2
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037f0:	2301      	movs	r3, #1
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037f4:	f7fe fcc8 	bl	8002188 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003800:	429a      	cmp	r2, r3
 8003802:	d807      	bhi.n	8003814 <HAL_SPI_TransmitReceive+0x1d8>
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d003      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003812:	e0a7      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1a6      	bne.n	800376c <HAL_SPI_TransmitReceive+0x130>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1a1      	bne.n	800376c <HAL_SPI_TransmitReceive+0x130>
 8003828:	e07c      	b.n	8003924 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x1fc>
 8003832:	8b7b      	ldrh	r3, [r7, #26]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d16b      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	7812      	ldrb	r2, [r2, #0]
 8003844:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800385e:	e057      	b.n	8003910 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d11c      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x26c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_SPI_TransmitReceive+0x26c>
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	2b01      	cmp	r3, #1
 800387c:	d114      	bne.n	80038a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	7812      	ldrb	r2, [r2, #0]
 800388a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d119      	bne.n	80038ea <HAL_SPI_TransmitReceive+0x2ae>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d014      	beq.n	80038ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038e6:	2301      	movs	r3, #1
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038ea:	f7fe fc4d 	bl	8002188 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d803      	bhi.n	8003902 <HAL_SPI_TransmitReceive+0x2c6>
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d102      	bne.n	8003908 <HAL_SPI_TransmitReceive+0x2cc>
 8003902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800390e:	e029      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1a2      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x224>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d19d      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f917 	bl	8003b5c <SPI_EndRxTxTransaction>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d006      	beq.n	8003942 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003940:	e010      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	e000      	b.n	8003964 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003962:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003974:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003978:	4618      	mov	r0, r3
 800397a:	3730      	adds	r7, #48	; 0x30
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003990:	f7fe fbfa 	bl	8002188 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	4413      	add	r3, r2
 800399e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039a0:	f7fe fbf2 	bl	8002188 <HAL_GetTick>
 80039a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039a6:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	015b      	lsls	r3, r3, #5
 80039ac:	0d1b      	lsrs	r3, r3, #20
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	fb02 f303 	mul.w	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039b6:	e054      	b.n	8003a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d050      	beq.n	8003a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039c0:	f7fe fbe2 	bl	8002188 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d902      	bls.n	80039d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d13d      	bne.n	8003a52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ee:	d111      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f8:	d004      	beq.n	8003a04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a02:	d107      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1c:	d10f      	bne.n	8003a3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e017      	b.n	8003a82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d19b      	bne.n	80039b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	2000000c 	.word	0x2000000c

08003a90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa4:	d111      	bne.n	8003aca <SPI_EndRxTransaction+0x3a>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aae:	d004      	beq.n	8003aba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab8:	d107      	bne.n	8003aca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad2:	d12a      	bne.n	8003b2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003adc:	d012      	beq.n	8003b04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2180      	movs	r1, #128	; 0x80
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff ff49 	bl	8003980 <SPI_WaitFlagStateUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d02d      	beq.n	8003b50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e026      	b.n	8003b52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f7ff ff36 	bl	8003980 <SPI_WaitFlagStateUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01a      	beq.n	8003b50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e013      	b.n	8003b52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2101      	movs	r1, #1
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ff23 	bl	8003980 <SPI_WaitFlagStateUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e000      	b.n	8003b52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <SPI_EndRxTxTransaction+0x7c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <SPI_EndRxTxTransaction+0x80>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0d5b      	lsrs	r3, r3, #21
 8003b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b86:	d112      	bne.n	8003bae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2180      	movs	r1, #128	; 0x80
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff fef4 	bl	8003980 <SPI_WaitFlagStateUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e00f      	b.n	8003bce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b80      	cmp	r3, #128	; 0x80
 8003bc6:	d0f2      	beq.n	8003bae <SPI_EndRxTxTransaction+0x52>
 8003bc8:	e000      	b.n	8003bcc <SPI_EndRxTxTransaction+0x70>
        break;
 8003bca:	bf00      	nop
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2000000c 	.word	0x2000000c
 8003bdc:	165e9f81 	.word	0x165e9f81

08003be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e041      	b.n	8003c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe f8fa 	bl	8001e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f000 ff40 	bl	8004aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d001      	beq.n	8003c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e03c      	b.n	8003d12 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <HAL_TIM_Base_Start+0x9c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d018      	beq.n	8003cdc <HAL_TIM_Base_Start+0x5c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb2:	d013      	beq.n	8003cdc <HAL_TIM_Base_Start+0x5c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <HAL_TIM_Base_Start+0xa0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <HAL_TIM_Base_Start+0x5c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <HAL_TIM_Base_Start+0xa4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_TIM_Base_Start+0x5c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <HAL_TIM_Base_Start+0xa8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_TIM_Base_Start+0x5c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_TIM_Base_Start+0xac>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d111      	bne.n	8003d00 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d010      	beq.n	8003d10 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 0201 	orr.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfe:	e007      	b.n	8003d10 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40000800 	.word	0x40000800
 8003d28:	40000c00 	.word	0x40000c00
 8003d2c:	40014000 	.word	0x40014000

08003d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e041      	b.n	8003dc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe f832 	bl	8001dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f000 fe98 	bl	8004aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_PWM_Start+0x24>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e022      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d109      	bne.n	8003e0e <HAL_TIM_PWM_Start+0x3e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e015      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d109      	bne.n	8003e28 <HAL_TIM_PWM_Start+0x58>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e008      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	bf14      	ite	ne
 8003e34:	2301      	movne	r3, #1
 8003e36:	2300      	moveq	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e068      	b.n	8003f14 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x82>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e50:	e013      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start+0x92>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e60:	e00b      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Start+0xa2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e70:	e003      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	6839      	ldr	r1, [r7, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 fa55 	bl	8005332 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <HAL_TIM_PWM_Start+0x14c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d107      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_TIM_PWM_Start+0x14c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_TIM_PWM_Start+0x10e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d013      	beq.n	8003ede <HAL_TIM_PWM_Start+0x10e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <HAL_TIM_PWM_Start+0x150>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_TIM_PWM_Start+0x10e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <HAL_TIM_PWM_Start+0x154>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_TIM_PWM_Start+0x10e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <HAL_TIM_PWM_Start+0x158>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIM_PWM_Start+0x10e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <HAL_TIM_PWM_Start+0x15c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d111      	bne.n	8003f02 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b06      	cmp	r3, #6
 8003eee:	d010      	beq.n	8003f12 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f00:	e007      	b.n	8003f12 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40014000 	.word	0x40014000

08003f30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 f9f5 	bl	8005332 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <HAL_TIM_PWM_Stop+0xc4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d117      	bne.n	8003f82 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10f      	bne.n	8003f82 <HAL_TIM_PWM_Stop+0x52>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	f240 4344 	movw	r3, #1092	; 0x444
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d107      	bne.n	8003f82 <HAL_TIM_PWM_Stop+0x52>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10f      	bne.n	8003fb2 <HAL_TIM_PWM_Stop+0x82>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	f240 4344 	movw	r3, #1092	; 0x444
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d107      	bne.n	8003fb2 <HAL_TIM_PWM_Stop+0x82>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <HAL_TIM_PWM_Stop+0x92>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc0:	e013      	b.n	8003fea <HAL_TIM_PWM_Stop+0xba>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_PWM_Stop+0xa2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd0:	e00b      	b.n	8003fea <HAL_TIM_PWM_Stop+0xba>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_PWM_Stop+0xb2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe0:	e003      	b.n	8003fea <HAL_TIM_PWM_Stop+0xba>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40010000 	.word	0x40010000

08003ff8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e041      	b.n	800408e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f839 	bl	8004096 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 fd34 	bl	8004aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <HAL_TIM_IC_Start_IT+0x1e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	e013      	b.n	80040ee <HAL_TIM_IC_Start_IT+0x46>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d104      	bne.n	80040d6 <HAL_TIM_IC_Start_IT+0x2e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	e00b      	b.n	80040ee <HAL_TIM_IC_Start_IT+0x46>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_IC_Start_IT+0x3e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	e003      	b.n	80040ee <HAL_TIM_IC_Start_IT+0x46>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d104      	bne.n	8004100 <HAL_TIM_IC_Start_IT+0x58>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e013      	b.n	8004128 <HAL_TIM_IC_Start_IT+0x80>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b04      	cmp	r3, #4
 8004104:	d104      	bne.n	8004110 <HAL_TIM_IC_Start_IT+0x68>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800410c:	b2db      	uxtb	r3, r3
 800410e:	e00b      	b.n	8004128 <HAL_TIM_IC_Start_IT+0x80>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b08      	cmp	r3, #8
 8004114:	d104      	bne.n	8004120 <HAL_TIM_IC_Start_IT+0x78>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e003      	b.n	8004128 <HAL_TIM_IC_Start_IT+0x80>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004126:	b2db      	uxtb	r3, r3
 8004128:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800412a:	7bbb      	ldrb	r3, [r7, #14]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d102      	bne.n	8004136 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004130:	7b7b      	ldrb	r3, [r7, #13]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d001      	beq.n	800413a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0c2      	b.n	80042c0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <HAL_TIM_IC_Start_IT+0xa2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004148:	e013      	b.n	8004172 <HAL_TIM_IC_Start_IT+0xca>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b04      	cmp	r3, #4
 800414e:	d104      	bne.n	800415a <HAL_TIM_IC_Start_IT+0xb2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004158:	e00b      	b.n	8004172 <HAL_TIM_IC_Start_IT+0xca>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d104      	bne.n	800416a <HAL_TIM_IC_Start_IT+0xc2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004168:	e003      	b.n	8004172 <HAL_TIM_IC_Start_IT+0xca>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <HAL_TIM_IC_Start_IT+0xda>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004180:	e013      	b.n	80041aa <HAL_TIM_IC_Start_IT+0x102>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d104      	bne.n	8004192 <HAL_TIM_IC_Start_IT+0xea>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004190:	e00b      	b.n	80041aa <HAL_TIM_IC_Start_IT+0x102>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b08      	cmp	r3, #8
 8004196:	d104      	bne.n	80041a2 <HAL_TIM_IC_Start_IT+0xfa>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a0:	e003      	b.n	80041aa <HAL_TIM_IC_Start_IT+0x102>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	d841      	bhi.n	8004234 <HAL_TIM_IC_Start_IT+0x18c>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <HAL_TIM_IC_Start_IT+0x110>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	08004235 	.word	0x08004235
 80041c0:	08004235 	.word	0x08004235
 80041c4:	08004235 	.word	0x08004235
 80041c8:	080041ff 	.word	0x080041ff
 80041cc:	08004235 	.word	0x08004235
 80041d0:	08004235 	.word	0x08004235
 80041d4:	08004235 	.word	0x08004235
 80041d8:	08004211 	.word	0x08004211
 80041dc:	08004235 	.word	0x08004235
 80041e0:	08004235 	.word	0x08004235
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004223 	.word	0x08004223
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0202 	orr.w	r2, r2, #2
 80041fa:	60da      	str	r2, [r3, #12]
      break;
 80041fc:	e01d      	b.n	800423a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0204 	orr.w	r2, r2, #4
 800420c:	60da      	str	r2, [r3, #12]
      break;
 800420e:	e014      	b.n	800423a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0208 	orr.w	r2, r2, #8
 800421e:	60da      	str	r2, [r3, #12]
      break;
 8004220:	e00b      	b.n	800423a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0210 	orr.w	r2, r2, #16
 8004230:	60da      	str	r2, [r3, #12]
      break;
 8004232:	e002      	b.n	800423a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
      break;
 8004238:	bf00      	nop
  }

  if (status == HAL_OK)
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d13e      	bne.n	80042be <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2201      	movs	r2, #1
 8004246:	6839      	ldr	r1, [r7, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f001 f872 	bl	8005332 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <HAL_TIM_IC_Start_IT+0x220>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d018      	beq.n	800428a <HAL_TIM_IC_Start_IT+0x1e2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004260:	d013      	beq.n	800428a <HAL_TIM_IC_Start_IT+0x1e2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a19      	ldr	r2, [pc, #100]	; (80042cc <HAL_TIM_IC_Start_IT+0x224>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_TIM_IC_Start_IT+0x1e2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a17      	ldr	r2, [pc, #92]	; (80042d0 <HAL_TIM_IC_Start_IT+0x228>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_TIM_IC_Start_IT+0x1e2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a16      	ldr	r2, [pc, #88]	; (80042d4 <HAL_TIM_IC_Start_IT+0x22c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_TIM_IC_Start_IT+0x1e2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_TIM_IC_Start_IT+0x230>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d111      	bne.n	80042ae <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b06      	cmp	r3, #6
 800429a:	d010      	beq.n	80042be <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ac:	e007      	b.n	80042be <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40014000 	.word	0x40014000

080042dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d122      	bne.n	8004338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d11b      	bne.n	8004338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0202 	mvn.w	r2, #2
 8004308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc fa60 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fb95 	bl	8004a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fb9b 	bl	8004a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b04      	cmp	r3, #4
 8004344:	d122      	bne.n	800438c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b04      	cmp	r3, #4
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0204 	mvn.w	r2, #4
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fc fa36 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fb6b 	bl	8004a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fb71 	bl	8004a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b08      	cmp	r3, #8
 8004398:	d122      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d11b      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0208 	mvn.w	r2, #8
 80043b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2204      	movs	r2, #4
 80043b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fc fa0c 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 80043cc:	e005      	b.n	80043da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fb41 	bl	8004a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fb47 	bl	8004a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d122      	bne.n	8004434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d11b      	bne.n	8004434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0210 	mvn.w	r2, #16
 8004404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2208      	movs	r2, #8
 800440a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fc f9e2 	bl	80007e4 <HAL_TIM_IC_CaptureCallback>
 8004420:	e005      	b.n	800442e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fb17 	bl	8004a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fb1d 	bl	8004a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d10e      	bne.n	8004460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d107      	bne.n	8004460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0201 	mvn.w	r2, #1
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 faf2 	bl	8004a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	2b80      	cmp	r3, #128	; 0x80
 800446c:	d10e      	bne.n	800448c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d107      	bne.n	800448c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f001 f83e 	bl	8005508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d10e      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d107      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fae1 	bl	8004a7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d10e      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d107      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0220 	mvn.w	r2, #32
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 f809 	bl	80054f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004506:	2302      	movs	r3, #2
 8004508:	e088      	b.n	800461c <HAL_TIM_IC_ConfigChannel+0x130>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d11b      	bne.n	8004550 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f000 fd54 	bl	8004fd4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 020c 	bic.w	r2, r2, #12
 800453a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6999      	ldr	r1, [r3, #24]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	619a      	str	r2, [r3, #24]
 800454e:	e060      	b.n	8004612 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b04      	cmp	r3, #4
 8004554:	d11c      	bne.n	8004590 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6819      	ldr	r1, [r3, #0]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f000 fdc9 	bl	80050fc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004578:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6999      	ldr	r1, [r3, #24]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	021a      	lsls	r2, r3, #8
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	619a      	str	r2, [r3, #24]
 800458e:	e040      	b.n	8004612 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b08      	cmp	r3, #8
 8004594:	d11b      	bne.n	80045ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f000 fe14 	bl	80051d2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 020c 	bic.w	r2, r2, #12
 80045b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69d9      	ldr	r1, [r3, #28]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	61da      	str	r2, [r3, #28]
 80045cc:	e021      	b.n	8004612 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b0c      	cmp	r3, #12
 80045d2:	d11c      	bne.n	800460e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6819      	ldr	r1, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f000 fe30 	bl	8005248 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69d9      	ldr	r1, [r3, #28]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	021a      	lsls	r2, r3, #8
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	61da      	str	r2, [r3, #28]
 800460c:	e001      	b.n	8004612 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800461a:	7dfb      	ldrb	r3, [r7, #23]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800463e:	2302      	movs	r3, #2
 8004640:	e0ae      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b0c      	cmp	r3, #12
 800464e:	f200 809f 	bhi.w	8004790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800468d 	.word	0x0800468d
 800465c:	08004791 	.word	0x08004791
 8004660:	08004791 	.word	0x08004791
 8004664:	08004791 	.word	0x08004791
 8004668:	080046cd 	.word	0x080046cd
 800466c:	08004791 	.word	0x08004791
 8004670:	08004791 	.word	0x08004791
 8004674:	08004791 	.word	0x08004791
 8004678:	0800470f 	.word	0x0800470f
 800467c:	08004791 	.word	0x08004791
 8004680:	08004791 	.word	0x08004791
 8004684:	08004791 	.word	0x08004791
 8004688:	0800474f 	.word	0x0800474f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fa84 	bl	8004ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0208 	orr.w	r2, r2, #8
 80046a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0204 	bic.w	r2, r2, #4
 80046b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6999      	ldr	r1, [r3, #24]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	619a      	str	r2, [r3, #24]
      break;
 80046ca:	e064      	b.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 faca 	bl	8004c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6999      	ldr	r1, [r3, #24]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	021a      	lsls	r2, r3, #8
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	619a      	str	r2, [r3, #24]
      break;
 800470c:	e043      	b.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fb13 	bl	8004d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0208 	orr.w	r2, r2, #8
 8004728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0204 	bic.w	r2, r2, #4
 8004738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	61da      	str	r2, [r3, #28]
      break;
 800474c:	e023      	b.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fb5d 	bl	8004e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69d9      	ldr	r1, [r3, #28]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	021a      	lsls	r2, r3, #8
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	61da      	str	r2, [r3, #28]
      break;
 800478e:	e002      	b.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
      break;
 8004794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_TIM_ConfigClockSource+0x1c>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e0b4      	b.n	800492e <HAL_TIM_ConfigClockSource+0x186>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047fc:	d03e      	beq.n	800487c <HAL_TIM_ConfigClockSource+0xd4>
 80047fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004802:	f200 8087 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 8004806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480a:	f000 8086 	beq.w	800491a <HAL_TIM_ConfigClockSource+0x172>
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	d87f      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b70      	cmp	r3, #112	; 0x70
 8004816:	d01a      	beq.n	800484e <HAL_TIM_ConfigClockSource+0xa6>
 8004818:	2b70      	cmp	r3, #112	; 0x70
 800481a:	d87b      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b60      	cmp	r3, #96	; 0x60
 800481e:	d050      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004820:	2b60      	cmp	r3, #96	; 0x60
 8004822:	d877      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b50      	cmp	r3, #80	; 0x50
 8004826:	d03c      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004828:	2b50      	cmp	r3, #80	; 0x50
 800482a:	d873      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d058      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d86f      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b30      	cmp	r3, #48	; 0x30
 8004836:	d064      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x15a>
 8004838:	2b30      	cmp	r3, #48	; 0x30
 800483a:	d86b      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b20      	cmp	r3, #32
 800483e:	d060      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x15a>
 8004840:	2b20      	cmp	r3, #32
 8004842:	d867      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d05c      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x15a>
 8004848:	2b10      	cmp	r3, #16
 800484a:	d05a      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x15a>
 800484c:	e062      	b.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6899      	ldr	r1, [r3, #8]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f000 fd49 	bl	80052f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	609a      	str	r2, [r3, #8]
      break;
 800487a:	e04f      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6899      	ldr	r1, [r3, #8]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f000 fd32 	bl	80052f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800489e:	609a      	str	r2, [r3, #8]
      break;
 80048a0:	e03c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f000 fbf6 	bl	80050a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2150      	movs	r1, #80	; 0x50
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fd00 	bl	80052c0 <TIM_ITRx_SetConfig>
      break;
 80048c0:	e02c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f000 fc50 	bl	8005174 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2160      	movs	r1, #96	; 0x60
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fcf0 	bl	80052c0 <TIM_ITRx_SetConfig>
      break;
 80048e0:	e01c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f000 fbd6 	bl	80050a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2140      	movs	r1, #64	; 0x40
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fce0 	bl	80052c0 <TIM_ITRx_SetConfig>
      break;
 8004900:	e00c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f000 fcd7 	bl	80052c0 <TIM_ITRx_SetConfig>
      break;
 8004912:	e003      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	e000      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800491a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_TIM_SlaveConfigSynchro+0x18>
 800494a:	2302      	movs	r3, #2
 800494c:	e031      	b.n	80049b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800495e:	6839      	ldr	r1, [r7, #0]
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 faa5 	bl	8004eb0 <TIM_SlaveTimer_SetConfig>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d009      	beq.n	8004980 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e018      	b.n	80049b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800499e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b0c      	cmp	r3, #12
 80049ce:	d831      	bhi.n	8004a34 <HAL_TIM_ReadCapturedValue+0x78>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	08004a0d 	.word	0x08004a0d
 80049dc:	08004a35 	.word	0x08004a35
 80049e0:	08004a35 	.word	0x08004a35
 80049e4:	08004a35 	.word	0x08004a35
 80049e8:	08004a17 	.word	0x08004a17
 80049ec:	08004a35 	.word	0x08004a35
 80049f0:	08004a35 	.word	0x08004a35
 80049f4:	08004a35 	.word	0x08004a35
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a35 	.word	0x08004a35
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a35 	.word	0x08004a35
 8004a08:	08004a2b 	.word	0x08004a2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a12:	60fb      	str	r3, [r7, #12]

      break;
 8004a14:	e00f      	b.n	8004a36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	60fb      	str	r3, [r7, #12]

      break;
 8004a1e:	e00a      	b.n	8004a36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	60fb      	str	r3, [r7, #12]

      break;
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	60fb      	str	r3, [r7, #12]

      break;
 8004a32:	e000      	b.n	8004a36 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004a34:	bf00      	nop
  }

  return tmpreg;
 8004a36:	68fb      	ldr	r3, [r7, #12]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop

08004a44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	7f1b      	ldrb	r3, [r3, #28]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
	...

08004aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a33      	ldr	r2, [pc, #204]	; (8004b84 <TIM_Base_SetConfig+0xe0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00f      	beq.n	8004adc <TIM_Base_SetConfig+0x38>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d00b      	beq.n	8004adc <TIM_Base_SetConfig+0x38>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a30      	ldr	r2, [pc, #192]	; (8004b88 <TIM_Base_SetConfig+0xe4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d007      	beq.n	8004adc <TIM_Base_SetConfig+0x38>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a2f      	ldr	r2, [pc, #188]	; (8004b8c <TIM_Base_SetConfig+0xe8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_Base_SetConfig+0x38>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a2e      	ldr	r2, [pc, #184]	; (8004b90 <TIM_Base_SetConfig+0xec>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d108      	bne.n	8004aee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a24      	ldr	r2, [pc, #144]	; (8004b84 <TIM_Base_SetConfig+0xe0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01b      	beq.n	8004b2e <TIM_Base_SetConfig+0x8a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afc:	d017      	beq.n	8004b2e <TIM_Base_SetConfig+0x8a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <TIM_Base_SetConfig+0xe4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <TIM_Base_SetConfig+0x8a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a20      	ldr	r2, [pc, #128]	; (8004b8c <TIM_Base_SetConfig+0xe8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00f      	beq.n	8004b2e <TIM_Base_SetConfig+0x8a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <TIM_Base_SetConfig+0xec>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00b      	beq.n	8004b2e <TIM_Base_SetConfig+0x8a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1e      	ldr	r2, [pc, #120]	; (8004b94 <TIM_Base_SetConfig+0xf0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d007      	beq.n	8004b2e <TIM_Base_SetConfig+0x8a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <TIM_Base_SetConfig+0xf4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d003      	beq.n	8004b2e <TIM_Base_SetConfig+0x8a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <TIM_Base_SetConfig+0xf8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d108      	bne.n	8004b40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a07      	ldr	r2, [pc, #28]	; (8004b84 <TIM_Base_SetConfig+0xe0>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d103      	bne.n	8004b74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	615a      	str	r2, [r3, #20]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40000400 	.word	0x40000400
 8004b8c:	40000800 	.word	0x40000800
 8004b90:	40000c00 	.word	0x40000c00
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 0201 	bic.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 0302 	bic.w	r3, r3, #2
 8004be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <TIM_OC1_SetConfig+0xc8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10c      	bne.n	8004c16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0308 	bic.w	r3, r3, #8
 8004c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <TIM_OC1_SetConfig+0xc8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d111      	bne.n	8004c42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000

08004c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0210 	bic.w	r2, r3, #16
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0320 	bic.w	r3, r3, #32
 8004cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a1d      	ldr	r2, [pc, #116]	; (8004d3c <TIM_OC2_SetConfig+0xd0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10d      	bne.n	8004ce8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <TIM_OC2_SetConfig+0xd0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d113      	bne.n	8004d18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	40010000 	.word	0x40010000

08004d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0303 	bic.w	r3, r3, #3
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <TIM_OC3_SetConfig+0xd0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10d      	bne.n	8004dba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <TIM_OC3_SetConfig+0xd0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d113      	bne.n	8004dea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	621a      	str	r2, [r3, #32]
}
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000

08004e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	031b      	lsls	r3, r3, #12
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <TIM_OC4_SetConfig+0x98>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d109      	bne.n	8004e88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	019b      	lsls	r3, r3, #6
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr
 8004eac:	40010000 	.word	0x40010000

08004eb0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ecc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f023 0307 	bic.w	r3, r3, #7
 8004ede:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b70      	cmp	r3, #112	; 0x70
 8004ef8:	d01a      	beq.n	8004f30 <TIM_SlaveTimer_SetConfig+0x80>
 8004efa:	2b70      	cmp	r3, #112	; 0x70
 8004efc:	d860      	bhi.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004efe:	2b60      	cmp	r3, #96	; 0x60
 8004f00:	d054      	beq.n	8004fac <TIM_SlaveTimer_SetConfig+0xfc>
 8004f02:	2b60      	cmp	r3, #96	; 0x60
 8004f04:	d85c      	bhi.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004f06:	2b50      	cmp	r3, #80	; 0x50
 8004f08:	d046      	beq.n	8004f98 <TIM_SlaveTimer_SetConfig+0xe8>
 8004f0a:	2b50      	cmp	r3, #80	; 0x50
 8004f0c:	d858      	bhi.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d019      	beq.n	8004f46 <TIM_SlaveTimer_SetConfig+0x96>
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d854      	bhi.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004f16:	2b30      	cmp	r3, #48	; 0x30
 8004f18:	d055      	beq.n	8004fc6 <TIM_SlaveTimer_SetConfig+0x116>
 8004f1a:	2b30      	cmp	r3, #48	; 0x30
 8004f1c:	d850      	bhi.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d051      	beq.n	8004fc6 <TIM_SlaveTimer_SetConfig+0x116>
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d84c      	bhi.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x110>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d04d      	beq.n	8004fc6 <TIM_SlaveTimer_SetConfig+0x116>
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d04b      	beq.n	8004fc6 <TIM_SlaveTimer_SetConfig+0x116>
 8004f2e:	e047      	b.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68d9      	ldr	r1, [r3, #12]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f000 f9d8 	bl	80052f4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004f44:	e040      	b.n	8004fc8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d101      	bne.n	8004f52 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e03b      	b.n	8004fca <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a1a      	ldr	r2, [r3, #32]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f78:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]
      break;
 8004f96:	e017      	b.n	8004fc8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6899      	ldr	r1, [r3, #8]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f000 f87b 	bl	80050a0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004faa:	e00d      	b.n	8004fc8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6899      	ldr	r1, [r3, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f000 f8db 	bl	8005174 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004fbe:	e003      	b.n	8004fc8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc4:	e000      	b.n	8004fc8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004fc6:	bf00      	nop
  }

  return status;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0201 	bic.w	r2, r3, #1
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a23      	ldr	r2, [pc, #140]	; (800508c <TIM_TI1_SetConfig+0xb8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <TIM_TI1_SetConfig+0x56>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d00f      	beq.n	800502a <TIM_TI1_SetConfig+0x56>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a20      	ldr	r2, [pc, #128]	; (8005090 <TIM_TI1_SetConfig+0xbc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00b      	beq.n	800502a <TIM_TI1_SetConfig+0x56>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4a1f      	ldr	r2, [pc, #124]	; (8005094 <TIM_TI1_SetConfig+0xc0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d007      	beq.n	800502a <TIM_TI1_SetConfig+0x56>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <TIM_TI1_SetConfig+0xc4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d003      	beq.n	800502a <TIM_TI1_SetConfig+0x56>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a1d      	ldr	r2, [pc, #116]	; (800509c <TIM_TI1_SetConfig+0xc8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d101      	bne.n	800502e <TIM_TI1_SetConfig+0x5a>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <TIM_TI1_SetConfig+0x5c>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d008      	beq.n	8005046 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0303 	bic.w	r3, r3, #3
 800503a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	e003      	b.n	800504e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	b2db      	uxtb	r3, r3
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f023 030a 	bic.w	r3, r3, #10
 8005068:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f003 030a 	and.w	r3, r3, #10
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr
 800508c:	40010000 	.word	0x40010000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40014000 	.word	0x40014000

080050a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0201 	bic.w	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f023 030a 	bic.w	r3, r3, #10
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	f023 0210 	bic.w	r2, r3, #16
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800513a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	031b      	lsls	r3, r3, #12
 8005140:	b29b      	uxth	r3, r3
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800514e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f023 0210 	bic.w	r2, r3, #16
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800519e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	031b      	lsls	r3, r3, #12
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b087      	sub	sp, #28
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800520e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	b2db      	uxtb	r3, r3
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005222:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005286:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	031b      	lsls	r3, r3, #12
 800528c:	b29b      	uxth	r3, r3
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800529a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	031b      	lsls	r3, r3, #12
 80052a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	f043 0307 	orr.w	r3, r3, #7
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	609a      	str	r2, [r3, #8]
}
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800530e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	021a      	lsls	r2, r3, #8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	431a      	orrs	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4313      	orrs	r3, r2
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	bf00      	nop
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr

08005332 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005332:	b480      	push	{r7}
 8005334:	b087      	sub	sp, #28
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	2201      	movs	r2, #1
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	43db      	mvns	r3, r3
 8005354:	401a      	ands	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1a      	ldr	r2, [r3, #32]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	fa01 f303 	lsl.w	r3, r1, r3
 800536a:	431a      	orrs	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	621a      	str	r2, [r3, #32]
}
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
	...

0800537c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005390:	2302      	movs	r3, #2
 8005392:	e050      	b.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1b      	ldr	r2, [pc, #108]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e0:	d013      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a17      	ldr	r2, [pc, #92]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a15      	ldr	r2, [pc, #84]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a14      	ldr	r2, [pc, #80]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a12      	ldr	r2, [pc, #72]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10c      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4313      	orrs	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	40010000 	.word	0x40010000
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40000c00 	.word	0x40000c00
 8005450:	40014000 	.word	0x40014000

08005454 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800546c:	2302      	movs	r3, #2
 800546e:	e03d      	b.n	80054ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr

080054f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e03f      	b.n	80055ac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7fc fd03 	bl	8001f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2224      	movs	r2, #36	; 0x24
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800555c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f928 	bl	80057b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005572:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695a      	ldr	r2, [r3, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005582:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005592:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d17c      	bne.n	80056ce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_UART_Transmit+0x2c>
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e075      	b.n	80056d0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Transmit+0x3e>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e06e      	b.n	80056d0 <HAL_UART_Transmit+0x11c>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2221      	movs	r2, #33	; 0x21
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005608:	f7fc fdbe 	bl	8002188 <HAL_GetTick>
 800560c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005622:	d108      	bne.n	8005636 <HAL_UART_Transmit+0x82>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	61bb      	str	r3, [r7, #24]
 8005634:	e003      	b.n	800563e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005646:	e02a      	b.n	800569e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2200      	movs	r2, #0
 8005650:	2180      	movs	r1, #128	; 0x80
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f840 	bl	80056d8 <UART_WaitOnFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e036      	b.n	80056d0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	461a      	mov	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005676:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	3302      	adds	r3, #2
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	e007      	b.n	8005690 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	781a      	ldrb	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3301      	adds	r3, #1
 800568e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1cf      	bne.n	8005648 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2200      	movs	r2, #0
 80056b0:	2140      	movs	r1, #64	; 0x40
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f810 	bl	80056d8 <UART_WaitOnFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e006      	b.n	80056d0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e000      	b.n	80056d0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
  }
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b090      	sub	sp, #64	; 0x40
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e8:	e050      	b.n	800578c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f0:	d04c      	beq.n	800578c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <UART_WaitOnFlagUntilTimeout+0x30>
 80056f8:	f7fc fd46 	bl	8002188 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005704:	429a      	cmp	r2, r3
 8005706:	d241      	bcs.n	800578c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005728:	637a      	str	r2, [r7, #52]	; 0x34
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800572e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e5      	bne.n	8005708 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3314      	adds	r3, #20
 8005742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	613b      	str	r3, [r7, #16]
   return(result);
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	63bb      	str	r3, [r7, #56]	; 0x38
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3314      	adds	r3, #20
 800575a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800575c:	623a      	str	r2, [r7, #32]
 800575e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	6a3a      	ldr	r2, [r7, #32]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	61bb      	str	r3, [r7, #24]
   return(result);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e00f      	b.n	80057ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4013      	ands	r3, r2
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	429a      	cmp	r2, r3
 800579a:	bf0c      	ite	eq
 800579c:	2301      	moveq	r3, #1
 800579e:	2300      	movne	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d09f      	beq.n	80056ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3740      	adds	r7, #64	; 0x40
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b8:	b0c0      	sub	sp, #256	; 0x100
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d0:	68d9      	ldr	r1, [r3, #12]
 80057d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	ea40 0301 	orr.w	r3, r0, r1
 80057dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800580c:	f021 010c 	bic.w	r1, r1, #12
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800581a:	430b      	orrs	r3, r1
 800581c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800582a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582e:	6999      	ldr	r1, [r3, #24]
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	ea40 0301 	orr.w	r3, r0, r1
 800583a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4b91      	ldr	r3, [pc, #580]	; (8005a88 <UART_SetConfig+0x2d4>)
 8005844:	429a      	cmp	r2, r3
 8005846:	d005      	beq.n	8005854 <UART_SetConfig+0xa0>
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b8f      	ldr	r3, [pc, #572]	; (8005a8c <UART_SetConfig+0x2d8>)
 8005850:	429a      	cmp	r2, r3
 8005852:	d104      	bne.n	800585e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005854:	f7fd fc08 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8005858:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800585c:	e003      	b.n	8005866 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800585e:	f7fd fbef 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8005862:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005870:	f040 8110 	bne.w	8005a94 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005878:	2200      	movs	r2, #0
 800587a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800587e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005882:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005886:	4622      	mov	r2, r4
 8005888:	462b      	mov	r3, r5
 800588a:	1891      	adds	r1, r2, r2
 800588c:	65b9      	str	r1, [r7, #88]	; 0x58
 800588e:	415b      	adcs	r3, r3
 8005890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005892:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	4604      	mov	r4, r0
 800589c:	eb12 0804 	adds.w	r8, r2, r4
 80058a0:	460c      	mov	r4, r1
 80058a2:	eb43 0904 	adc.w	r9, r3, r4
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ba:	4690      	mov	r8, r2
 80058bc:	4699      	mov	r9, r3
 80058be:	4603      	mov	r3, r0
 80058c0:	eb18 0303 	adds.w	r3, r8, r3
 80058c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058c8:	460b      	mov	r3, r1
 80058ca:	eb49 0303 	adc.w	r3, r9, r3
 80058ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058e6:	460b      	mov	r3, r1
 80058e8:	18db      	adds	r3, r3, r3
 80058ea:	653b      	str	r3, [r7, #80]	; 0x50
 80058ec:	4613      	mov	r3, r2
 80058ee:	eb42 0303 	adc.w	r3, r2, r3
 80058f2:	657b      	str	r3, [r7, #84]	; 0x54
 80058f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058fc:	f7fa fc6c 	bl	80001d8 <__aeabi_uldivmod>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4b62      	ldr	r3, [pc, #392]	; (8005a90 <UART_SetConfig+0x2dc>)
 8005906:	fba3 2302 	umull	r2, r3, r3, r2
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	011c      	lsls	r4, r3, #4
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005918:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800591c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	64b9      	str	r1, [r7, #72]	; 0x48
 8005928:	415b      	adcs	r3, r3
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800592c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005930:	4645      	mov	r5, r8
 8005932:	eb12 0a05 	adds.w	sl, r2, r5
 8005936:	4640      	mov	r0, r8
 8005938:	4649      	mov	r1, r9
 800593a:	460d      	mov	r5, r1
 800593c:	eb43 0b05 	adc.w	fp, r3, r5
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800594c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005954:	4692      	mov	sl, r2
 8005956:	469b      	mov	fp, r3
 8005958:	4603      	mov	r3, r0
 800595a:	eb1a 0303 	adds.w	r3, sl, r3
 800595e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005962:	460b      	mov	r3, r1
 8005964:	eb4b 0303 	adc.w	r3, fp, r3
 8005968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005978:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800597c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005980:	460b      	mov	r3, r1
 8005982:	18db      	adds	r3, r3, r3
 8005984:	643b      	str	r3, [r7, #64]	; 0x40
 8005986:	4613      	mov	r3, r2
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	647b      	str	r3, [r7, #68]	; 0x44
 800598e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005996:	f7fa fc1f 	bl	80001d8 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4611      	mov	r1, r2
 80059a0:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <UART_SetConfig+0x2dc>)
 80059a2:	fba3 2301 	umull	r2, r3, r3, r1
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2264      	movs	r2, #100	; 0x64
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	1acb      	subs	r3, r1, r3
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059b6:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <UART_SetConfig+0x2dc>)
 80059b8:	fba3 2302 	umull	r2, r3, r3, r2
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059c4:	441c      	add	r4, r3
 80059c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	1891      	adds	r1, r2, r2
 80059de:	63b9      	str	r1, [r7, #56]	; 0x38
 80059e0:	415b      	adcs	r3, r3
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059e8:	4641      	mov	r1, r8
 80059ea:	1851      	adds	r1, r2, r1
 80059ec:	6339      	str	r1, [r7, #48]	; 0x30
 80059ee:	4649      	mov	r1, r9
 80059f0:	414b      	adcs	r3, r1
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a00:	4659      	mov	r1, fp
 8005a02:	00cb      	lsls	r3, r1, #3
 8005a04:	4655      	mov	r5, sl
 8005a06:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005a0a:	4651      	mov	r1, sl
 8005a0c:	00ca      	lsls	r2, r1, #3
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4619      	mov	r1, r3
 8005a12:	4603      	mov	r3, r0
 8005a14:	4642      	mov	r2, r8
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	460a      	mov	r2, r1
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	18db      	adds	r3, r3, r3
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a42:	4613      	mov	r3, r2
 8005a44:	eb42 0303 	adc.w	r3, r2, r3
 8005a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a52:	f7fa fbc1 	bl	80001d8 <__aeabi_uldivmod>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <UART_SetConfig+0x2dc>)
 8005a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	2164      	movs	r1, #100	; 0x64
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	3332      	adds	r3, #50	; 0x32
 8005a6e:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <UART_SetConfig+0x2dc>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 0207 	and.w	r2, r3, #7
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4422      	add	r2, r4
 8005a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a84:	e109      	b.n	8005c9a <UART_SetConfig+0x4e6>
 8005a86:	bf00      	nop
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	40011400 	.word	0x40011400
 8005a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	1891      	adds	r1, r2, r2
 8005aac:	6239      	str	r1, [r7, #32]
 8005aae:	415b      	adcs	r3, r3
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	1854      	adds	r4, r2, r1
 8005aba:	46cc      	mov	ip, r9
 8005abc:	eb43 050c 	adc.w	r5, r3, ip
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	00eb      	lsls	r3, r5, #3
 8005aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ace:	00e2      	lsls	r2, r4, #3
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	461d      	mov	r5, r3
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	4603      	mov	r3, r0
 8005ada:	18e3      	adds	r3, r4, r3
 8005adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	eb45 0303 	adc.w	r3, r5, r3
 8005ae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005af6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b06:	4629      	mov	r1, r5
 8005b08:	008b      	lsls	r3, r1, #2
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4604      	mov	r4, r0
 8005b10:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005b14:	4601      	mov	r1, r0
 8005b16:	008a      	lsls	r2, r1, #2
 8005b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b1c:	f7fa fb5c 	bl	80001d8 <__aeabi_uldivmod>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4b60      	ldr	r3, [pc, #384]	; (8005ca8 <UART_SetConfig+0x4f4>)
 8005b26:	fba3 2302 	umull	r2, r3, r3, r2
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	011c      	lsls	r4, r3, #4
 8005b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b40:	4642      	mov	r2, r8
 8005b42:	464b      	mov	r3, r9
 8005b44:	1891      	adds	r1, r2, r2
 8005b46:	61b9      	str	r1, [r7, #24]
 8005b48:	415b      	adcs	r3, r3
 8005b4a:	61fb      	str	r3, [r7, #28]
 8005b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b50:	4641      	mov	r1, r8
 8005b52:	1851      	adds	r1, r2, r1
 8005b54:	6139      	str	r1, [r7, #16]
 8005b56:	4649      	mov	r1, r9
 8005b58:	414b      	adcs	r3, r1
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b68:	4659      	mov	r1, fp
 8005b6a:	00cb      	lsls	r3, r1, #3
 8005b6c:	4655      	mov	r5, sl
 8005b6e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005b72:	4651      	mov	r1, sl
 8005b74:	00ca      	lsls	r2, r1, #3
 8005b76:	4610      	mov	r0, r2
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	189b      	adds	r3, r3, r2
 8005b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b84:	464b      	mov	r3, r9
 8005b86:	460a      	mov	r2, r1
 8005b88:	eb42 0303 	adc.w	r3, r2, r3
 8005b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ba8:	4649      	mov	r1, r9
 8005baa:	008b      	lsls	r3, r1, #2
 8005bac:	4645      	mov	r5, r8
 8005bae:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	008a      	lsls	r2, r1, #2
 8005bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bba:	f7fa fb0d 	bl	80001d8 <__aeabi_uldivmod>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4b39      	ldr	r3, [pc, #228]	; (8005ca8 <UART_SetConfig+0x4f4>)
 8005bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	2164      	movs	r1, #100	; 0x64
 8005bcc:	fb01 f303 	mul.w	r3, r1, r3
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	3332      	adds	r3, #50	; 0x32
 8005bd6:	4a34      	ldr	r2, [pc, #208]	; (8005ca8 <UART_SetConfig+0x4f4>)
 8005bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be2:	441c      	add	r4, r3
 8005be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be8:	2200      	movs	r2, #0
 8005bea:	673b      	str	r3, [r7, #112]	; 0x70
 8005bec:	677a      	str	r2, [r7, #116]	; 0x74
 8005bee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bf2:	4642      	mov	r2, r8
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	1891      	adds	r1, r2, r2
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	415b      	adcs	r3, r3
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c02:	4641      	mov	r1, r8
 8005c04:	1851      	adds	r1, r2, r1
 8005c06:	6039      	str	r1, [r7, #0]
 8005c08:	4649      	mov	r1, r9
 8005c0a:	414b      	adcs	r3, r1
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c1a:	4659      	mov	r1, fp
 8005c1c:	00cb      	lsls	r3, r1, #3
 8005c1e:	4655      	mov	r5, sl
 8005c20:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005c24:	4651      	mov	r1, sl
 8005c26:	00ca      	lsls	r2, r1, #3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	4642      	mov	r2, r8
 8005c30:	189b      	adds	r3, r3, r2
 8005c32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c34:	464b      	mov	r3, r9
 8005c36:	460a      	mov	r2, r1
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	663b      	str	r3, [r7, #96]	; 0x60
 8005c48:	667a      	str	r2, [r7, #100]	; 0x64
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c56:	4649      	mov	r1, r9
 8005c58:	008b      	lsls	r3, r1, #2
 8005c5a:	4645      	mov	r5, r8
 8005c5c:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8005c60:	4641      	mov	r1, r8
 8005c62:	008a      	lsls	r2, r1, #2
 8005c64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c68:	f7fa fab6 	bl	80001d8 <__aeabi_uldivmod>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4b0d      	ldr	r3, [pc, #52]	; (8005ca8 <UART_SetConfig+0x4f4>)
 8005c72:	fba3 1302 	umull	r1, r3, r3, r2
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	2164      	movs	r1, #100	; 0x64
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	3332      	adds	r3, #50	; 0x32
 8005c84:	4a08      	ldr	r2, [pc, #32]	; (8005ca8 <UART_SetConfig+0x4f4>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4422      	add	r2, r4
 8005c98:	609a      	str	r2, [r3, #8]
}
 8005c9a:	bf00      	nop
 8005c9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca6:	bf00      	nop
 8005ca8:	51eb851f 	.word	0x51eb851f

08005cac <StAllocBig>:
 8005cac:	88d3      	ldrh	r3, [r2, #6]
 8005cae:	b4f0      	push	{r4, r5, r6, r7}
 8005cb0:	1c4c      	adds	r4, r1, #1
 8005cb2:	8896      	ldrh	r6, [r2, #4]
 8005cb4:	f103 0508 	add.w	r5, r3, #8
 8005cb8:	00a4      	lsls	r4, r4, #2
 8005cba:	1967      	adds	r7, r4, r5
 8005cbc:	42b7      	cmp	r7, r6
 8005cbe:	d903      	bls.n	8005cc8 <StAllocBig+0x1c>
 8005cc0:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8005cc4:	bcf0      	pop	{r4, r5, r6, r7}
 8005cc6:	4770      	bx	lr
 8005cc8:	6816      	ldr	r6, [r2, #0]
 8005cca:	18f7      	adds	r7, r6, r3
 8005ccc:	6007      	str	r7, [r0, #0]
 8005cce:	6817      	ldr	r7, [r2, #0]
 8005cd0:	443d      	add	r5, r7
 8005cd2:	50f5      	str	r5, [r6, r3]
 8005cd4:	6803      	ldr	r3, [r0, #0]
 8005cd6:	7199      	strb	r1, [r3, #6]
 8005cd8:	88d3      	ldrh	r3, [r2, #6]
 8005cda:	3308      	adds	r3, #8
 8005cdc:	441c      	add	r4, r3
 8005cde:	80d4      	strh	r4, [r2, #6]
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	bcf0      	pop	{r4, r5, r6, r7}
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop

08005ce8 <StFreeBig>:
 8005ce8:	6803      	ldr	r3, [r0, #0]
 8005cea:	b14b      	cbz	r3, 8005d00 <StFreeBig+0x18>
 8005cec:	b141      	cbz	r1, 8005d00 <StFreeBig+0x18>
 8005cee:	799a      	ldrb	r2, [r3, #6]
 8005cf0:	88cb      	ldrh	r3, [r1, #6]
 8005cf2:	43d2      	mvns	r2, r2
 8005cf4:	3b08      	subs	r3, #8
 8005cf6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	80ca      	strh	r2, [r1, #6]
 8005cfe:	6003      	str	r3, [r0, #0]
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop

08005d04 <InitBig>:
 8005d04:	7983      	ldrb	r3, [r0, #6]
 8005d06:	b470      	push	{r4, r5, r6}
 8005d08:	b1b3      	cbz	r3, 8005d38 <InitBig+0x34>
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	6805      	ldr	r5, [r0, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	2600      	movs	r6, #0
 8005d12:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
 8005d16:	7984      	ldrb	r4, [r0, #6]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3401      	adds	r4, #1
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	461a      	mov	r2, r3
 8005d22:	d3f6      	bcc.n	8005d12 <InitBig+0xe>
 8005d24:	2301      	movs	r3, #1
 8005d26:	2900      	cmp	r1, #0
 8005d28:	8083      	strh	r3, [r0, #4]
 8005d2a:	bfb4      	ite	lt
 8005d2c:	4249      	neglt	r1, r1
 8005d2e:	2300      	movge	r3, #0
 8005d30:	71c3      	strb	r3, [r0, #7]
 8005d32:	6029      	str	r1, [r5, #0]
 8005d34:	bc70      	pop	{r4, r5, r6}
 8005d36:	4770      	bx	lr
 8005d38:	6805      	ldr	r5, [r0, #0]
 8005d3a:	e7f3      	b.n	8005d24 <InitBig+0x20>

08005d3c <CopyBig>:
 8005d3c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8005d40:	798b      	ldrb	r3, [r1, #6]
 8005d42:	8884      	ldrh	r4, [r0, #4]
 8005d44:	429c      	cmp	r4, r3
 8005d46:	d907      	bls.n	8005d58 <CopyBig+0x1c>
 8005d48:	3301      	adds	r3, #1
 8005d4a:	42a3      	cmp	r3, r4
 8005d4c:	d227      	bcs.n	8005d9e <CopyBig+0x62>
 8005d4e:	f241 40b5 	movw	r0, #5301	; 0x14b5
 8005d52:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005d56:	4770      	bx	lr
 8005d58:	f04f 0800 	mov.w	r8, #0
 8005d5c:	79c3      	ldrb	r3, [r0, #7]
 8005d5e:	71cb      	strb	r3, [r1, #7]
 8005d60:	808c      	strh	r4, [r1, #4]
 8005d62:	4622      	mov	r2, r4
 8005d64:	b1f4      	cbz	r4, 8005da4 <CopyBig+0x68>
 8005d66:	6807      	ldr	r7, [r0, #0]
 8005d68:	680d      	ldr	r5, [r1, #0]
 8005d6a:	00a6      	lsls	r6, r4, #2
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	58f8      	ldr	r0, [r7, r3]
 8005d70:	50e8      	str	r0, [r5, r3]
 8005d72:	3304      	adds	r3, #4
 8005d74:	42b3      	cmp	r3, r6
 8005d76:	d1fa      	bne.n	8005d6e <CopyBig+0x32>
 8005d78:	798b      	ldrb	r3, [r1, #6]
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	db0b      	blt.n	8005d96 <CopyBig+0x5a>
 8005d7e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8005d82:	3b01      	subs	r3, #1
 8005d84:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005d88:	2500      	movs	r5, #0
 8005d8a:	f843 5f04 	str.w	r5, [r3, #4]!
 8005d8e:	798c      	ldrb	r4, [r1, #6]
 8005d90:	3201      	adds	r2, #1
 8005d92:	4294      	cmp	r4, r2
 8005d94:	daf9      	bge.n	8005d8a <CopyBig+0x4e>
 8005d96:	4640      	mov	r0, r8
 8005d98:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005d9c:	4770      	bx	lr
 8005d9e:	f241 48b5 	movw	r8, #5301	; 0x14b5
 8005da2:	e7db      	b.n	8005d5c <CopyBig+0x20>
 8005da4:	680d      	ldr	r5, [r1, #0]
 8005da6:	e7ea      	b.n	8005d7e <CopyBig+0x42>

08005da8 <Add_Moduli_Big>:
 8005da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	7983      	ldrb	r3, [r0, #6]
 8005dae:	8884      	ldrh	r4, [r0, #4]
 8005db0:	888f      	ldrh	r7, [r1, #4]
 8005db2:	6805      	ldr	r5, [r0, #0]
 8005db4:	680e      	ldr	r6, [r1, #0]
 8005db6:	4692      	mov	sl, r2
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	42a7      	cmp	r7, r4
 8005dbc:	bf34      	ite	cc
 8005dbe:	46bb      	movcc	fp, r7
 8005dc0:	46a3      	movcs	fp, r4
 8005dc2:	4294      	cmp	r4, r2
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	f8da 8000 	ldr.w	r8, [sl]
 8005dca:	d20f      	bcs.n	8005dec <Add_Moduli_Big+0x44>
 8005dcc:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8005dd6:	f04f 0c00 	mov.w	ip, #0
 8005dda:	f842 cf04 	str.w	ip, [r2, #4]!
 8005dde:	f890 e006 	ldrb.w	lr, [r0, #6]
 8005de2:	3301      	adds	r3, #1
 8005de4:	f10e 0e01 	add.w	lr, lr, #1
 8005de8:	459e      	cmp	lr, r3
 8005dea:	d8f6      	bhi.n	8005dda <Add_Moduli_Big+0x32>
 8005dec:	798a      	ldrb	r2, [r1, #6]
 8005dee:	3201      	adds	r2, #1
 8005df0:	4297      	cmp	r7, r2
 8005df2:	463b      	mov	r3, r7
 8005df4:	d20f      	bcs.n	8005e16 <Add_Moduli_Big+0x6e>
 8005df6:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8005dfa:	3a01      	subs	r2, #1
 8005dfc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005e00:	f04f 0c00 	mov.w	ip, #0
 8005e04:	f842 cf04 	str.w	ip, [r2, #4]!
 8005e08:	f891 e006 	ldrb.w	lr, [r1, #6]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	f10e 0e01 	add.w	lr, lr, #1
 8005e12:	459e      	cmp	lr, r3
 8005e14:	d8f6      	bhi.n	8005e04 <Add_Moduli_Big+0x5c>
 8005e16:	42bc      	cmp	r4, r7
 8005e18:	d200      	bcs.n	8005e1c <Add_Moduli_Big+0x74>
 8005e1a:	4608      	mov	r0, r1
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	f7ff ff8d 	bl	8005d3c <CopyBig>
 8005e22:	46dc      	mov	ip, fp
 8005e24:	f1bb 0f00 	cmp.w	fp, #0
 8005e28:	d030      	beq.n	8005e8c <Add_Moduli_Big+0xe4>
 8005e2a:	ea4f 098b 	mov.w	r9, fp, lsl #2
 8005e2e:	2700      	movs	r7, #0
 8005e30:	2200      	movs	r2, #0
 8005e32:	2300      	movs	r3, #0
 8005e34:	59e8      	ldr	r0, [r5, r7]
 8005e36:	59f4      	ldr	r4, [r6, r7]
 8005e38:	2100      	movs	r1, #0
 8005e3a:	1900      	adds	r0, r0, r4
 8005e3c:	f141 0100 	adc.w	r1, r1, #0
 8005e40:	1880      	adds	r0, r0, r2
 8005e42:	f848 0007 	str.w	r0, [r8, r7]
 8005e46:	f107 0704 	add.w	r7, r7, #4
 8005e4a:	eb41 0103 	adc.w	r1, r1, r3
 8005e4e:	454f      	cmp	r7, r9
 8005e50:	460a      	mov	r2, r1
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	d1ed      	bne.n	8005e34 <Add_Moduli_Big+0x8c>
 8005e58:	ea52 0103 	orrs.w	r1, r2, r3
 8005e5c:	d016      	beq.n	8005e8c <Add_Moduli_Big+0xe4>
 8005e5e:	f858 3007 	ldr.w	r3, [r8, r7]
 8005e62:	3301      	adds	r3, #1
 8005e64:	f848 3007 	str.w	r3, [r8, r7]
 8005e68:	4447      	add	r7, r8
 8005e6a:	b97b      	cbnz	r3, 8005e8c <Add_Moduli_Big+0xe4>
 8005e6c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8005e70:	455a      	cmp	r2, fp
 8005e72:	d202      	bcs.n	8005e7a <Add_Moduli_Big+0xd2>
 8005e74:	e00c      	b.n	8005e90 <Add_Moduli_Big+0xe8>
 8005e76:	4594      	cmp	ip, r2
 8005e78:	d80a      	bhi.n	8005e90 <Add_Moduli_Big+0xe8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f10c 0c01 	add.w	ip, ip, #1
 8005e82:	f847 3f04 	str.w	r3, [r7, #4]!
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f5      	beq.n	8005e76 <Add_Moduli_Big+0xce>
 8005e8a:	e001      	b.n	8005e90 <Add_Moduli_Big+0xe8>
 8005e8c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8005e90:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8005e94:	b113      	cbz	r3, 8005e9c <Add_Moduli_Big+0xf4>
 8005e96:	3201      	adds	r2, #1
 8005e98:	f8aa 2004 	strh.w	r2, [sl, #4]
 8005e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ea0 <IsZeroBig>:
 8005ea0:	8883      	ldrh	r3, [r0, #4]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d001      	beq.n	8005eaa <IsZeroBig+0xa>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	4770      	bx	lr
 8005eaa:	6803      	ldr	r3, [r0, #0]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	f1d0 0001 	rsbs	r0, r0, #1
 8005eb2:	bf38      	it	cc
 8005eb4:	2000      	movcc	r0, #0
 8005eb6:	4770      	bx	lr

08005eb8 <SetZeroBig>:
 8005eb8:	2300      	movs	r3, #0
 8005eba:	b430      	push	{r4, r5}
 8005ebc:	6804      	ldr	r4, [r0, #0]
 8005ebe:	71c3      	strb	r3, [r0, #7]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	461d      	mov	r5, r3
 8005ec4:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
 8005ec8:	7981      	ldrb	r1, [r0, #6]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3101      	adds	r1, #1
 8005ed0:	428b      	cmp	r3, r1
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	d3f6      	bcc.n	8005ec4 <SetZeroBig+0xc>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	8083      	strh	r3, [r0, #4]
 8005eda:	bc30      	pop	{r4, r5}
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop

08005ee0 <CompareBig>:
 8005ee0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8005ee4:	79c2      	ldrb	r2, [r0, #7]
 8005ee6:	79cb      	ldrb	r3, [r1, #7]
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	b254      	sxtb	r4, r2
 8005eec:	d005      	beq.n	8005efa <CompareBig+0x1a>
 8005eee:	2c01      	cmp	r4, #1
 8005ef0:	d036      	beq.n	8005f60 <CompareBig+0x80>
 8005ef2:	2003      	movs	r0, #3
 8005ef4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005ef8:	4770      	bx	lr
 8005efa:	8884      	ldrh	r4, [r0, #4]
 8005efc:	888f      	ldrh	r7, [r1, #4]
 8005efe:	42bc      	cmp	r4, r7
 8005f00:	d820      	bhi.n	8005f44 <CompareBig+0x64>
 8005f02:	d327      	bcc.n	8005f54 <CompareBig+0x74>
 8005f04:	f8d0 8000 	ldr.w	r8, [r0]
 8005f08:	f8d1 c000 	ldr.w	ip, [r1]
 8005f0c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 8005f10:	eb0c 0187 	add.w	r1, ip, r7, lsl #2
 8005f14:	2301      	movs	r3, #1
 8005f16:	e004      	b.n	8005f22 <CompareBig+0x42>
 8005f18:	42a3      	cmp	r3, r4
 8005f1a:	d808      	bhi.n	8005f2e <CompareBig+0x4e>
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	42a3      	cmp	r3, r4
 8005f20:	d805      	bhi.n	8005f2e <CompareBig+0x4e>
 8005f22:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8005f26:	f851 5d04 	ldr.w	r5, [r1, #-4]!
 8005f2a:	42ae      	cmp	r6, r5
 8005f2c:	d0f4      	beq.n	8005f18 <CompareBig+0x38>
 8005f2e:	1e59      	subs	r1, r3, #1
 8005f30:	42a1      	cmp	r1, r4
 8005f32:	d01d      	beq.n	8005f70 <CompareBig+0x90>
 8005f34:	1ae4      	subs	r4, r4, r3
 8005f36:	1afb      	subs	r3, r7, r3
 8005f38:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8005f3c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8005f40:	4299      	cmp	r1, r3
 8005f42:	d907      	bls.n	8005f54 <CompareBig+0x74>
 8005f44:	2a00      	cmp	r2, #0
 8005f46:	bf0c      	ite	eq
 8005f48:	2002      	moveq	r0, #2
 8005f4a:	f06f 0001 	mvnne.w	r0, #1
 8005f4e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005f52:	4770      	bx	lr
 8005f54:	2a00      	cmp	r2, #0
 8005f56:	bf0c      	ite	eq
 8005f58:	f04f 30ff 	moveq.w	r0, #4294967295
 8005f5c:	2001      	movne	r0, #1
 8005f5e:	e7c9      	b.n	8005ef4 <CompareBig+0x14>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bf0c      	ite	eq
 8005f64:	f06f 0002 	mvneq.w	r0, #2
 8005f68:	2003      	movne	r0, #3
 8005f6a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005f6e:	4770      	bx	lr
 8005f70:	2000      	movs	r0, #0
 8005f72:	e7bf      	b.n	8005ef4 <CompareBig+0x14>

08005f74 <CountBits>:
 8005f74:	b510      	push	{r4, lr}
 8005f76:	4604      	mov	r4, r0
 8005f78:	f7ff ff92 	bl	8005ea0 <IsZeroBig>
 8005f7c:	b9d8      	cbnz	r0, 8005fb6 <CountBits+0x42>
 8005f7e:	88a0      	ldrh	r0, [r4, #4]
 8005f80:	6822      	ldr	r2, [r4, #0]
 8005f82:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8005f86:	3b01      	subs	r3, #1
 8005f88:	0140      	lsls	r0, r0, #5
 8005f8a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f8e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005f92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f96:	d00d      	beq.n	8005fb4 <CountBits+0x40>
 8005f98:	f1a0 0420 	sub.w	r4, r0, #32
 8005f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fa0:	e001      	b.n	8005fa6 <CountBits+0x32>
 8005fa2:	42a0      	cmp	r0, r4
 8005fa4:	d009      	beq.n	8005fba <CountBits+0x46>
 8005fa6:	085b      	lsrs	r3, r3, #1
 8005fa8:	ea01 0203 	and.w	r2, r1, r3
 8005fac:	4293      	cmp	r3, r2
 8005fae:	f100 30ff 	add.w	r0, r0, #4294967295
 8005fb2:	d1f6      	bne.n	8005fa2 <CountBits+0x2e>
 8005fb4:	bd10      	pop	{r4, pc}
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	bd10      	pop	{r4, pc}

08005fbc <CountBytes>:
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	f7ff ff6e 	bl	8005ea0 <IsZeroBig>
 8005fc4:	2801      	cmp	r0, #1
 8005fc6:	d01a      	beq.n	8005ffe <CountBytes+0x42>
 8005fc8:	88a0      	ldrh	r0, [r4, #4]
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	0080      	lsls	r0, r0, #2
 8005fce:	4403      	add	r3, r0
 8005fd0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8005fd4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005fd8:	d111      	bne.n	8005ffe <CountBytes+0x42>
 8005fda:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8005fde:	f100 32ff 	add.w	r2, r0, #4294967295
 8005fe2:	d10b      	bne.n	8005ffc <CountBytes+0x40>
 8005fe4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8005fe8:	f1a0 0202 	sub.w	r2, r0, #2
 8005fec:	d106      	bne.n	8005ffc <CountBytes+0x40>
 8005fee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005ff2:	f1a0 0203 	sub.w	r2, r0, #3
 8005ff6:	d101      	bne.n	8005ffc <CountBytes+0x40>
 8005ff8:	3804      	subs	r0, #4
 8005ffa:	bd10      	pop	{r4, pc}
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	bd10      	pop	{r4, pc}

08006000 <W8_to_Big>:
 8006000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	2a00      	cmp	r2, #0
 8006006:	d072      	beq.n	80060ee <W8_to_Big+0xee>
 8006008:	2800      	cmp	r0, #0
 800600a:	d06f      	beq.n	80060ec <W8_to_Big+0xec>
 800600c:	1ccc      	adds	r4, r1, #3
 800600e:	7993      	ldrb	r3, [r2, #6]
 8006010:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8006014:	4563      	cmp	r3, ip
 8006016:	d203      	bcs.n	8006020 <W8_to_Big+0x20>
 8006018:	f241 40b5 	movw	r0, #5301	; 0x14b5
 800601c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	2900      	cmp	r1, #0
 8006022:	d068      	beq.n	80060f6 <W8_to_Big+0xf6>
 8006024:	4688      	mov	r8, r1
 8006026:	bfb8      	it	lt
 8006028:	46a0      	movlt	r8, r4
 800602a:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800602e:	f1b8 0f00 	cmp.w	r8, #0
 8006032:	6817      	ldr	r7, [r2, #0]
 8006034:	bfd8      	it	le
 8006036:	2400      	movle	r4, #0
 8006038:	dd1a      	ble.n	8006070 <W8_to_Big+0x70>
 800603a:	1843      	adds	r3, r0, r1
 800603c:	463c      	mov	r4, r7
 800603e:	eb07 0a88 	add.w	sl, r7, r8, lsl #2
 8006042:	f813 5c03 	ldrb.w	r5, [r3, #-3]
 8006046:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 800604a:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 800604e:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 8006052:	042d      	lsls	r5, r5, #16
 8006054:	ea45 650b 	orr.w	r5, r5, fp, lsl #24
 8006058:	ea45 0509 	orr.w	r5, r5, r9
 800605c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8006060:	f844 5b04 	str.w	r5, [r4], #4
 8006064:	4554      	cmp	r4, sl
 8006066:	f1a3 0304 	sub.w	r3, r3, #4
 800606a:	d1ea      	bne.n	8006042 <W8_to_Big+0x42>
 800606c:	7993      	ldrb	r3, [r2, #6]
 800606e:	4644      	mov	r4, r8
 8006070:	429c      	cmp	r4, r3
 8006072:	da0b      	bge.n	800608c <W8_to_Big+0x8c>
 8006074:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 8006078:	3d01      	subs	r5, #1
 800607a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800607e:	2300      	movs	r3, #0
 8006080:	f845 3f04 	str.w	r3, [r5, #4]!
 8006084:	7996      	ldrb	r6, [r2, #6]
 8006086:	3401      	adds	r4, #1
 8006088:	42b4      	cmp	r4, r6
 800608a:	dbf9      	blt.n	8006080 <W8_to_Big+0x80>
 800608c:	f011 0103 	ands.w	r1, r1, #3
 8006090:	d010      	beq.n	80060b4 <W8_to_Big+0xb4>
 8006092:	7803      	ldrb	r3, [r0, #0]
 8006094:	f847 3028 	str.w	r3, [r7, r8, lsl #2]
 8006098:	2901      	cmp	r1, #1
 800609a:	eb07 0888 	add.w	r8, r7, r8, lsl #2
 800609e:	dd09      	ble.n	80060b4 <W8_to_Big+0xb4>
 80060a0:	1e44      	subs	r4, r0, #1
 80060a2:	4421      	add	r1, r4
 80060a4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80060a8:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80060ac:	4288      	cmp	r0, r1
 80060ae:	f8c8 3000 	str.w	r3, [r8]
 80060b2:	d1f7      	bne.n	80060a4 <W8_to_Big+0xa4>
 80060b4:	f10c 4180 	add.w	r1, ip, #1073741824	; 0x40000000
 80060b8:	3901      	subs	r1, #1
 80060ba:	fa1f f38c 	uxth.w	r3, ip
 80060be:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80060c2:	8093      	strh	r3, [r2, #4]
 80060c4:	b971      	cbnz	r1, 80060e4 <W8_to_Big+0xe4>
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d102      	bne.n	80060d0 <W8_to_Big+0xd0>
 80060ca:	e00b      	b.n	80060e4 <W8_to_Big+0xe4>
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d008      	beq.n	80060e2 <W8_to_Big+0xe2>
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80060d8:	3901      	subs	r1, #1
 80060da:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80060de:	2900      	cmp	r1, #0
 80060e0:	d0f4      	beq.n	80060cc <W8_to_Big+0xcc>
 80060e2:	8093      	strh	r3, [r2, #4]
 80060e4:	2000      	movs	r0, #0
 80060e6:	71d0      	strb	r0, [r2, #7]
 80060e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ec:	b119      	cbz	r1, 80060f6 <W8_to_Big+0xf6>
 80060ee:	f241 40b8 	movw	r0, #5304	; 0x14b8
 80060f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f6:	4610      	mov	r0, r2
 80060f8:	f7ff fede 	bl	8005eb8 <SetZeroBig>
 80060fc:	2000      	movs	r0, #0
 80060fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006102:	bf00      	nop

08006104 <Big_to_W8>:
 8006104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006108:	4691      	mov	r9, r2
 800610a:	4688      	mov	r8, r1
 800610c:	4605      	mov	r5, r0
 800610e:	f7ff ff55 	bl	8005fbc <CountBytes>
 8006112:	2800      	cmp	r0, #0
 8006114:	4602      	mov	r2, r0
 8006116:	bfb8      	it	lt
 8006118:	1cc2      	addlt	r2, r0, #3
 800611a:	1092      	asrs	r2, r2, #2
 800611c:	2a00      	cmp	r2, #0
 800611e:	dd2f      	ble.n	8006180 <Big_to_W8+0x7c>
 8006120:	eb08 0400 	add.w	r4, r8, r0
 8006124:	0097      	lsls	r7, r2, #2
 8006126:	2300      	movs	r3, #0
 8006128:	682e      	ldr	r6, [r5, #0]
 800612a:	58f1      	ldr	r1, [r6, r3]
 800612c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006130:	682e      	ldr	r6, [r5, #0]
 8006132:	58f1      	ldr	r1, [r6, r3]
 8006134:	0a09      	lsrs	r1, r1, #8
 8006136:	f804 1c02 	strb.w	r1, [r4, #-2]
 800613a:	682e      	ldr	r6, [r5, #0]
 800613c:	58f1      	ldr	r1, [r6, r3]
 800613e:	0c09      	lsrs	r1, r1, #16
 8006140:	f804 1c03 	strb.w	r1, [r4, #-3]
 8006144:	682e      	ldr	r6, [r5, #0]
 8006146:	58f6      	ldr	r6, [r6, r3]
 8006148:	3304      	adds	r3, #4
 800614a:	0e36      	lsrs	r6, r6, #24
 800614c:	42bb      	cmp	r3, r7
 800614e:	f804 6d04 	strb.w	r6, [r4, #-4]!
 8006152:	d1e9      	bne.n	8006128 <Big_to_W8+0x24>
 8006154:	f010 0303 	ands.w	r3, r0, #3
 8006158:	d009      	beq.n	800616e <Big_to_W8+0x6a>
 800615a:	6829      	ldr	r1, [r5, #0]
 800615c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006160:	4498      	add	r8, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8006168:	ea4f 2212 	mov.w	r2, r2, lsr #8
 800616c:	d1f9      	bne.n	8006162 <Big_to_W8+0x5e>
 800616e:	f1b9 0f00 	cmp.w	r9, #0
 8006172:	d003      	beq.n	800617c <Big_to_W8+0x78>
 8006174:	f8c9 0000 	str.w	r0, [r9]
 8006178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800617c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006180:	2200      	movs	r2, #0
 8006182:	e7e7      	b.n	8006154 <Big_to_W8+0x50>

08006184 <FastMulInnerBase>:
 8006184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	8882      	ldrh	r2, [r0, #4]
 800618a:	7983      	ldrb	r3, [r0, #6]
 800618c:	440a      	add	r2, r1
 800618e:	429a      	cmp	r2, r3
 8006190:	4604      	mov	r4, r0
 8006192:	460d      	mov	r5, r1
 8006194:	dd04      	ble.n	80061a0 <FastMulInnerBase+0x1c>
 8006196:	f241 46b5 	movw	r6, #5301	; 0x14b5
 800619a:	4630      	mov	r0, r6
 800619c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a0:	f7ff fe7e 	bl	8005ea0 <IsZeroBig>
 80061a4:	4606      	mov	r6, r0
 80061a6:	b9e8      	cbnz	r0, 80061e4 <FastMulInnerBase+0x60>
 80061a8:	2d00      	cmp	r5, #0
 80061aa:	d0f6      	beq.n	800619a <FastMulInnerBase+0x16>
 80061ac:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	f1b8 0f01 	cmp.w	r8, #1
 80061b6:	ea4f 0285 	mov.w	r2, r5, lsl #2
 80061ba:	d007      	beq.n	80061cc <FastMulInnerBase+0x48>
 80061bc:	eb00 0388 	add.w	r3, r0, r8, lsl #2
 80061c0:	1d07      	adds	r7, r0, #4
 80061c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80061c6:	5099      	str	r1, [r3, r2]
 80061c8:	42bb      	cmp	r3, r7
 80061ca:	d1fa      	bne.n	80061c2 <FastMulInnerBase+0x3e>
 80061cc:	2d00      	cmp	r5, #0
 80061ce:	6803      	ldr	r3, [r0, #0]
 80061d0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 80061d4:	bf08      	it	eq
 80061d6:	2204      	moveq	r2, #4
 80061d8:	2100      	movs	r1, #0
 80061da:	4445      	add	r5, r8
 80061dc:	f000 ffda 	bl	8007194 <memset>
 80061e0:	80a5      	strh	r5, [r4, #4]
 80061e2:	e7da      	b.n	800619a <FastMulInnerBase+0x16>
 80061e4:	2600      	movs	r6, #0
 80061e6:	e7d8      	b.n	800619a <FastMulInnerBase+0x16>

080061e8 <LeftShift>:
 80061e8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80061ec:	4681      	mov	r9, r0
 80061ee:	b3b1      	cbz	r1, 800625e <LeftShift+0x76>
 80061f0:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 80061f4:	f8d0 c000 	ldr.w	ip, [r0]
 80061f8:	f108 4a80 	add.w	sl, r8, #1073741824	; 0x40000000
 80061fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006200:	f1c1 0720 	rsb	r7, r1, #32
 8006204:	f85c 502a 	ldr.w	r5, [ip, sl, lsl #2]
 8006208:	f1b8 0301 	subs.w	r3, r8, #1
 800620c:	eb0c 0a8a 	add.w	sl, ip, sl, lsl #2
 8006210:	fa25 f007 	lsr.w	r0, r5, r7
 8006214:	bf18      	it	ne
 8006216:	4652      	movne	r2, sl
 8006218:	d101      	bne.n	800621e <LeftShift+0x36>
 800621a:	e009      	b.n	8006230 <LeftShift+0x48>
 800621c:	4625      	mov	r5, r4
 800621e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8006222:	408d      	lsls	r5, r1
 8006224:	fa24 f607 	lsr.w	r6, r4, r7
 8006228:	4335      	orrs	r5, r6
 800622a:	3b01      	subs	r3, #1
 800622c:	6055      	str	r5, [r2, #4]
 800622e:	d1f5      	bne.n	800621c <LeftShift+0x34>
 8006230:	f8dc 3000 	ldr.w	r3, [ip]
 8006234:	fa03 f101 	lsl.w	r1, r3, r1
 8006238:	f8cc 1000 	str.w	r1, [ip]
 800623c:	b160      	cbz	r0, 8006258 <LeftShift+0x70>
 800623e:	f899 3006 	ldrb.w	r3, [r9, #6]
 8006242:	f108 0801 	add.w	r8, r8, #1
 8006246:	4598      	cmp	r8, r3
 8006248:	bf97      	itett	ls
 800624a:	f8ca 0004 	strls.w	r0, [sl, #4]
 800624e:	f241 40b5 	movwhi	r0, #5301	; 0x14b5
 8006252:	2000      	movls	r0, #0
 8006254:	f8a9 8004 	strhls.w	r8, [r9, #4]
 8006258:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800625c:	4770      	bx	lr
 800625e:	4608      	mov	r0, r1
 8006260:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop

08006268 <MulBigbyUnInt>:
 8006268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	4684      	mov	ip, r0
 800626e:	460f      	mov	r7, r1
 8006270:	b339      	cbz	r1, 80062c2 <MulBigbyUnInt+0x5a>
 8006272:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 8006276:	f8d0 9000 	ldr.w	r9, [r0]
 800627a:	f1b8 0f00 	cmp.w	r8, #0
 800627e:	d01d      	beq.n	80062bc <MulBigbyUnInt+0x54>
 8006280:	f1a9 0604 	sub.w	r6, r9, #4
 8006284:	eb06 0188 	add.w	r1, r6, r8, lsl #2
 8006288:	2200      	movs	r2, #0
 800628a:	2300      	movs	r3, #0
 800628c:	6874      	ldr	r4, [r6, #4]
 800628e:	4692      	mov	sl, r2
 8006290:	469b      	mov	fp, r3
 8006292:	fbe7 ab04 	umlal	sl, fp, r7, r4
 8006296:	f846 af04 	str.w	sl, [r6, #4]!
 800629a:	428e      	cmp	r6, r1
 800629c:	465d      	mov	r5, fp
 800629e:	465a      	mov	r2, fp
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	d1f2      	bne.n	800628c <MulBigbyUnInt+0x24>
 80062a6:	b14d      	cbz	r5, 80062bc <MulBigbyUnInt+0x54>
 80062a8:	f89c 0006 	ldrb.w	r0, [ip, #6]
 80062ac:	f108 0101 	add.w	r1, r8, #1
 80062b0:	4281      	cmp	r1, r0
 80062b2:	d90b      	bls.n	80062cc <MulBigbyUnInt+0x64>
 80062b4:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80062b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062bc:	2000      	movs	r0, #0
 80062be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	f7ff fdf9 	bl	8005eb8 <SetZeroBig>
 80062c6:	4638      	mov	r0, r7
 80062c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062cc:	f8ac 1004 	strh.w	r1, [ip, #4]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f849 b028 	str.w	fp, [r9, r8, lsl #2]
 80062d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062da:	bf00      	nop

080062dc <Sub_Moduli_Big>:
 80062dc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80062e0:	8883      	ldrh	r3, [r0, #4]
 80062e2:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 80062e6:	4692      	mov	sl, r2
 80062e8:	7992      	ldrb	r2, [r2, #6]
 80062ea:	454b      	cmp	r3, r9
 80062ec:	bf2c      	ite	cs
 80062ee:	4698      	movcs	r8, r3
 80062f0:	46c8      	movcc	r8, r9
 80062f2:	3201      	adds	r2, #1
 80062f4:	4590      	cmp	r8, r2
 80062f6:	d904      	bls.n	8006302 <Sub_Moduli_Big+0x26>
 80062f8:	f241 40b5 	movw	r0, #5301	; 0x14b5
 80062fc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006300:	4770      	bx	lr
 8006302:	7982      	ldrb	r2, [r0, #6]
 8006304:	6807      	ldr	r7, [r0, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	bf28      	it	cs
 800630a:	2400      	movcs	r4, #0
 800630c:	d306      	bcc.n	800631c <Sub_Moduli_Big+0x40>
 800630e:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 8006312:	3301      	adds	r3, #1
 8006314:	7982      	ldrb	r2, [r0, #6]
 8006316:	b29b      	uxth	r3, r3
 8006318:	429a      	cmp	r2, r3
 800631a:	d2f8      	bcs.n	800630e <Sub_Moduli_Big+0x32>
 800631c:	798b      	ldrb	r3, [r1, #6]
 800631e:	f8d1 c000 	ldr.w	ip, [r1]
 8006322:	454b      	cmp	r3, r9
 8006324:	d308      	bcc.n	8006338 <Sub_Moduli_Big+0x5c>
 8006326:	464b      	mov	r3, r9
 8006328:	2000      	movs	r0, #0
 800632a:	f84c 0023 	str.w	r0, [ip, r3, lsl #2]
 800632e:	3301      	adds	r3, #1
 8006330:	798a      	ldrb	r2, [r1, #6]
 8006332:	b29b      	uxth	r3, r3
 8006334:	429a      	cmp	r2, r3
 8006336:	d2f8      	bcs.n	800632a <Sub_Moduli_Big+0x4e>
 8006338:	2500      	movs	r5, #0
 800633a:	f8da 6000 	ldr.w	r6, [sl]
 800633e:	f109 0901 	add.w	r9, r9, #1
 8006342:	462c      	mov	r4, r5
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800634c:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 8006350:	3401      	adds	r4, #1
 8006352:	1a40      	subs	r0, r0, r1
 8006354:	eb60 0100 	sbc.w	r1, r0, r0
 8006358:	1880      	adds	r0, r0, r2
 800635a:	b2a4      	uxth	r4, r4
 800635c:	eb41 0103 	adc.w	r1, r1, r3
 8006360:	454c      	cmp	r4, r9
 8006362:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 8006366:	460a      	mov	r2, r1
 8006368:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800636c:	4625      	mov	r5, r4
 800636e:	d3eb      	bcc.n	8006348 <Sub_Moduli_Big+0x6c>
 8006370:	45a0      	cmp	r8, r4
 8006372:	d90f      	bls.n	8006394 <Sub_Moduli_Big+0xb8>
 8006374:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006378:	f104 0c01 	add.w	ip, r4, #1
 800637c:	1950      	adds	r0, r2, r5
 800637e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8006382:	fa1f f48c 	uxth.w	r4, ip
 8006386:	f143 0100 	adc.w	r1, r3, #0
 800638a:	45a0      	cmp	r8, r4
 800638c:	460a      	mov	r2, r1
 800638e:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8006392:	d8ef      	bhi.n	8006374 <Sub_Moduli_Big+0x98>
 8006394:	b132      	cbz	r2, 80063a4 <Sub_Moduli_Big+0xc8>
 8006396:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 800639a:	3b01      	subs	r3, #1
 800639c:	f06f 0201 	mvn.w	r2, #1
 80063a0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
 80063a4:	1e63      	subs	r3, r4, #1
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80063ac:	b942      	cbnz	r2, 80063c0 <Sub_Moduli_Big+0xe4>
 80063ae:	b16b      	cbz	r3, 80063cc <Sub_Moduli_Big+0xf0>
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80063b8:	2a00      	cmp	r2, #0
 80063ba:	d0f8      	beq.n	80063ae <Sub_Moduli_Big+0xd2>
 80063bc:	1c5c      	adds	r4, r3, #1
 80063be:	b2a4      	uxth	r4, r4
 80063c0:	f8aa 4004 	strh.w	r4, [sl, #4]
 80063c4:	2000      	movs	r0, #0
 80063c6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80063ca:	4770      	bx	lr
 80063cc:	2401      	movs	r4, #1
 80063ce:	f8aa 4004 	strh.w	r4, [sl, #4]
 80063d2:	2000      	movs	r0, #0
 80063d4:	e7f7      	b.n	80063c6 <Sub_Moduli_Big+0xea>
 80063d6:	bf00      	nop

080063d8 <SubBig>:
 80063d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	460d      	mov	r5, r1
 80063e0:	ac02      	add	r4, sp, #8
 80063e2:	2100      	movs	r1, #0
 80063e4:	f890 c006 	ldrb.w	ip, [r0, #6]
 80063e8:	f844 1d04 	str.w	r1, [r4, #-4]!
 80063ec:	f895 e006 	ldrb.w	lr, [r5, #6]
 80063f0:	4606      	mov	r6, r0
 80063f2:	4690      	mov	r8, r2
 80063f4:	45f4      	cmp	ip, lr
 80063f6:	bf2c      	ite	cs
 80063f8:	4661      	movcs	r1, ip
 80063fa:	4671      	movcc	r1, lr
 80063fc:	4620      	mov	r0, r4
 80063fe:	461a      	mov	r2, r3
 8006400:	461f      	mov	r7, r3
 8006402:	f7ff fc53 	bl	8005cac <StAllocBig>
 8006406:	b120      	cbz	r0, 8006412 <SubBig+0x3a>
 8006408:	f240 30ed 	movw	r0, #1005	; 0x3ed
 800640c:	b002      	add	sp, #8
 800640e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006412:	9b01      	ldr	r3, [sp, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	809a      	strh	r2, [r3, #4]
 8006418:	4630      	mov	r0, r6
 800641a:	4629      	mov	r1, r5
 800641c:	f7ff fd60 	bl	8005ee0 <CompareBig>
 8006420:	3003      	adds	r0, #3
 8006422:	2806      	cmp	r0, #6
 8006424:	d80d      	bhi.n	8006442 <SubBig+0x6a>
 8006426:	e8df f000 	tbb	[pc, r0]
 800642a:	3639      	.short	0x3639
 800642c:	262f3204 	.word	0x262f3204
 8006430:	1d          	.byte	0x1d
 8006431:	00          	.byte	0x00
 8006432:	4628      	mov	r0, r5
 8006434:	4631      	mov	r1, r6
 8006436:	9a01      	ldr	r2, [sp, #4]
 8006438:	f7ff ff50 	bl	80062dc <Sub_Moduli_Big>
 800643c:	9b01      	ldr	r3, [sp, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	71da      	strb	r2, [r3, #7]
 8006442:	4640      	mov	r0, r8
 8006444:	2100      	movs	r1, #0
 8006446:	f7ff fc5d 	bl	8005d04 <InitBig>
 800644a:	4641      	mov	r1, r8
 800644c:	9801      	ldr	r0, [sp, #4]
 800644e:	f7ff fc75 	bl	8005d3c <CopyBig>
 8006452:	4639      	mov	r1, r7
 8006454:	4605      	mov	r5, r0
 8006456:	4620      	mov	r0, r4
 8006458:	f7ff fc46 	bl	8005ce8 <StFreeBig>
 800645c:	4628      	mov	r0, r5
 800645e:	b002      	add	sp, #8
 8006460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006464:	9a01      	ldr	r2, [sp, #4]
 8006466:	4630      	mov	r0, r6
 8006468:	4629      	mov	r1, r5
 800646a:	f7ff fc9d 	bl	8005da8 <Add_Moduli_Big>
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	71da      	strb	r2, [r3, #7]
 8006474:	e7e5      	b.n	8006442 <SubBig+0x6a>
 8006476:	4630      	mov	r0, r6
 8006478:	4629      	mov	r1, r5
 800647a:	9a01      	ldr	r2, [sp, #4]
 800647c:	f7ff ff2e 	bl	80062dc <Sub_Moduli_Big>
 8006480:	9b01      	ldr	r3, [sp, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	71da      	strb	r2, [r3, #7]
 8006486:	e7dc      	b.n	8006442 <SubBig+0x6a>
 8006488:	4628      	mov	r0, r5
 800648a:	4631      	mov	r1, r6
 800648c:	e7f5      	b.n	800647a <SubBig+0xa2>
 800648e:	9801      	ldr	r0, [sp, #4]
 8006490:	f7ff fd12 	bl	8005eb8 <SetZeroBig>
 8006494:	e7d5      	b.n	8006442 <SubBig+0x6a>
 8006496:	4630      	mov	r0, r6
 8006498:	4629      	mov	r1, r5
 800649a:	e7cc      	b.n	8006436 <SubBig+0x5e>
 800649c:	9a01      	ldr	r2, [sp, #4]
 800649e:	4630      	mov	r0, r6
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7ff fc81 	bl	8005da8 <Add_Moduli_Big>
 80064a6:	9b01      	ldr	r3, [sp, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	71da      	strb	r2, [r3, #7]
 80064ac:	e7c9      	b.n	8006442 <SubBig+0x6a>
 80064ae:	bf00      	nop

080064b0 <MontyInit>:
 80064b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	468b      	mov	fp, r1
 80064b6:	7981      	ldrb	r1, [r0, #6]
 80064b8:	b083      	sub	sp, #12
 80064ba:	f10b 0a04 	add.w	sl, fp, #4
 80064be:	4680      	mov	r8, r0
 80064c0:	2300      	movs	r3, #0
 80064c2:	3102      	adds	r1, #2
 80064c4:	4650      	mov	r0, sl
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	4691      	mov	r9, r2
 80064ca:	f7ff fbef 	bl	8005cac <StAllocBig>
 80064ce:	b128      	cbz	r0, 80064dc <MontyInit+0x2c>
 80064d0:	f240 37ed 	movw	r7, #1005	; 0x3ed
 80064d4:	4638      	mov	r0, r7
 80064d6:	b003      	add	sp, #12
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064dc:	4601      	mov	r1, r0
 80064de:	f8cb 8000 	str.w	r8, [fp]
 80064e2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80064e6:	f7ff fc0d 	bl	8005d04 <InitBig>
 80064ea:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80064ee:	f8db 3004 	ldr.w	r3, [fp, #4]
 80064f2:	f8d8 2000 	ldr.w	r2, [r8]
 80064f6:	6819      	ldr	r1, [r3, #0]
 80064f8:	3001      	adds	r0, #1
 80064fa:	8098      	strh	r0, [r3, #4]
 80064fc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006500:	2401      	movs	r4, #1
 8006502:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	261f      	movs	r6, #31
 800650a:	2502      	movs	r5, #2
 800650c:	2703      	movs	r7, #3
 800650e:	fb02 f304 	mul.w	r3, r2, r4
 8006512:	403b      	ands	r3, r7
 8006514:	eb05 0e04 	add.w	lr, r5, r4
 8006518:	42ab      	cmp	r3, r5
 800651a:	bf28      	it	cs
 800651c:	4674      	movcs	r4, lr
 800651e:	007f      	lsls	r7, r7, #1
 8006520:	3e01      	subs	r6, #1
 8006522:	f087 0701 	eor.w	r7, r7, #1
 8006526:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800652a:	d1f0      	bne.n	800650e <MontyInit+0x5e>
 800652c:	4264      	negs	r4, r4
 800652e:	f8cb 4008 	str.w	r4, [fp, #8]
 8006532:	f898 1006 	ldrb.w	r1, [r8, #6]
 8006536:	a801      	add	r0, sp, #4
 8006538:	3101      	adds	r1, #1
 800653a:	464a      	mov	r2, r9
 800653c:	f7ff fbb6 	bl	8005cac <StAllocBig>
 8006540:	b148      	cbz	r0, 8006556 <MontyInit+0xa6>
 8006542:	4650      	mov	r0, sl
 8006544:	4649      	mov	r1, r9
 8006546:	f7ff fbcf 	bl	8005ce8 <StFreeBig>
 800654a:	f240 37ed 	movw	r7, #1005	; 0x3ed
 800654e:	4638      	mov	r0, r7
 8006550:	b003      	add	sp, #12
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	9901      	ldr	r1, [sp, #4]
 8006558:	4640      	mov	r0, r8
 800655a:	f7ff fbef 	bl	8005d3c <CopyBig>
 800655e:	9801      	ldr	r0, [sp, #4]
 8006560:	f7ff fd08 	bl	8005f74 <CountBits>
 8006564:	4240      	negs	r0, r0
 8006566:	f000 051f 	and.w	r5, r0, #31
 800656a:	4629      	mov	r1, r5
 800656c:	9801      	ldr	r0, [sp, #4]
 800656e:	f7ff fe3b 	bl	80061e8 <LeftShift>
 8006572:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006576:	9901      	ldr	r1, [sp, #4]
 8006578:	4602      	mov	r2, r0
 800657a:	464b      	mov	r3, r9
 800657c:	f7ff ff2c 	bl	80063d8 <SubBig>
 8006580:	4607      	mov	r7, r0
 8006582:	2800      	cmp	r0, #0
 8006584:	d143      	bne.n	800660e <MontyInit+0x15e>
 8006586:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800658a:	b35b      	cbz	r3, 80065e4 <MontyInit+0x134>
 800658c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006594:	3b01      	subs	r3, #1
 8006596:	6802      	ldr	r2, [r0, #0]
 8006598:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800659c:	2101      	movs	r1, #1
 800659e:	f7ff fdf1 	bl	8006184 <FastMulInnerBase>
 80065a2:	2c00      	cmp	r4, #0
 80065a4:	d03e      	beq.n	8006624 <MontyInit+0x174>
 80065a6:	9901      	ldr	r1, [sp, #4]
 80065a8:	4640      	mov	r0, r8
 80065aa:	f7ff fbc7 	bl	8005d3c <CopyBig>
 80065ae:	4621      	mov	r1, r4
 80065b0:	9801      	ldr	r0, [sp, #4]
 80065b2:	f7ff fe59 	bl	8006268 <MulBigbyUnInt>
 80065b6:	4629      	mov	r1, r5
 80065b8:	9801      	ldr	r0, [sp, #4]
 80065ba:	f7ff fe15 	bl	80061e8 <LeftShift>
 80065be:	f8db 0004 	ldr.w	r0, [fp, #4]
 80065c2:	9901      	ldr	r1, [sp, #4]
 80065c4:	4602      	mov	r2, r0
 80065c6:	464b      	mov	r3, r9
 80065c8:	f7ff ff06 	bl	80063d8 <SubBig>
 80065cc:	f8db 2004 	ldr.w	r2, [fp, #4]
 80065d0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80065d4:	6812      	ldr	r2, [r2, #0]
 80065d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80065da:	2c00      	cmp	r4, #0
 80065dc:	d1e3      	bne.n	80065a6 <MontyInit+0xf6>
 80065de:	3601      	adds	r6, #1
 80065e0:	429e      	cmp	r6, r3
 80065e2:	d3d3      	bcc.n	800658c <MontyInit+0xdc>
 80065e4:	a801      	add	r0, sp, #4
 80065e6:	4649      	mov	r1, r9
 80065e8:	f7ff fb7e 	bl	8005ce8 <StFreeBig>
 80065ec:	f8db 0004 	ldr.w	r0, [fp, #4]
 80065f0:	4641      	mov	r1, r8
 80065f2:	f7ff fc75 	bl	8005ee0 <CompareBig>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	dd06      	ble.n	8006608 <MontyInit+0x158>
 80065fa:	f8db 0004 	ldr.w	r0, [fp, #4]
 80065fe:	4641      	mov	r1, r8
 8006600:	4602      	mov	r2, r0
 8006602:	464b      	mov	r3, r9
 8006604:	f7ff fee8 	bl	80063d8 <SubBig>
 8006608:	f8cb 900c 	str.w	r9, [fp, #12]
 800660c:	e762      	b.n	80064d4 <MontyInit+0x24>
 800660e:	4650      	mov	r0, sl
 8006610:	4649      	mov	r1, r9
 8006612:	f7ff fb69 	bl	8005ce8 <StFreeBig>
 8006616:	a801      	add	r0, sp, #4
 8006618:	4649      	mov	r1, r9
 800661a:	f7ff fb65 	bl	8005ce8 <StFreeBig>
 800661e:	f240 37ed 	movw	r7, #1005	; 0x3ed
 8006622:	e757      	b.n	80064d4 <MontyInit+0x24>
 8006624:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006628:	e7d9      	b.n	80065de <MontyInit+0x12e>
 800662a:	bf00      	nop

0800662c <MontyKillR2>:
 800662c:	b508      	push	{r3, lr}
 800662e:	4603      	mov	r3, r0
 8006630:	3004      	adds	r0, #4
 8006632:	68d9      	ldr	r1, [r3, #12]
 8006634:	f7ff fb58 	bl	8005ce8 <StFreeBig>
 8006638:	bd08      	pop	{r3, pc}
 800663a:	bf00      	nop

0800663c <MontyKillAll>:
 800663c:	6841      	ldr	r1, [r0, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	b508      	push	{r3, lr}
 8006642:	4603      	mov	r3, r0
 8006644:	6002      	str	r2, [r0, #0]
 8006646:	6082      	str	r2, [r0, #8]
 8006648:	b119      	cbz	r1, 8006652 <MontyKillAll+0x16>
 800664a:	3004      	adds	r0, #4
 800664c:	68d9      	ldr	r1, [r3, #12]
 800664e:	f7ff fb4b 	bl	8005ce8 <StFreeBig>
 8006652:	bd08      	pop	{r3, pc}

08006654 <MontyMul>:
 8006654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	b09f      	sub	sp, #124	; 0x7c
 800665a:	9312      	str	r3, [sp, #72]	; 0x48
 800665c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800665e:	921a      	str	r2, [sp, #104]	; 0x68
 8006660:	682c      	ldr	r4, [r5, #0]
 8006662:	ab1e      	add	r3, sp, #120	; 0x78
 8006664:	9315      	str	r3, [sp, #84]	; 0x54
 8006666:	68ab      	ldr	r3, [r5, #8]
 8006668:	88a5      	ldrh	r5, [r4, #4]
 800666a:	9318      	str	r3, [sp, #96]	; 0x60
 800666c:	950a      	str	r5, [sp, #40]	; 0x28
 800666e:	79a3      	ldrb	r3, [r4, #6]
 8006670:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006672:	6824      	ldr	r4, [r4, #0]
 8006674:	9414      	str	r4, [sp, #80]	; 0x50
 8006676:	2400      	movs	r4, #0
 8006678:	f845 4d04 	str.w	r4, [r5, #-4]!
 800667c:	460c      	mov	r4, r1
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006682:	9515      	str	r5, [sp, #84]	; 0x54
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	9313      	str	r3, [sp, #76]	; 0x4c
 800668a:	4605      	mov	r5, r0
 800668c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800668e:	f7ff fb0d 	bl	8005cac <StAllocBig>
 8006692:	4606      	mov	r6, r0
 8006694:	b120      	cbz	r0, 80066a0 <MontyMul+0x4c>
 8006696:	f240 30ed 	movw	r0, #1005	; 0x3ed
 800669a:	b01f      	add	sp, #124	; 0x7c
 800669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80066a2:	4631      	mov	r1, r6
 80066a4:	f7ff fb2e 	bl	8005d04 <InitBig>
 80066a8:	88a0      	ldrh	r0, [r4, #4]
 80066aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ac:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80066ae:	941b      	str	r4, [sp, #108]	; 0x6c
 80066b0:	4283      	cmp	r3, r0
 80066b2:	6827      	ldr	r7, [r4, #0]
 80066b4:	d907      	bls.n	80066c6 <MontyMul+0x72>
 80066b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80066b8:	1a1a      	subs	r2, r3, r0
 80066ba:	4631      	mov	r1, r6
 80066bc:	0092      	lsls	r2, r2, #2
 80066be:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80066c2:	f000 fd67 	bl	8007194 <memset>
 80066c6:	88ab      	ldrh	r3, [r5, #4]
 80066c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066ca:	429c      	cmp	r4, r3
 80066cc:	f240 80c5 	bls.w	800685a <MontyMul+0x206>
 80066d0:	6828      	ldr	r0, [r5, #0]
 80066d2:	1ae2      	subs	r2, r4, r3
 80066d4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80066d8:	0092      	lsls	r2, r2, #2
 80066da:	2100      	movs	r1, #0
 80066dc:	f000 fd5a 	bl	8007194 <memset>
 80066e0:	6829      	ldr	r1, [r5, #0]
 80066e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80066e4:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 80066e8:	00ab      	lsls	r3, r5, #2
 80066ea:	3801      	subs	r0, #1
 80066ec:	1f1a      	subs	r2, r3, #4
 80066ee:	0080      	lsls	r0, r0, #2
 80066f0:	3904      	subs	r1, #4
 80066f2:	18ba      	adds	r2, r7, r2
 80066f4:	18fb      	adds	r3, r7, r3
 80066f6:	9007      	str	r0, [sp, #28]
 80066f8:	2000      	movs	r0, #0
 80066fa:	9116      	str	r1, [sp, #88]	; 0x58
 80066fc:	9219      	str	r2, [sp, #100]	; 0x64
 80066fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8006700:	900b      	str	r0, [sp, #44]	; 0x2c
 8006702:	46bc      	mov	ip, r7
 8006704:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006706:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006708:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800670c:	9106      	str	r1, [sp, #24]
 800670e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006710:	6821      	ldr	r1, [r4, #0]
 8006712:	9806      	ldr	r0, [sp, #24]
 8006714:	f8dc 2000 	ldr.w	r2, [ip]
 8006718:	682c      	ldr	r4, [r5, #0]
 800671a:	9316      	str	r3, [sp, #88]	; 0x58
 800671c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800671e:	2300      	movs	r3, #0
 8006720:	fbe1 2300 	umlal	r2, r3, r1, r0
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	2100      	movs	r1, #0
 800672a:	fb02 fe05 	mul.w	lr, r2, r5
 800672e:	4010      	ands	r0, r2
 8006730:	4019      	ands	r1, r3
 8006732:	fbe4 010e 	umlal	r0, r1, r4, lr
 8006736:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006738:	2c01      	cmp	r4, #1
 800673a:	d02c      	beq.n	8006796 <MontyMul+0x142>
 800673c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800673e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006740:	4666      	mov	r6, ip
 8006742:	2400      	movs	r4, #0
 8006744:	469b      	mov	fp, r3
 8006746:	f04f 0900 	mov.w	r9, #0
 800674a:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800674e:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8006752:	9104      	str	r1, [sp, #16]
 8006754:	f8cd 9014 	str.w	r9, [sp, #20]
 8006758:	9303      	str	r3, [sp, #12]
 800675a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800675e:	eb1b 0a02 	adds.w	sl, fp, r2
 8006762:	9a03      	ldr	r2, [sp, #12]
 8006764:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8006768:	fbee 0102 	umlal	r0, r1, lr, r2
 800676c:	e9cd 0100 	strd	r0, r1, [sp]
 8006770:	9806      	ldr	r0, [sp, #24]
 8006772:	9a07      	ldr	r2, [sp, #28]
 8006774:	f149 0b00 	adc.w	fp, r9, #0
 8006778:	fbe0 ab03 	umlal	sl, fp, r0, r3
 800677c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006780:	eb10 000a 	adds.w	r0, r0, sl
 8006784:	f84c 0004 	str.w	r0, [ip, r4]
 8006788:	f104 0404 	add.w	r4, r4, #4
 800678c:	f141 0100 	adc.w	r1, r1, #0
 8006790:	4294      	cmp	r4, r2
 8006792:	d1d8      	bne.n	8006746 <MontyMul+0xf2>
 8006794:	465b      	mov	r3, fp
 8006796:	2500      	movs	r5, #0
 8006798:	9308      	str	r3, [sp, #32]
 800679a:	9509      	str	r5, [sp, #36]	; 0x24
 800679c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800679e:	910c      	str	r1, [sp, #48]	; 0x30
 80067a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	950d      	str	r5, [sp, #52]	; 0x34
 80067a8:	18c0      	adds	r0, r0, r3
 80067aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80067ae:	f141 0100 	adc.w	r1, r1, #0
 80067b2:	9110      	str	r1, [sp, #64]	; 0x40
 80067b4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80067b6:	950f      	str	r5, [sp, #60]	; 0x3c
 80067b8:	1812      	adds	r2, r2, r0
 80067ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80067bc:	600a      	str	r2, [r1, #0]
 80067be:	f143 0300 	adc.w	r3, r3, #0
 80067c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067c4:	930e      	str	r3, [sp, #56]	; 0x38
 80067c6:	9511      	str	r5, [sp, #68]	; 0x44
 80067c8:	4403      	add	r3, r0
 80067ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d0:	3501      	adds	r5, #1
 80067d2:	42ab      	cmp	r3, r5
 80067d4:	950b      	str	r5, [sp, #44]	; 0x2c
 80067d6:	d895      	bhi.n	8006704 <MontyMul+0xb0>
 80067d8:	4667      	mov	r7, ip
 80067da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80067dc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80067de:	1c6b      	adds	r3, r5, #1
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	80a3      	strh	r3, [r4, #4]
 80067e6:	d915      	bls.n	8006814 <MontyMul+0x1c0>
 80067e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067ec:	3b01      	subs	r3, #1
 80067ee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80067f2:	b97b      	cbnz	r3, 8006814 <MontyMul+0x1c0>
 80067f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f6:	e005      	b.n	8006804 <MontyMul+0x1b0>
 80067f8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80067fc:	1e59      	subs	r1, r3, #1
 80067fe:	b289      	uxth	r1, r1
 8006800:	bb12      	cbnz	r2, 8006848 <MontyMul+0x1f4>
 8006802:	460b      	mov	r3, r1
 8006804:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8006808:	2b01      	cmp	r3, #1
 800680a:	f102 32ff 	add.w	r2, r2, #4294967295
 800680e:	d1f3      	bne.n	80067f8 <MontyMul+0x1a4>
 8006810:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006812:	80ab      	strh	r3, [r5, #4]
 8006814:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006816:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006818:	6821      	ldr	r1, [r4, #0]
 800681a:	f7ff fb61 	bl	8005ee0 <CompareBig>
 800681e:	2800      	cmp	r0, #0
 8006820:	db15      	blt.n	800684e <MontyMul+0x1fa>
 8006822:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006824:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006826:	6829      	ldr	r1, [r5, #0]
 8006828:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800682a:	f7ff fd57 	bl	80062dc <Sub_Moduli_Big>
 800682e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006830:	2300      	movs	r3, #0
 8006832:	4604      	mov	r4, r0
 8006834:	71eb      	strb	r3, [r5, #7]
 8006836:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006838:	9815      	ldr	r0, [sp, #84]	; 0x54
 800683a:	68d9      	ldr	r1, [r3, #12]
 800683c:	f7ff fa54 	bl	8005ce8 <StFreeBig>
 8006840:	4620      	mov	r0, r4
 8006842:	b01f      	add	sp, #124	; 0x7c
 8006844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006848:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800684a:	80a3      	strh	r3, [r4, #4]
 800684c:	e7e2      	b.n	8006814 <MontyMul+0x1c0>
 800684e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006850:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006852:	f7ff fa73 	bl	8005d3c <CopyBig>
 8006856:	4604      	mov	r4, r0
 8006858:	e7ed      	b.n	8006836 <MontyMul+0x1e2>
 800685a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0bc      	beq.n	80067da <MontyMul+0x186>
 8006860:	e73e      	b.n	80066e0 <MontyMul+0x8c>
 8006862:	bf00      	nop

08006864 <MontyExit>:
 8006864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006866:	b083      	sub	sp, #12
 8006868:	ac02      	add	r4, sp, #8
 800686a:	2300      	movs	r3, #0
 800686c:	4606      	mov	r6, r0
 800686e:	f844 3d04 	str.w	r3, [r4, #-4]!
 8006872:	4615      	mov	r5, r2
 8006874:	460f      	mov	r7, r1
 8006876:	4620      	mov	r0, r4
 8006878:	79b1      	ldrb	r1, [r6, #6]
 800687a:	68d2      	ldr	r2, [r2, #12]
 800687c:	f7ff fa16 	bl	8005cac <StAllocBig>
 8006880:	b118      	cbz	r0, 800688a <MontyExit+0x26>
 8006882:	f240 30ed 	movw	r0, #1005	; 0x3ed
 8006886:	b003      	add	sp, #12
 8006888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800688a:	9801      	ldr	r0, [sp, #4]
 800688c:	2101      	movs	r1, #1
 800688e:	f7ff fa39 	bl	8005d04 <InitBig>
 8006892:	463a      	mov	r2, r7
 8006894:	9901      	ldr	r1, [sp, #4]
 8006896:	462b      	mov	r3, r5
 8006898:	4630      	mov	r0, r6
 800689a:	f7ff fedb 	bl	8006654 <MontyMul>
 800689e:	68e9      	ldr	r1, [r5, #12]
 80068a0:	4606      	mov	r6, r0
 80068a2:	4620      	mov	r0, r4
 80068a4:	f7ff fa20 	bl	8005ce8 <StFreeBig>
 80068a8:	4630      	mov	r0, r6
 80068aa:	b003      	add	sp, #12
 80068ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ae:	bf00      	nop

080068b0 <ModularExpSlidWin>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	460f      	mov	r7, r1
 80068b6:	8889      	ldrh	r1, [r1, #4]
 80068b8:	b091      	sub	sp, #68	; 0x44
 80068ba:	2901      	cmp	r1, #1
 80068bc:	4681      	mov	r9, r0
 80068be:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80068c0:	4616      	mov	r6, r2
 80068c2:	469a      	mov	sl, r3
 80068c4:	f240 80d0 	bls.w	8006a68 <ModularExpSlidWin+0x1b8>
 80068c8:	f06f 0108 	mvn.w	r1, #8
 80068cc:	2308      	movs	r3, #8
 80068ce:	9106      	str	r1, [sp, #24]
 80068d0:	2210      	movs	r2, #16
 80068d2:	2104      	movs	r1, #4
 80068d4:	469c      	mov	ip, r3
 80068d6:	9205      	str	r2, [sp, #20]
 80068d8:	f04f 0820 	mov.w	r8, #32
 80068dc:	f04f 0b03 	mov.w	fp, #3
 80068e0:	9104      	str	r1, [sp, #16]
 80068e2:	79b2      	ldrb	r2, [r6, #6]
 80068e4:	88e5      	ldrh	r5, [r4, #6]
 80068e6:	00d1      	lsls	r1, r2, #3
 80068e8:	0092      	lsls	r2, r2, #2
 80068ea:	311c      	adds	r1, #28
 80068ec:	3211      	adds	r2, #17
 80068ee:	fb02 1303 	mla	r3, r2, r3, r1
 80068f2:	88a1      	ldrh	r1, [r4, #4]
 80068f4:	442b      	add	r3, r5
 80068f6:	4299      	cmp	r1, r3
 80068f8:	da05      	bge.n	8006906 <ModularExpSlidWin+0x56>
 80068fa:	f240 35ed 	movw	r5, #1005	; 0x3ed
 80068fe:	4628      	mov	r0, r5
 8006900:	b011      	add	sp, #68	; 0x44
 8006902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	9203      	str	r2, [sp, #12]
 800690a:	eb08 0305 	add.w	r3, r8, r5
 800690e:	80e3      	strh	r3, [r4, #6]
 8006910:	1953      	adds	r3, r2, r5
 8006912:	9307      	str	r3, [sp, #28]
 8006914:	d0f1      	beq.n	80068fa <ModularExpSlidWin+0x4a>
 8006916:	a90c      	add	r1, sp, #48	; 0x30
 8006918:	4630      	mov	r0, r6
 800691a:	4622      	mov	r2, r4
 800691c:	f8cd c004 	str.w	ip, [sp, #4]
 8006920:	f7ff fdc6 	bl	80064b0 <MontyInit>
 8006924:	2800      	cmp	r0, #0
 8006926:	d1e8      	bne.n	80068fa <ModularExpSlidWin+0x4a>
 8006928:	ab0c      	add	r3, sp, #48	; 0x30
 800692a:	4648      	mov	r0, r9
 800692c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800692e:	464a      	mov	r2, r9
 8006930:	f7ff fe90 	bl	8006654 <MontyMul>
 8006934:	4603      	mov	r3, r0
 8006936:	2800      	cmp	r0, #0
 8006938:	d1df      	bne.n	80068fa <ModularExpSlidWin+0x4a>
 800693a:	a80c      	add	r0, sp, #48	; 0x30
 800693c:	9302      	str	r3, [sp, #8]
 800693e:	f7ff fe75 	bl	800662c <MontyKillR2>
 8006942:	9b02      	ldr	r3, [sp, #8]
 8006944:	9308      	str	r3, [sp, #32]
 8006946:	f8dd c004 	ldr.w	ip, [sp, #4]
 800694a:	9b07      	ldr	r3, [sp, #28]
 800694c:	970b      	str	r7, [sp, #44]	; 0x2c
 800694e:	9f08      	ldr	r7, [sp, #32]
 8006950:	9509      	str	r5, [sp, #36]	; 0x24
 8006952:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006956:	4665      	mov	r5, ip
 8006958:	4698      	mov	r8, r3
 800695a:	4640      	mov	r0, r8
 800695c:	79b1      	ldrb	r1, [r6, #6]
 800695e:	4622      	mov	r2, r4
 8006960:	3701      	adds	r7, #1
 8006962:	f108 0804 	add.w	r8, r8, #4
 8006966:	f7ff f9a1 	bl	8005cac <StAllocBig>
 800696a:	2800      	cmp	r0, #0
 800696c:	d1c5      	bne.n	80068fa <ModularExpSlidWin+0x4a>
 800696e:	42af      	cmp	r7, r5
 8006970:	dbf3      	blt.n	800695a <ModularExpSlidWin+0xaa>
 8006972:	4602      	mov	r2, r0
 8006974:	46ac      	mov	ip, r5
 8006976:	4611      	mov	r1, r2
 8006978:	4650      	mov	r0, sl
 800697a:	9202      	str	r2, [sp, #8]
 800697c:	f8cd c004 	str.w	ip, [sp, #4]
 8006980:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006982:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8006986:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006988:	f7ff f9bc 	bl	8005d04 <InitBig>
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	4648      	mov	r0, r9
 8006990:	5959      	ldr	r1, [r3, r5]
 8006992:	f7ff f9d3 	bl	8005d3c <CopyBig>
 8006996:	9a02      	ldr	r2, [sp, #8]
 8006998:	f8dd c004 	ldr.w	ip, [sp, #4]
 800699c:	f1bb 0f00 	cmp.w	fp, #0
 80069a0:	d013      	beq.n	80069ca <ModularExpSlidWin+0x11a>
 80069a2:	4623      	mov	r3, r4
 80069a4:	9e07      	ldr	r6, [sp, #28]
 80069a6:	f8cd c00c 	str.w	ip, [sp, #12]
 80069aa:	4614      	mov	r4, r2
 80069ac:	461d      	mov	r5, r3
 80069ae:	6830      	ldr	r0, [r6, #0]
 80069b0:	ab0c      	add	r3, sp, #48	; 0x30
 80069b2:	4601      	mov	r1, r0
 80069b4:	4602      	mov	r2, r0
 80069b6:	3401      	adds	r4, #1
 80069b8:	f7ff fe4c 	bl	8006654 <MontyMul>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d19c      	bne.n	80068fa <ModularExpSlidWin+0x4a>
 80069c0:	455c      	cmp	r4, fp
 80069c2:	d1f4      	bne.n	80069ae <ModularExpSlidWin+0xfe>
 80069c4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80069c8:	462c      	mov	r4, r5
 80069ca:	f1bc 0f01 	cmp.w	ip, #1
 80069ce:	d010      	beq.n	80069f2 <ModularExpSlidWin+0x142>
 80069d0:	9907      	ldr	r1, [sp, #28]
 80069d2:	2601      	movs	r6, #1
 80069d4:	1f0d      	subs	r5, r1, #4
 80069d6:	46e3      	mov	fp, ip
 80069d8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80069dc:	4649      	mov	r1, r9
 80069de:	686a      	ldr	r2, [r5, #4]
 80069e0:	ab0c      	add	r3, sp, #48	; 0x30
 80069e2:	3601      	adds	r6, #1
 80069e4:	f7ff fe36 	bl	8006654 <MontyMul>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d186      	bne.n	80068fa <ModularExpSlidWin+0x4a>
 80069ec:	455e      	cmp	r6, fp
 80069ee:	d1f3      	bne.n	80069d8 <ModularExpSlidWin+0x128>
 80069f0:	46dc      	mov	ip, fp
 80069f2:	88bb      	ldrh	r3, [r7, #4]
 80069f4:	f8cd c004 	str.w	ip, [sp, #4]
 80069f8:	2600      	movs	r6, #0
 80069fa:	3b01      	subs	r3, #1
 80069fc:	4648      	mov	r0, r9
 80069fe:	4651      	mov	r1, sl
 8006a00:	9603      	str	r6, [sp, #12]
 8006a02:	9308      	str	r3, [sp, #32]
 8006a04:	f7ff f99a 	bl	8005d3c <CopyBig>
 8006a08:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006a0c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8006a10:	4635      	mov	r5, r6
 8006a12:	46b4      	mov	ip, r6
 8006a14:	940a      	str	r4, [sp, #40]	; 0x28
 8006a16:	4634      	mov	r4, r6
 8006a18:	9e04      	ldr	r6, [sp, #16]
 8006a1a:	f04f 0b01 	mov.w	fp, #1
 8006a1e:	f1bb 0b01 	subs.w	fp, fp, #1
 8006a22:	d109      	bne.n	8006a38 <ModularExpSlidWin+0x188>
 8006a24:	9a08      	ldr	r2, [sp, #32]
 8006a26:	1c53      	adds	r3, r2, #1
 8006a28:	d05f      	beq.n	8006aea <ModularExpSlidWin+0x23a>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8006a30:	3a01      	subs	r2, #1
 8006a32:	f04f 0b20 	mov.w	fp, #32
 8006a36:	9208      	str	r2, [sp, #32]
 8006a38:	0fe3      	lsrs	r3, r4, #31
 8006a3a:	0064      	lsls	r4, r4, #1
 8006a3c:	f1bc 0f00 	cmp.w	ip, #0
 8006a40:	d01f      	beq.n	8006a82 <ModularExpSlidWin+0x1d2>
 8006a42:	f1bc 0f01 	cmp.w	ip, #1
 8006a46:	d101      	bne.n	8006a4c <ModularExpSlidWin+0x19c>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d040      	beq.n	8006ace <ModularExpSlidWin+0x21e>
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	9903      	ldr	r1, [sp, #12]
 8006a50:	1b72      	subs	r2, r6, r5
 8006a52:	4093      	lsls	r3, r2
 8006a54:	4319      	orrs	r1, r3
 8006a56:	42b5      	cmp	r5, r6
 8006a58:	9103      	str	r1, [sp, #12]
 8006a5a:	d019      	beq.n	8006a90 <ModularExpSlidWin+0x1e0>
 8006a5c:	f1bb 0b01 	subs.w	fp, fp, #1
 8006a60:	f04f 0c02 	mov.w	ip, #2
 8006a64:	d1e8      	bne.n	8006a38 <ModularExpSlidWin+0x188>
 8006a66:	e7dd      	b.n	8006a24 <ModularExpSlidWin+0x174>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f06f 0101 	mvn.w	r1, #1
 8006a6e:	2202      	movs	r2, #2
 8006a70:	469c      	mov	ip, r3
 8006a72:	9304      	str	r3, [sp, #16]
 8006a74:	9106      	str	r1, [sp, #24]
 8006a76:	9205      	str	r2, [sp, #20]
 8006a78:	f04f 0804 	mov.w	r8, #4
 8006a7c:	f04f 0b00 	mov.w	fp, #0
 8006a80:	e72f      	b.n	80068e2 <ModularExpSlidWin+0x32>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0cb      	beq.n	8006a1e <ModularExpSlidWin+0x16e>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0e0      	beq.n	8006a4c <ModularExpSlidWin+0x19c>
 8006a8a:	f04f 0c01 	mov.w	ip, #1
 8006a8e:	e7c6      	b.n	8006a1e <ModularExpSlidWin+0x16e>
 8006a90:	2500      	movs	r5, #0
 8006a92:	4650      	mov	r0, sl
 8006a94:	4651      	mov	r1, sl
 8006a96:	4652      	mov	r2, sl
 8006a98:	ab0c      	add	r3, sp, #48	; 0x30
 8006a9a:	3501      	adds	r5, #1
 8006a9c:	f7ff fdda 	bl	8006654 <MontyMul>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	f47f af2a 	bne.w	80068fa <ModularExpSlidWin+0x4a>
 8006aa6:	42ae      	cmp	r6, r5
 8006aa8:	dcf3      	bgt.n	8006a92 <ModularExpSlidWin+0x1e2>
 8006aaa:	9a03      	ldr	r2, [sp, #12]
 8006aac:	9906      	ldr	r1, [sp, #24]
 8006aae:	ea02 0301 	and.w	r3, r2, r1
 8006ab2:	9a07      	ldr	r2, [sp, #28]
 8006ab4:	4650      	mov	r0, sl
 8006ab6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006aba:	4652      	mov	r2, sl
 8006abc:	ab0c      	add	r3, sp, #48	; 0x30
 8006abe:	f7ff fdc9 	bl	8006654 <MontyMul>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	f47f af19 	bne.w	80068fa <ModularExpSlidWin+0x4a>
 8006ac8:	9003      	str	r0, [sp, #12]
 8006aca:	4605      	mov	r5, r0
 8006acc:	e7dd      	b.n	8006a8a <ModularExpSlidWin+0x1da>
 8006ace:	4650      	mov	r0, sl
 8006ad0:	4651      	mov	r1, sl
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	ab0c      	add	r3, sp, #48	; 0x30
 8006ad6:	f8cd c004 	str.w	ip, [sp, #4]
 8006ada:	f7ff fdbb 	bl	8006654 <MontyMul>
 8006ade:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	f47f af09 	bne.w	80068fa <ModularExpSlidWin+0x4a>
 8006ae8:	e799      	b.n	8006a1e <ModularExpSlidWin+0x16e>
 8006aea:	4663      	mov	r3, ip
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8006af2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006af4:	d11f      	bne.n	8006b36 <ModularExpSlidWin+0x286>
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	dd1d      	ble.n	8006b36 <ModularExpSlidWin+0x286>
 8006afa:	9e03      	ldr	r6, [sp, #12]
 8006afc:	4667      	mov	r7, ip
 8006afe:	e001      	b.n	8006b04 <ModularExpSlidWin+0x254>
 8006b00:	45ab      	cmp	fp, r5
 8006b02:	d017      	beq.n	8006b34 <ModularExpSlidWin+0x284>
 8006b04:	4650      	mov	r0, sl
 8006b06:	4651      	mov	r1, sl
 8006b08:	4652      	mov	r2, sl
 8006b0a:	ab0c      	add	r3, sp, #48	; 0x30
 8006b0c:	0076      	lsls	r6, r6, #1
 8006b0e:	f10b 0b01 	add.w	fp, fp, #1
 8006b12:	f7ff fd9f 	bl	8006654 <MontyMul>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	f47f aeef 	bne.w	80068fa <ModularExpSlidWin+0x4a>
 8006b1c:	9b05      	ldr	r3, [sp, #20]
 8006b1e:	4233      	tst	r3, r6
 8006b20:	d0ee      	beq.n	8006b00 <ModularExpSlidWin+0x250>
 8006b22:	4650      	mov	r0, sl
 8006b24:	4649      	mov	r1, r9
 8006b26:	4652      	mov	r2, sl
 8006b28:	ab0c      	add	r3, sp, #48	; 0x30
 8006b2a:	f7ff fd93 	bl	8006654 <MontyMul>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d0e6      	beq.n	8006b00 <ModularExpSlidWin+0x250>
 8006b32:	e6e2      	b.n	80068fa <ModularExpSlidWin+0x4a>
 8006b34:	46bc      	mov	ip, r7
 8006b36:	4650      	mov	r0, sl
 8006b38:	4651      	mov	r1, sl
 8006b3a:	aa0c      	add	r2, sp, #48	; 0x30
 8006b3c:	f8cd c004 	str.w	ip, [sp, #4]
 8006b40:	f7ff fe90 	bl	8006864 <MontyExit>
 8006b44:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006b48:	4605      	mov	r5, r0
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	f47f aed5 	bne.w	80068fa <ModularExpSlidWin+0x4a>
 8006b50:	a80c      	add	r0, sp, #48	; 0x30
 8006b52:	f8cd c004 	str.w	ip, [sp, #4]
 8006b56:	f7ff fd71 	bl	800663c <MontyKillAll>
 8006b5a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006b5e:	462e      	mov	r6, r5
 8006b60:	4667      	mov	r7, ip
 8006b62:	9907      	ldr	r1, [sp, #28]
 8006b64:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8006b68:	4621      	mov	r1, r4
 8006b6a:	3601      	adds	r6, #1
 8006b6c:	f7ff f8bc 	bl	8005ce8 <StFreeBig>
 8006b70:	42be      	cmp	r6, r7
 8006b72:	dbf6      	blt.n	8006b62 <ModularExpSlidWin+0x2b2>
 8006b74:	88e3      	ldrh	r3, [r4, #6]
 8006b76:	ebc8 0803 	rsb	r8, r8, r3
 8006b7a:	f8a4 8006 	strh.w	r8, [r4, #6]
 8006b7e:	e6be      	b.n	80068fe <ModularExpSlidWin+0x4e>

08006b80 <RSASP1>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	4c97      	ldr	r4, [pc, #604]	; (8006de4 <RSASP1+0x264>)
 8006b86:	f8df c260 	ldr.w	ip, [pc, #608]	; 8006de8 <RSASP1+0x268>
 8006b8a:	b08f      	sub	sp, #60	; 0x3c
 8006b8c:	2501      	movs	r5, #1
 8006b8e:	2700      	movs	r7, #0
 8006b90:	9709      	str	r7, [sp, #36]	; 0x24
 8006b92:	6025      	str	r5, [r4, #0]
 8006b94:	6824      	ldr	r4, [r4, #0]
 8006b96:	9409      	str	r4, [sp, #36]	; 0x24
 8006b98:	f8dc 4000 	ldr.w	r4, [ip]
 8006b9c:	9409      	str	r4, [sp, #36]	; 0x24
 8006b9e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8006ba2:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	460d      	mov	r5, r1
 8006baa:	4616      	mov	r6, r2
 8006bac:	469a      	mov	sl, r3
 8006bae:	d057      	beq.n	8006c60 <RSASP1+0xe0>
 8006bb0:	970a      	str	r7, [sp, #40]	; 0x28
 8006bb2:	970b      	str	r7, [sp, #44]	; 0x2c
 8006bb4:	970c      	str	r7, [sp, #48]	; 0x30
 8006bb6:	970d      	str	r7, [sp, #52]	; 0x34
 8006bb8:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8006bbc:	6887      	ldr	r7, [r0, #8]
 8006bbe:	f8d0 8000 	ldr.w	r8, [r0]
 8006bc2:	6843      	ldr	r3, [r0, #4]
 8006bc4:	2900      	cmp	r1, #0
 8006bc6:	d033      	beq.n	8006c30 <RSASP1+0xb0>
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	d031      	beq.n	8006c30 <RSASP1+0xb0>
 8006bcc:	f1b8 0f00 	cmp.w	r8, #0
 8006bd0:	d02e      	beq.n	8006c30 <RSASP1+0xb0>
 8006bd2:	f112 0c02 	adds.w	ip, r2, #2
 8006bd6:	d02b      	beq.n	8006c30 <RSASP1+0xb0>
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	dd28      	ble.n	8006c30 <RSASP1+0xb0>
 8006bde:	f103 3bff 	add.w	fp, r3, #4294967295
 8006be2:	f1bb 0f00 	cmp.w	fp, #0
 8006be6:	dd23      	ble.n	8006c30 <RSASP1+0xb0>
 8006be8:	45d9      	cmp	r9, fp
 8006bea:	dc21      	bgt.n	8006c30 <RSASP1+0xb0>
 8006bec:	3302      	adds	r3, #2
 8006bee:	089b      	lsrs	r3, r3, #2
 8006bf0:	aa0a      	add	r2, sp, #40	; 0x28
 8006bf2:	9205      	str	r2, [sp, #20]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	4652      	mov	r2, sl
 8006bfa:	9303      	str	r3, [sp, #12]
 8006bfc:	f8cd c010 	str.w	ip, [sp, #16]
 8006c00:	f7ff f854 	bl	8005cac <StAllocBig>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d130      	bne.n	8006c70 <RSASP1+0xf0>
 8006c0e:	aa0c      	add	r2, sp, #48	; 0x30
 8006c10:	9206      	str	r2, [sp, #24]
 8006c12:	4610      	mov	r0, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	4652      	mov	r2, sl
 8006c18:	f8cd c010 	str.w	ip, [sp, #16]
 8006c1c:	f7ff f846 	bl	8005cac <StAllocBig>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	f000 80b1 	beq.w	8006d88 <RSASP1+0x208>
 8006c26:	9805      	ldr	r0, [sp, #20]
 8006c28:	4651      	mov	r1, sl
 8006c2a:	f7ff f85d 	bl	8005ce8 <StFreeBig>
 8006c2e:	e01f      	b.n	8006c70 <RSASP1+0xf0>
 8006c30:	461c      	mov	r4, r3
 8006c32:	2300      	movs	r3, #0
 8006c34:	930a      	str	r3, [sp, #40]	; 0x28
 8006c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c38:	930c      	str	r3, [sp, #48]	; 0x30
 8006c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8006c3c:	b155      	cbz	r5, 8006c54 <RSASP1+0xd4>
 8006c3e:	b14f      	cbz	r7, 8006c54 <RSASP1+0xd4>
 8006c40:	f1b8 0f00 	cmp.w	r8, #0
 8006c44:	d006      	beq.n	8006c54 <RSASP1+0xd4>
 8006c46:	b12e      	cbz	r6, 8006c54 <RSASP1+0xd4>
 8006c48:	4599      	cmp	r9, r3
 8006c4a:	dd03      	ble.n	8006c54 <RSASP1+0xd4>
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	dd01      	ble.n	8006c54 <RSASP1+0xd4>
 8006c50:	45a1      	cmp	r9, r4
 8006c52:	dd66      	ble.n	8006d22 <RSASP1+0x1a2>
 8006c54:	f241 3bef 	movw	fp, #5103	; 0x13ef
 8006c58:	4658      	mov	r0, fp
 8006c5a:	b00f      	add	sp, #60	; 0x3c
 8006c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c62:	f8cc 3000 	str.w	r3, [ip]
 8006c66:	f8dc 3000 	ldr.w	r3, [ip]
 8006c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6e:	b933      	cbnz	r3, 8006c7e <RSASP1+0xfe>
 8006c70:	68a7      	ldr	r7, [r4, #8]
 8006c72:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8006c76:	f8d4 8000 	ldr.w	r8, [r4]
 8006c7a:	6864      	ldr	r4, [r4, #4]
 8006c7c:	e7d9      	b.n	8006c32 <RSASP1+0xb2>
 8006c7e:	970a      	str	r7, [sp, #40]	; 0x28
 8006c80:	970b      	str	r7, [sp, #44]	; 0x2c
 8006c82:	970c      	str	r7, [sp, #48]	; 0x30
 8006c84:	970d      	str	r7, [sp, #52]	; 0x34
 8006c86:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8006c8a:	6887      	ldr	r7, [r0, #8]
 8006c8c:	6803      	ldr	r3, [r0, #0]
 8006c8e:	6842      	ldr	r2, [r0, #4]
 8006c90:	2900      	cmp	r1, #0
 8006c92:	d043      	beq.n	8006d1c <RSASP1+0x19c>
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	d041      	beq.n	8006d1c <RSASP1+0x19c>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d03f      	beq.n	8006d1c <RSASP1+0x19c>
 8006c9c:	f116 0b02 	adds.w	fp, r6, #2
 8006ca0:	d03c      	beq.n	8006d1c <RSASP1+0x19c>
 8006ca2:	f1b9 0f00 	cmp.w	r9, #0
 8006ca6:	dd39      	ble.n	8006d1c <RSASP1+0x19c>
 8006ca8:	f102 38ff 	add.w	r8, r2, #4294967295
 8006cac:	f1b8 0f00 	cmp.w	r8, #0
 8006cb0:	dd34      	ble.n	8006d1c <RSASP1+0x19c>
 8006cb2:	45c1      	cmp	r9, r8
 8006cb4:	dc32      	bgt.n	8006d1c <RSASP1+0x19c>
 8006cb6:	3202      	adds	r2, #2
 8006cb8:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8006cbc:	aa0a      	add	r2, sp, #40	; 0x28
 8006cbe:	9205      	str	r2, [sp, #20]
 8006cc0:	4661      	mov	r1, ip
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	4652      	mov	r2, sl
 8006cc6:	9303      	str	r3, [sp, #12]
 8006cc8:	f8cd c010 	str.w	ip, [sp, #16]
 8006ccc:	f7fe ffee 	bl	8005cac <StAllocBig>
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d1ca      	bne.n	8006c70 <RSASP1+0xf0>
 8006cda:	aa0c      	add	r2, sp, #48	; 0x30
 8006cdc:	9206      	str	r2, [sp, #24]
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4661      	mov	r1, ip
 8006ce2:	4652      	mov	r2, sl
 8006ce4:	9303      	str	r3, [sp, #12]
 8006ce6:	f7fe ffe1 	bl	8005cac <StAllocBig>
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d19a      	bne.n	8006c26 <RSASP1+0xa6>
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cf6:	f7ff f983 	bl	8006000 <W8_to_Big>
 8006cfa:	4641      	mov	r1, r8
 8006cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f7ff f97e 	bl	8006000 <W8_to_Big>
 8006d04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d08:	f7ff f8ea 	bl	8005ee0 <CompareBig>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	f2c0 808d 	blt.w	8006e2c <RSASP1+0x2ac>
 8006d12:	9806      	ldr	r0, [sp, #24]
 8006d14:	4651      	mov	r1, sl
 8006d16:	f7fe ffe7 	bl	8005ce8 <StFreeBig>
 8006d1a:	e784      	b.n	8006c26 <RSASP1+0xa6>
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	4698      	mov	r8, r3
 8006d20:	e787      	b.n	8006c32 <RSASP1+0xb2>
 8006d22:	1ce3      	adds	r3, r4, #3
 8006d24:	089b      	lsrs	r3, r3, #2
 8006d26:	aa0a      	add	r2, sp, #40	; 0x28
 8006d28:	9205      	str	r2, [sp, #20]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4652      	mov	r2, sl
 8006d30:	9303      	str	r3, [sp, #12]
 8006d32:	f7fe ffbb 	bl	8005cac <StAllocBig>
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	4683      	mov	fp, r0
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d18c      	bne.n	8006c58 <RSASP1+0xd8>
 8006d3e:	aa0c      	add	r2, sp, #48	; 0x30
 8006d40:	9206      	str	r2, [sp, #24]
 8006d42:	4610      	mov	r0, r2
 8006d44:	4619      	mov	r1, r3
 8006d46:	4652      	mov	r2, sl
 8006d48:	f7fe ffb0 	bl	8005cac <StAllocBig>
 8006d4c:	4683      	mov	fp, r0
 8006d4e:	b120      	cbz	r0, 8006d5a <RSASP1+0x1da>
 8006d50:	9805      	ldr	r0, [sp, #20]
 8006d52:	4651      	mov	r1, sl
 8006d54:	f7fe ffc8 	bl	8005ce8 <StFreeBig>
 8006d58:	e77e      	b.n	8006c58 <RSASP1+0xd8>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d5e:	4640      	mov	r0, r8
 8006d60:	f7ff f94e 	bl	8006000 <W8_to_Big>
 8006d64:	4621      	mov	r1, r4
 8006d66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f7ff f949 	bl	8006000 <W8_to_Big>
 8006d6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d72:	f7ff f8b5 	bl	8005ee0 <CompareBig>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	db38      	blt.n	8006dec <RSASP1+0x26c>
 8006d7a:	f241 3bf2 	movw	fp, #5106	; 0x13f2
 8006d7e:	9806      	ldr	r0, [sp, #24]
 8006d80:	4651      	mov	r1, sl
 8006d82:	f7fe ffb1 	bl	8005ce8 <StFreeBig>
 8006d86:	e7e3      	b.n	8006d50 <RSASP1+0x1d0>
 8006d88:	4659      	mov	r1, fp
 8006d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	f7ff f937 	bl	8006000 <W8_to_Big>
 8006d92:	4659      	mov	r1, fp
 8006d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d96:	4628      	mov	r0, r5
 8006d98:	f7ff f932 	bl	8006000 <W8_to_Big>
 8006d9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006da0:	f7ff f89e 	bl	8005ee0 <CompareBig>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	dab4      	bge.n	8006d12 <RSASP1+0x192>
 8006da8:	ab0d      	add	r3, sp, #52	; 0x34
 8006daa:	f109 0103 	add.w	r1, r9, #3
 8006dae:	4618      	mov	r0, r3
 8006db0:	0889      	lsrs	r1, r1, #2
 8006db2:	4652      	mov	r2, sl
 8006db4:	9307      	str	r3, [sp, #28]
 8006db6:	f7fe ff79 	bl	8005cac <StAllocBig>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d1a9      	bne.n	8006d12 <RSASP1+0x192>
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dc4:	f7ff f91c 	bl	8006000 <W8_to_Big>
 8006dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dca:	af0b      	add	r7, sp, #44	; 0x2c
 8006dcc:	7999      	ldrb	r1, [r3, #6]
 8006dce:	4638      	mov	r0, r7
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	f7fe ff6b 	bl	8005cac <StAllocBig>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d05d      	beq.n	8006e96 <RSASP1+0x316>
 8006dda:	9807      	ldr	r0, [sp, #28]
 8006ddc:	4651      	mov	r1, sl
 8006dde:	f7fe ff83 	bl	8005ce8 <StFreeBig>
 8006de2:	e796      	b.n	8006d12 <RSASP1+0x192>
 8006de4:	40023008 	.word	0x40023008
 8006de8:	40023000 	.word	0x40023000
 8006dec:	ab0d      	add	r3, sp, #52	; 0x34
 8006dee:	f109 0103 	add.w	r1, r9, #3
 8006df2:	4618      	mov	r0, r3
 8006df4:	0889      	lsrs	r1, r1, #2
 8006df6:	4652      	mov	r2, sl
 8006df8:	9307      	str	r3, [sp, #28]
 8006dfa:	f7fe ff57 	bl	8005cac <StAllocBig>
 8006dfe:	4683      	mov	fp, r0
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d1bc      	bne.n	8006d7e <RSASP1+0x1fe>
 8006e04:	4638      	mov	r0, r7
 8006e06:	4649      	mov	r1, r9
 8006e08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e0a:	f7ff f8f9 	bl	8006000 <W8_to_Big>
 8006e0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e10:	af0b      	add	r7, sp, #44	; 0x2c
 8006e12:	7999      	ldrb	r1, [r3, #6]
 8006e14:	4638      	mov	r0, r7
 8006e16:	4652      	mov	r2, sl
 8006e18:	f7fe ff48 	bl	8005cac <StAllocBig>
 8006e1c:	4683      	mov	fp, r0
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d073      	beq.n	8006f0a <RSASP1+0x38a>
 8006e22:	9807      	ldr	r0, [sp, #28]
 8006e24:	4651      	mov	r1, sl
 8006e26:	f7fe ff5f 	bl	8005ce8 <StFreeBig>
 8006e2a:	e7a8      	b.n	8006d7e <RSASP1+0x1fe>
 8006e2c:	ab0d      	add	r3, sp, #52	; 0x34
 8006e2e:	f109 0103 	add.w	r1, r9, #3
 8006e32:	4618      	mov	r0, r3
 8006e34:	0889      	lsrs	r1, r1, #2
 8006e36:	4652      	mov	r2, sl
 8006e38:	9307      	str	r3, [sp, #28]
 8006e3a:	f7fe ff37 	bl	8005cac <StAllocBig>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f47f af67 	bne.w	8006d12 <RSASP1+0x192>
 8006e44:	4638      	mov	r0, r7
 8006e46:	4649      	mov	r1, r9
 8006e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e4a:	f7ff f8d9 	bl	8006000 <W8_to_Big>
 8006e4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e50:	af0b      	add	r7, sp, #44	; 0x2c
 8006e52:	7999      	ldrb	r1, [r3, #6]
 8006e54:	4638      	mov	r0, r7
 8006e56:	4652      	mov	r2, sl
 8006e58:	f7fe ff28 	bl	8005cac <StAllocBig>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d1bc      	bne.n	8006dda <RSASP1+0x25a>
 8006e60:	f8cd a000 	str.w	sl, [sp]
 8006e64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6c:	f7ff fd20 	bl	80068b0 <ModularExpSlidWin>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d145      	bne.n	8006f00 <RSASP1+0x380>
 8006e74:	4681      	mov	r9, r0
 8006e76:	4603      	mov	r3, r0
 8006e78:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e7a:	9303      	str	r3, [sp, #12]
 8006e7c:	f7ff f89e 	bl	8005fbc <CountBytes>
 8006e80:	ebc0 0008 	rsb	r0, r0, r8
 8006e84:	4581      	cmp	r9, r0
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	da64      	bge.n	8006f54 <RSASP1+0x3d4>
 8006e8a:	eb06 0209 	add.w	r2, r6, r9
 8006e8e:	f109 0901 	add.w	r9, r9, #1
 8006e92:	7093      	strb	r3, [r2, #2]
 8006e94:	e7f0      	b.n	8006e78 <RSASP1+0x2f8>
 8006e96:	f8cd a000 	str.w	sl, [sp]
 8006e9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea2:	f7ff fd05 	bl	80068b0 <ModularExpSlidWin>
 8006ea6:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006eaa:	bb48      	cbnz	r0, 8006f00 <RSASP1+0x380>
 8006eac:	463a      	mov	r2, r7
 8006eae:	4680      	mov	r8, r0
 8006eb0:	462f      	mov	r7, r5
 8006eb2:	4681      	mov	r9, r0
 8006eb4:	4625      	mov	r5, r4
 8006eb6:	4664      	mov	r4, ip
 8006eb8:	e005      	b.n	8006ec6 <RSASP1+0x346>
 8006eba:	eb06 0308 	add.w	r3, r6, r8
 8006ebe:	f108 0801 	add.w	r8, r8, #1
 8006ec2:	f883 9002 	strb.w	r9, [r3, #2]
 8006ec6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ec8:	9204      	str	r2, [sp, #16]
 8006eca:	f7ff f877 	bl	8005fbc <CountBytes>
 8006ece:	ebc0 000b 	rsb	r0, r0, fp
 8006ed2:	4580      	cmp	r8, r0
 8006ed4:	9a04      	ldr	r2, [sp, #16]
 8006ed6:	dbf0      	blt.n	8006eba <RSASP1+0x33a>
 8006ed8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8006edc:	46a4      	mov	ip, r4
 8006ede:	4640      	mov	r0, r8
 8006ee0:	f8cd c010 	str.w	ip, [sp, #16]
 8006ee4:	462c      	mov	r4, r5
 8006ee6:	463d      	mov	r5, r7
 8006ee8:	4617      	mov	r7, r2
 8006eea:	f7ff f867 	bl	8005fbc <CountBytes>
 8006eee:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006ef2:	ebc0 010b 	rsb	r1, r0, fp
 8006ef6:	4461      	add	r1, ip
 8006ef8:	4640      	mov	r0, r8
 8006efa:	2200      	movs	r2, #0
 8006efc:	f7ff f902 	bl	8006104 <Big_to_W8>
 8006f00:	4638      	mov	r0, r7
 8006f02:	4651      	mov	r1, sl
 8006f04:	f7fe fef0 	bl	8005ce8 <StFreeBig>
 8006f08:	e767      	b.n	8006dda <RSASP1+0x25a>
 8006f0a:	f8cd a000 	str.w	sl, [sp]
 8006f0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f16:	f7ff fccb 	bl	80068b0 <ModularExpSlidWin>
 8006f1a:	4683      	mov	fp, r0
 8006f1c:	b9a8      	cbnz	r0, 8006f4a <RSASP1+0x3ca>
 8006f1e:	4605      	mov	r5, r0
 8006f20:	4680      	mov	r8, r0
 8006f22:	e002      	b.n	8006f2a <RSASP1+0x3aa>
 8006f24:	f806 8005 	strb.w	r8, [r6, r5]
 8006f28:	3501      	adds	r5, #1
 8006f2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f2c:	f7ff f846 	bl	8005fbc <CountBytes>
 8006f30:	1a20      	subs	r0, r4, r0
 8006f32:	4285      	cmp	r5, r0
 8006f34:	dbf6      	blt.n	8006f24 <RSASP1+0x3a4>
 8006f36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f7ff f83f 	bl	8005fbc <CountBytes>
 8006f3e:	1a21      	subs	r1, r4, r0
 8006f40:	4431      	add	r1, r6
 8006f42:	4628      	mov	r0, r5
 8006f44:	2200      	movs	r2, #0
 8006f46:	f7ff f8dd 	bl	8006104 <Big_to_W8>
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	4651      	mov	r1, sl
 8006f4e:	f7fe fecb 	bl	8005ce8 <StFreeBig>
 8006f52:	e766      	b.n	8006e22 <RSASP1+0x2a2>
 8006f54:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006f58:	4648      	mov	r0, r9
 8006f5a:	f7ff f82f 	bl	8005fbc <CountBytes>
 8006f5e:	ebc0 0108 	rsb	r1, r0, r8
 8006f62:	4459      	add	r1, fp
 8006f64:	4648      	mov	r0, r9
 8006f66:	2200      	movs	r2, #0
 8006f68:	f7ff f8cc 	bl	8006104 <Big_to_W8>
 8006f6c:	e7c8      	b.n	8006f00 <RSASP1+0x380>
 8006f6e:	bf00      	nop

08006f70 <RSA_PKCS1v15_Decrypt>:
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	b083      	sub	sp, #12
 8006f76:	2500      	movs	r5, #0
 8006f78:	9501      	str	r5, [sp, #4]
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	4616      	mov	r6, r2
 8006f7e:	461f      	mov	r7, r3
 8006f80:	4605      	mov	r5, r0
 8006f82:	b150      	cbz	r0, 8006f9a <RSA_PKCS1v15_Decrypt+0x2a>
 8006f84:	b149      	cbz	r1, 8006f9a <RSA_PKCS1v15_Decrypt+0x2a>
 8006f86:	b142      	cbz	r2, 8006f9a <RSA_PKCS1v15_Decrypt+0x2a>
 8006f88:	6809      	ldr	r1, [r1, #0]
 8006f8a:	b131      	cbz	r1, 8006f9a <RSA_PKCS1v15_Decrypt+0x2a>
 8006f8c:	68a2      	ldr	r2, [r4, #8]
 8006f8e:	b122      	cbz	r2, 8006f9a <RSA_PKCS1v15_Decrypt+0x2a>
 8006f90:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8006f94:	6842      	ldr	r2, [r0, #4]
 8006f96:	4594      	cmp	ip, r2
 8006f98:	d004      	beq.n	8006fa4 <RSA_PKCS1v15_Decrypt+0x34>
 8006f9a:	f241 30f4 	movw	r0, #5108	; 0x13f4
 8006f9e:	b003      	add	sp, #12
 8006fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa4:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8006fa8:	889a      	ldrh	r2, [r3, #4]
 8006faa:	44cc      	add	ip, r9
 8006fac:	4562      	cmp	r2, ip
 8006fae:	dbf4      	blt.n	8006f9a <RSA_PKCS1v15_Decrypt+0x2a>
 8006fb0:	f8d3 a000 	ldr.w	sl, [r3]
 8006fb4:	f8a3 c006 	strh.w	ip, [r3, #6]
 8006fb8:	eb0a 0809 	add.w	r8, sl, r9
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	f7ff fddf 	bl	8006b80 <RSASP1>
 8006fc2:	b130      	cbz	r0, 8006fd2 <RSA_PKCS1v15_Decrypt+0x62>
 8006fc4:	686b      	ldr	r3, [r5, #4]
 8006fc6:	f241 30f4 	movw	r0, #5108	; 0x13f4
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	80fb      	strh	r3, [r7, #6]
 8006fd0:	e7e5      	b.n	8006f9e <RSA_PKCS1v15_Decrypt+0x2e>
 8006fd2:	f81a 3009 	ldrb.w	r3, [sl, r9]
 8006fd6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006fda:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8006fde:	f082 0a02 	eor.w	sl, r2, #2
 8006fe2:	f1b9 0f02 	cmp.w	r9, #2
 8006fe6:	ea4a 0a03 	orr.w	sl, sl, r3
 8006fea:	4602      	mov	r2, r0
 8006fec:	dd10      	ble.n	8007010 <RSA_PKCS1v15_Decrypt+0xa0>
 8006fee:	f108 0102 	add.w	r1, r8, #2
 8006ff2:	eb08 0c09 	add.w	ip, r8, r9
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006ffc:	ea40 1010 	orr.w	r0, r0, r0, lsr #4
 8007000:	ea40 0090 	orr.w	r0, r0, r0, lsr #2
 8007004:	ea40 0050 	orr.w	r0, r0, r0, lsr #1
 8007008:	4003      	ands	r3, r0
 800700a:	4561      	cmp	r1, ip
 800700c:	441a      	add	r2, r3
 800700e:	d1f3      	bne.n	8006ff8 <RSA_PKCS1v15_Decrypt+0x88>
 8007010:	f022 0b07 	bic.w	fp, r2, #7
 8007014:	ea4b 2b2b 	orr.w	fp, fp, fp, asr #8
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	4843      	ldr	r0, [pc, #268]	; (8007128 <RSA_PKCS1v15_Decrypt+0x1b8>)
 800701c:	4943      	ldr	r1, [pc, #268]	; (800712c <RSA_PKCS1v15_Decrypt+0x1bc>)
 800701e:	ea4b 1b2b 	orr.w	fp, fp, fp, asr #4
 8007022:	ea4b 0bab 	orr.w	fp, fp, fp, asr #2
 8007026:	ebc2 0c09 	rsb	ip, r2, r9
 800702a:	ea4b 0b6b 	orr.w	fp, fp, fp, asr #1
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	3b03      	subs	r3, #3
 8007032:	f1ac 0c03 	sub.w	ip, ip, #3
 8007036:	f00b 0b01 	and.w	fp, fp, #1
 800703a:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 800703e:	f08b 0b01 	eor.w	fp, fp, #1
 8007042:	fb93 fcf9 	sdiv	ip, r3, r9
 8007046:	fb09 391c 	mls	r9, r9, ip, r3
 800704a:	ea4a 0a0b 	orr.w	sl, sl, fp
 800704e:	f04f 0c01 	mov.w	ip, #1
 8007052:	ea0a 030c 	and.w	r3, sl, ip
 8007056:	f8c6 9000 	str.w	r9, [r6]
 800705a:	f8c0 c000 	str.w	ip, [r0]
 800705e:	6800      	ldr	r0, [r0, #0]
 8007060:	9001      	str	r0, [sp, #4]
 8007062:	ea83 030c 	eor.w	r3, r3, ip
 8007066:	fa03 fc0c 	lsl.w	ip, r3, ip
 800706a:	ea4c 0c03 	orr.w	ip, ip, r3
 800706e:	680b      	ldr	r3, [r1, #0]
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	ea4c 0c8c 	orr.w	ip, ip, ip, lsl #2
 8007076:	9b01      	ldr	r3, [sp, #4]
 8007078:	ea4c 1c0c 	orr.w	ip, ip, ip, lsl #4
 800707c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8007080:	3301      	adds	r3, #1
 8007082:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8007086:	d01d      	beq.n	80070c4 <RSA_PKCS1v15_Decrypt+0x154>
 8007088:	686b      	ldr	r3, [r5, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	dd13      	ble.n	80070b6 <RSA_PKCS1v15_Decrypt+0x146>
 800708e:	2300      	movs	r3, #0
 8007090:	4619      	mov	r1, r3
 8007092:	fa5f f98c 	uxtb.w	r9, ip
 8007096:	f818 6003 	ldrb.w	r6, [r8, r3]
 800709a:	68a0      	ldr	r0, [r4, #8]
 800709c:	ea06 0609 	and.w	r6, r6, r9
 80070a0:	5446      	strb	r6, [r0, r1]
 80070a2:	6868      	ldr	r0, [r5, #4]
 80070a4:	3301      	adds	r3, #1
 80070a6:	f3c2 66c0 	ubfx	r6, r2, #27, #1
 80070aa:	4298      	cmp	r0, r3
 80070ac:	4431      	add	r1, r6
 80070ae:	f1a2 0205 	sub.w	r2, r2, #5
 80070b2:	dcf0      	bgt.n	8007096 <RSA_PKCS1v15_Decrypt+0x126>
 80070b4:	4603      	mov	r3, r0
 80070b6:	ea6f 0c0c 	mvn.w	ip, ip
 80070ba:	f241 30f4 	movw	r0, #5108	; 0x13f4
 80070be:	ea0c 0000 	and.w	r0, ip, r0
 80070c2:	e782      	b.n	8006fca <RSA_PKCS1v15_Decrypt+0x5a>
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	600b      	str	r3, [r1, #0]
 80070c8:	680b      	ldr	r3, [r1, #0]
 80070ca:	9301      	str	r3, [sp, #4]
 80070cc:	9901      	ldr	r1, [sp, #4]
 80070ce:	686b      	ldr	r3, [r5, #4]
 80070d0:	b1a9      	cbz	r1, 80070fe <RSA_PKCS1v15_Decrypt+0x18e>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	ddef      	ble.n	80070b6 <RSA_PKCS1v15_Decrypt+0x146>
 80070d6:	2300      	movs	r3, #0
 80070d8:	3a03      	subs	r2, #3
 80070da:	4619      	mov	r1, r3
 80070dc:	fa5f f98c 	uxtb.w	r9, ip
 80070e0:	f818 6003 	ldrb.w	r6, [r8, r3]
 80070e4:	68a0      	ldr	r0, [r4, #8]
 80070e6:	ea06 0609 	and.w	r6, r6, r9
 80070ea:	5446      	strb	r6, [r0, r1]
 80070ec:	6868      	ldr	r0, [r5, #4]
 80070ee:	18d6      	adds	r6, r2, r3
 80070f0:	3301      	adds	r3, #1
 80070f2:	f3c6 6640 	ubfx	r6, r6, #25, #1
 80070f6:	4298      	cmp	r0, r3
 80070f8:	4431      	add	r1, r6
 80070fa:	dcf1      	bgt.n	80070e0 <RSA_PKCS1v15_Decrypt+0x170>
 80070fc:	e7da      	b.n	80070b4 <RSA_PKCS1v15_Decrypt+0x144>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	ddd9      	ble.n	80070b6 <RSA_PKCS1v15_Decrypt+0x146>
 8007102:	460b      	mov	r3, r1
 8007104:	3202      	adds	r2, #2
 8007106:	fa5f f98c 	uxtb.w	r9, ip
 800710a:	f818 6003 	ldrb.w	r6, [r8, r3]
 800710e:	68a0      	ldr	r0, [r4, #8]
 8007110:	ea06 0609 	and.w	r6, r6, r9
 8007114:	5446      	strb	r6, [r0, r1]
 8007116:	6868      	ldr	r0, [r5, #4]
 8007118:	1ad6      	subs	r6, r2, r3
 800711a:	3301      	adds	r3, #1
 800711c:	4298      	cmp	r0, r3
 800711e:	eb01 71d6 	add.w	r1, r1, r6, lsr #31
 8007122:	dcf2      	bgt.n	800710a <RSA_PKCS1v15_Decrypt+0x19a>
 8007124:	e7c6      	b.n	80070b4 <RSA_PKCS1v15_Decrypt+0x144>
 8007126:	bf00      	nop
 8007128:	40023008 	.word	0x40023008
 800712c:	40023000 	.word	0x40023000

08007130 <__libc_init_array>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4d0d      	ldr	r5, [pc, #52]	; (8007168 <__libc_init_array+0x38>)
 8007134:	4c0d      	ldr	r4, [pc, #52]	; (800716c <__libc_init_array+0x3c>)
 8007136:	1b64      	subs	r4, r4, r5
 8007138:	10a4      	asrs	r4, r4, #2
 800713a:	2600      	movs	r6, #0
 800713c:	42a6      	cmp	r6, r4
 800713e:	d109      	bne.n	8007154 <__libc_init_array+0x24>
 8007140:	4d0b      	ldr	r5, [pc, #44]	; (8007170 <__libc_init_array+0x40>)
 8007142:	4c0c      	ldr	r4, [pc, #48]	; (8007174 <__libc_init_array+0x44>)
 8007144:	f000 f82e 	bl	80071a4 <_init>
 8007148:	1b64      	subs	r4, r4, r5
 800714a:	10a4      	asrs	r4, r4, #2
 800714c:	2600      	movs	r6, #0
 800714e:	42a6      	cmp	r6, r4
 8007150:	d105      	bne.n	800715e <__libc_init_array+0x2e>
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	f855 3b04 	ldr.w	r3, [r5], #4
 8007158:	4798      	blx	r3
 800715a:	3601      	adds	r6, #1
 800715c:	e7ee      	b.n	800713c <__libc_init_array+0xc>
 800715e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007162:	4798      	blx	r3
 8007164:	3601      	adds	r6, #1
 8007166:	e7f2      	b.n	800714e <__libc_init_array+0x1e>
 8007168:	080074e0 	.word	0x080074e0
 800716c:	080074e0 	.word	0x080074e0
 8007170:	080074e0 	.word	0x080074e0
 8007174:	080074e4 	.word	0x080074e4

08007178 <memcpy>:
 8007178:	440a      	add	r2, r1
 800717a:	4291      	cmp	r1, r2
 800717c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007180:	d100      	bne.n	8007184 <memcpy+0xc>
 8007182:	4770      	bx	lr
 8007184:	b510      	push	{r4, lr}
 8007186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800718e:	4291      	cmp	r1, r2
 8007190:	d1f9      	bne.n	8007186 <memcpy+0xe>
 8007192:	bd10      	pop	{r4, pc}

08007194 <memset>:
 8007194:	4402      	add	r2, r0
 8007196:	4603      	mov	r3, r0
 8007198:	4293      	cmp	r3, r2
 800719a:	d100      	bne.n	800719e <memset+0xa>
 800719c:	4770      	bx	lr
 800719e:	f803 1b01 	strb.w	r1, [r3], #1
 80071a2:	e7f9      	b.n	8007198 <memset+0x4>

080071a4 <_init>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	bf00      	nop
 80071a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071aa:	bc08      	pop	{r3}
 80071ac:	469e      	mov	lr, r3
 80071ae:	4770      	bx	lr

080071b0 <_fini>:
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	bf00      	nop
 80071b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b6:	bc08      	pop	{r3}
 80071b8:	469e      	mov	lr, r3
 80071ba:	4770      	bx	lr
